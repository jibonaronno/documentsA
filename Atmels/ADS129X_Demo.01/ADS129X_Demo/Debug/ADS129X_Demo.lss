
ADS129X_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f28  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00403f28  00403f28  00013f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20000000  00403f30  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001f4  200009c0  004048f0  000209c0  2**2
                  ALLOC
  4 .stack        00003004  20000bb4  00404ae4  000209c0  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209ea  2**0
                  CONTENTS, READONLY
  7 .debug_info   000160c2  00000000  00000000  00020a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003571  00000000  00000000  00036b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004b32  00000000  00000000  0003a076  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ae8  00000000  00000000  0003eba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a20  00000000  00000000  0003f690  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001587f  00000000  00000000  000400b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d9ba  00000000  00000000  0005592f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00052f42  00000000  00000000  000632e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002404  00000000  00000000  000b622c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b8 3b 00 20 ad 09 40 00 a9 09 40 00 a9 09 40 00     .;. ..@...@...@.
  400010:	a9 09 40 00 a9 09 40 00 a9 09 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a9 09 40 00 a9 09 40 00 00 00 00 00 a9 09 40 00     ..@...@.......@.
  40003c:	a9 09 40 00 a9 09 40 00 a9 09 40 00 a9 09 40 00     ..@...@...@...@.
  40004c:	a9 09 40 00 a9 09 40 00 a9 09 40 00 a9 09 40 00     ..@...@...@...@.
  40005c:	00 00 00 00 a9 09 40 00 a9 09 40 00 00 00 00 00     ......@...@.....
  40006c:	f5 03 40 00 09 04 40 00 00 00 00 00 65 04 40 00     ..@...@.....e.@.
  40007c:	a9 09 40 00 00 00 00 00 00 00 00 00 a9 09 40 00     ..@...........@.
  40008c:	a9 09 40 00 a9 09 40 00 a9 09 40 00 a9 09 40 00     ..@...@...@...@.
  40009c:	1d 02 40 00 a9 09 40 00 a9 09 40 00 00 00 00 00     ..@...@...@.....
	...
  4000b4:	a9 09 40 00 a9 09 40 00 a9 09 40 00 a9 09 40 00     ..@...@...@...@.
  4000c4:	a9 09 40 00 a9 09 40 00                             ..@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009c0 	.word	0x200009c0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00403f30 	.word	0x00403f30

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00403f30 	.word	0x00403f30
  40012c:	200009c4 	.word	0x200009c4
  400130:	00403f30 	.word	0x00403f30
  400134:	00000000 	.word	0x00000000

00400138 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400138:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40013a:	0189      	lsls	r1, r1, #6
  40013c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40013e:	2402      	movs	r4, #2
  400140:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400142:	f04f 31ff 	mov.w	r1, #4294967295
  400146:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400148:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40014a:	605a      	str	r2, [r3, #4]
}
  40014c:	bc10      	pop	{r4}
  40014e:	4770      	bx	lr

00400150 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
  400150:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400154:	4770      	bx	lr

00400156 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400156:	0189      	lsls	r1, r1, #6
  400158:	2305      	movs	r3, #5
  40015a:	5043      	str	r3, [r0, r1]
  40015c:	4770      	bx	lr

0040015e <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40015e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400162:	61ca      	str	r2, [r1, #28]
  400164:	4770      	bx	lr

00400166 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400166:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  40016a:	624a      	str	r2, [r1, #36]	; 0x24
  40016c:	4770      	bx	lr

0040016e <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40016e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400172:	6a08      	ldr	r0, [r1, #32]
}
  400174:	4770      	bx	lr

00400176 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400176:	b4f0      	push	{r4, r5, r6, r7}
  400178:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40017a:	2402      	movs	r4, #2
  40017c:	9401      	str	r4, [sp, #4]
  40017e:	2408      	movs	r4, #8
  400180:	9402      	str	r4, [sp, #8]
  400182:	2420      	movs	r4, #32
  400184:	9403      	str	r4, [sp, #12]
  400186:	2480      	movs	r4, #128	; 0x80
  400188:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40018a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40018c:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40018e:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400190:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400194:	d814      	bhi.n	4001c0 <tc_find_mck_divisor+0x4a>
  400196:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400198:	42a0      	cmp	r0, r4
  40019a:	d217      	bcs.n	4001cc <tc_find_mck_divisor+0x56>
  40019c:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  40019e:	af01      	add	r7, sp, #4
  4001a0:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  4001a4:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4001a8:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4001aa:	4284      	cmp	r4, r0
  4001ac:	d30a      	bcc.n	4001c4 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4001ae:	4286      	cmp	r6, r0
  4001b0:	d90d      	bls.n	4001ce <tc_find_mck_divisor+0x58>
			ul_index++) {
  4001b2:	3501      	adds	r5, #1
	for (ul_index = 0;
  4001b4:	2d05      	cmp	r5, #5
  4001b6:	d1f3      	bne.n	4001a0 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4001b8:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4001ba:	b006      	add	sp, #24
  4001bc:	bcf0      	pop	{r4, r5, r6, r7}
  4001be:	4770      	bx	lr
			return 0;
  4001c0:	2000      	movs	r0, #0
  4001c2:	e7fa      	b.n	4001ba <tc_find_mck_divisor+0x44>
  4001c4:	2000      	movs	r0, #0
  4001c6:	e7f8      	b.n	4001ba <tc_find_mck_divisor+0x44>
	return 1;
  4001c8:	2001      	movs	r0, #1
  4001ca:	e7f6      	b.n	4001ba <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  4001cc:	2500      	movs	r5, #0
	if (p_uldiv) {
  4001ce:	b12a      	cbz	r2, 4001dc <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  4001d0:	a906      	add	r1, sp, #24
  4001d2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4001d6:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4001da:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4001dc:	2b00      	cmp	r3, #0
  4001de:	d0f3      	beq.n	4001c8 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4001e0:	601d      	str	r5, [r3, #0]
	return 1;
  4001e2:	2001      	movs	r0, #1
  4001e4:	e7e9      	b.n	4001ba <tc_find_mck_divisor+0x44>
	...

004001e8 <TMOUT_AddTick>:
**         will decrement all current counters by one down to zero.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void TMOUT_AddTick(void) {
  4001e8:	b508      	push	{r3, lr}
    uint8_t i;

    cpu_irq_enter_critical();
  4001ea:	4b09      	ldr	r3, [pc, #36]	; (400210 <TMOUT_AddTick+0x28>)
  4001ec:	4798      	blx	r3
  4001ee:	4b09      	ldr	r3, [pc, #36]	; (400214 <TMOUT_AddTick+0x2c>)
  4001f0:	f103 0128 	add.w	r1, r3, #40	; 0x28
  4001f4:	e002      	b.n	4001fc <TMOUT_AddTick+0x14>
  4001f6:	3304      	adds	r3, #4
    for(i=0; i<TMOUT_NOF_COUNTERS; i++) {
  4001f8:	428b      	cmp	r3, r1
  4001fa:	d005      	beq.n	400208 <TMOUT_AddTick+0x20>
        if (TMOUT_Counters[i]>0) {
  4001fc:	681a      	ldr	r2, [r3, #0]
  4001fe:	2a00      	cmp	r2, #0
  400200:	d0f9      	beq.n	4001f6 <TMOUT_AddTick+0xe>
            TMOUT_Counters[i]--;
  400202:	3a01      	subs	r2, #1
  400204:	601a      	str	r2, [r3, #0]
  400206:	e7f6      	b.n	4001f6 <TMOUT_AddTick+0xe>
        }
    }
    cpu_irq_leave_critical();
  400208:	4b03      	ldr	r3, [pc, #12]	; (400218 <TMOUT_AddTick+0x30>)
  40020a:	4798      	blx	r3
  40020c:	bd08      	pop	{r3, pc}
  40020e:	bf00      	nop
  400210:	00400941 	.word	0x00400941
  400214:	200009dc 	.word	0x200009dc
  400218:	0040097d 	.word	0x0040097d

0040021c <TC0_Handler>:
}

void TC_TMOUT_Handler (void) {
  40021c:	b538      	push	{r3, r4, r5, lr}
    uint32_t ul_status;
    /* Read TC_TMoUT Status. */
    ul_status = tc_get_status(TC_TMOUT, TC_TMOUT_CHN);
  40021e:	2100      	movs	r1, #0
  400220:	480e      	ldr	r0, [pc, #56]	; (40025c <TC0_Handler+0x40>)
  400222:	4b0f      	ldr	r3, [pc, #60]	; (400260 <TC0_Handler+0x44>)
  400224:	4798      	blx	r3
    /* RC compare. */
    if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  400226:	f010 0f10 	tst.w	r0, #16
  40022a:	d100      	bne.n	40022e <TC0_Handler+0x12>
  40022c:	bd38      	pop	{r3, r4, r5, pc}
        TMOUT_AddTick();
  40022e:	4b0d      	ldr	r3, [pc, #52]	; (400264 <TC0_Handler+0x48>)
  400230:	4798      	blx	r3
  400232:	4c0d      	ldr	r4, [pc, #52]	; (400268 <TC0_Handler+0x4c>)
  400234:	f104 0518 	add.w	r5, r4, #24
  400238:	e002      	b.n	400240 <TC0_Handler+0x24>
  40023a:	3408      	adds	r4, #8
    for(int i=0; i<TMOUT_FUNC_COUNT; i++) {
  40023c:	42ac      	cmp	r4, r5
  40023e:	d0f5      	beq.n	40022c <TC0_Handler+0x10>
        if(tmoutItems[i].func != NULL) {
  400240:	6822      	ldr	r2, [r4, #0]
  400242:	2a00      	cmp	r2, #0
  400244:	d0f9      	beq.n	40023a <TC0_Handler+0x1e>
            if(--tmoutItems[i].currentCount == 0) {
  400246:	88e3      	ldrh	r3, [r4, #6]
  400248:	3b01      	subs	r3, #1
  40024a:	b29b      	uxth	r3, r3
  40024c:	80e3      	strh	r3, [r4, #6]
  40024e:	2b00      	cmp	r3, #0
  400250:	d1f3      	bne.n	40023a <TC0_Handler+0x1e>
                tmoutItems[i].currentCount = tmoutItems[i].baseCount;
  400252:	88a3      	ldrh	r3, [r4, #4]
  400254:	80e3      	strh	r3, [r4, #6]
                tmoutItems[i].func();
  400256:	4790      	blx	r2
  400258:	e7ef      	b.n	40023a <TC0_Handler+0x1e>
  40025a:	bf00      	nop
  40025c:	40010000 	.word	0x40010000
  400260:	0040016f 	.word	0x0040016f
  400264:	004001e9 	.word	0x004001e9
  400268:	20000a10 	.word	0x20000a10

0040026c <TMOUT_Init>:
**         Initialization of the driver
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void TMOUT_Init(void) {
  40026c:	b570      	push	{r4, r5, r6, lr}
  40026e:	b084      	sub	sp, #16
  400270:	4b27      	ldr	r3, [pc, #156]	; (400310 <TMOUT_Init+0xa4>)
  400272:	4a28      	ldr	r2, [pc, #160]	; (400314 <TMOUT_Init+0xa8>)
  400274:	f103 0428 	add.w	r4, r3, #40	; 0x28
    uint8_t i;

    for(i=0; i<TMOUT_NOF_COUNTERS; i++) {
        TMOUT_Counters[i] = 0;
  400278:	2000      	movs	r0, #0
        TMOUT_FreeCounters[i] = true;
  40027a:	2101      	movs	r1, #1
        TMOUT_Counters[i] = 0;
  40027c:	f843 0b04 	str.w	r0, [r3], #4
        TMOUT_FreeCounters[i] = true;
  400280:	f802 1b01 	strb.w	r1, [r2], #1
    for(i=0; i<TMOUT_NOF_COUNTERS; i++) {
  400284:	42a3      	cmp	r3, r4
  400286:	d1f9      	bne.n	40027c <TMOUT_Init+0x10>
    cpu_irq_enter_critical();
  400288:	4b23      	ldr	r3, [pc, #140]	; (400318 <TMOUT_Init+0xac>)
  40028a:	4798      	blx	r3
        tmoutItems[i].func = NULL;
  40028c:	4b23      	ldr	r3, [pc, #140]	; (40031c <TMOUT_Init+0xb0>)
  40028e:	2400      	movs	r4, #0
  400290:	601c      	str	r4, [r3, #0]
        tmoutItems[i].baseCount = 0;
  400292:	809c      	strh	r4, [r3, #4]
        tmoutItems[i].currentCount = 0;
  400294:	80dc      	strh	r4, [r3, #6]
        tmoutItems[i].func = NULL;
  400296:	609c      	str	r4, [r3, #8]
        tmoutItems[i].baseCount = 0;
  400298:	819c      	strh	r4, [r3, #12]
        tmoutItems[i].currentCount = 0;
  40029a:	81dc      	strh	r4, [r3, #14]
        tmoutItems[i].func = NULL;
  40029c:	611c      	str	r4, [r3, #16]
        tmoutItems[i].baseCount = 0;
  40029e:	829c      	strh	r4, [r3, #20]
        tmoutItems[i].currentCount = 0;
  4002a0:	82dc      	strh	r4, [r3, #22]
    cpu_irq_leave_critical();
  4002a2:	4b1f      	ldr	r3, [pc, #124]	; (400320 <TMOUT_Init+0xb4>)
  4002a4:	4798      	blx	r3
    pmc_enable_periph_clk(ID_TC_TMOUT);
  4002a6:	2017      	movs	r0, #23
  4002a8:	4b1e      	ldr	r3, [pc, #120]	; (400324 <TMOUT_Init+0xb8>)
  4002aa:	4798      	blx	r3
    tc_find_mck_divisor(ul_frec_hz, ul_sysclk, &ul_div, &ul_tcclks,
  4002ac:	4d1e      	ldr	r5, [pc, #120]	; (400328 <TMOUT_Init+0xbc>)
  4002ae:	9500      	str	r5, [sp, #0]
  4002b0:	ab03      	add	r3, sp, #12
  4002b2:	aa02      	add	r2, sp, #8
  4002b4:	4629      	mov	r1, r5
  4002b6:	2064      	movs	r0, #100	; 0x64
  4002b8:	4e1c      	ldr	r6, [pc, #112]	; (40032c <TMOUT_Init+0xc0>)
  4002ba:	47b0      	blx	r6
    tc_init(TC_TMOUT, TC_TMOUT_CHN, ul_tcclks | TC_CMR_CPCTRG);
  4002bc:	4e1c      	ldr	r6, [pc, #112]	; (400330 <TMOUT_Init+0xc4>)
  4002be:	9a03      	ldr	r2, [sp, #12]
  4002c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4002c4:	4621      	mov	r1, r4
  4002c6:	4630      	mov	r0, r6
  4002c8:	4b1a      	ldr	r3, [pc, #104]	; (400334 <TMOUT_Init+0xc8>)
  4002ca:	4798      	blx	r3
    tc_write_rc(TC_TMOUT, TC_TMOUT_CHN, (ul_sysclk / ul_div) / ul_frec_hz);
  4002cc:	9a02      	ldr	r2, [sp, #8]
  4002ce:	fbb5 f5f2 	udiv	r5, r5, r2
  4002d2:	4a19      	ldr	r2, [pc, #100]	; (400338 <TMOUT_Init+0xcc>)
  4002d4:	fba2 3205 	umull	r3, r2, r2, r5
  4002d8:	0952      	lsrs	r2, r2, #5
  4002da:	4621      	mov	r1, r4
  4002dc:	4630      	mov	r0, r6
  4002de:	4b17      	ldr	r3, [pc, #92]	; (40033c <TMOUT_Init+0xd0>)
  4002e0:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4002e2:	4b17      	ldr	r3, [pc, #92]	; (400340 <TMOUT_Init+0xd4>)
  4002e4:	22a0      	movs	r2, #160	; 0xa0
  4002e6:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4002ee:	601a      	str	r2, [r3, #0]
    tc_enable_interrupt(TC_TMOUT, TC_TMOUT_CHN, TC_IER_CPCS);
  4002f0:	2210      	movs	r2, #16
  4002f2:	4621      	mov	r1, r4
  4002f4:	4630      	mov	r0, r6
  4002f6:	4b13      	ldr	r3, [pc, #76]	; (400344 <TMOUT_Init+0xd8>)
  4002f8:	4798      	blx	r3

    TimeoutFunctionsInit();

    /* Configure TC TMOUT */
    _configure_TC_TMOUT();
    tc_start(TC_TMOUT, TC_TMOUT_CHN);
  4002fa:	4621      	mov	r1, r4
  4002fc:	4630      	mov	r0, r6
  4002fe:	4b12      	ldr	r3, [pc, #72]	; (400348 <TMOUT_Init+0xdc>)
  400300:	4798      	blx	r3
    tc_set_block_mode(TC_TMOUT, 0);
  400302:	4621      	mov	r1, r4
  400304:	4630      	mov	r0, r6
  400306:	4b11      	ldr	r3, [pc, #68]	; (40034c <TMOUT_Init+0xe0>)
  400308:	4798      	blx	r3
}
  40030a:	b004      	add	sp, #16
  40030c:	bd70      	pop	{r4, r5, r6, pc}
  40030e:	bf00      	nop
  400310:	200009dc 	.word	0x200009dc
  400314:	20000a04 	.word	0x20000a04
  400318:	00400941 	.word	0x00400941
  40031c:	20000a10 	.word	0x20000a10
  400320:	0040097d 	.word	0x0040097d
  400324:	00400879 	.word	0x00400879
  400328:	02dc6c00 	.word	0x02dc6c00
  40032c:	00400177 	.word	0x00400177
  400330:	40010000 	.word	0x40010000
  400334:	00400139 	.word	0x00400139
  400338:	51eb851f 	.word	0x51eb851f
  40033c:	0040015f 	.word	0x0040015f
  400340:	e000e100 	.word	0xe000e100
  400344:	00400167 	.word	0x00400167
  400348:	00400157 	.word	0x00400157
  40034c:	00400151 	.word	0x00400151

00400350 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400354:	b980      	cbnz	r0, 400378 <_read+0x28>
  400356:	460c      	mov	r4, r1
  400358:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40035a:	2a00      	cmp	r2, #0
  40035c:	dd0f      	ble.n	40037e <_read+0x2e>
  40035e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400360:	4e08      	ldr	r6, [pc, #32]	; (400384 <_read+0x34>)
  400362:	4d09      	ldr	r5, [pc, #36]	; (400388 <_read+0x38>)
  400364:	6830      	ldr	r0, [r6, #0]
  400366:	4621      	mov	r1, r4
  400368:	682b      	ldr	r3, [r5, #0]
  40036a:	4798      	blx	r3
		ptr++;
  40036c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40036e:	42bc      	cmp	r4, r7
  400370:	d1f8      	bne.n	400364 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400372:	4640      	mov	r0, r8
  400374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400378:	f04f 38ff 	mov.w	r8, #4294967295
  40037c:	e7f9      	b.n	400372 <_read+0x22>
	for (; len > 0; --len) {
  40037e:	4680      	mov	r8, r0
  400380:	e7f7      	b.n	400372 <_read+0x22>
  400382:	bf00      	nop
  400384:	20000b84 	.word	0x20000b84
  400388:	20000b7c 	.word	0x20000b7c

0040038c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40038c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400390:	4681      	mov	r9, r0
  400392:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400394:	4b12      	ldr	r3, [pc, #72]	; (4003e0 <pio_handler_process+0x54>)
  400396:	4798      	blx	r3
  400398:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40039a:	4648      	mov	r0, r9
  40039c:	4b11      	ldr	r3, [pc, #68]	; (4003e4 <pio_handler_process+0x58>)
  40039e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4003a0:	4005      	ands	r5, r0
  4003a2:	d013      	beq.n	4003cc <pio_handler_process+0x40>
  4003a4:	4c10      	ldr	r4, [pc, #64]	; (4003e8 <pio_handler_process+0x5c>)
  4003a6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4003aa:	e003      	b.n	4003b4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4003ac:	42b4      	cmp	r4, r6
  4003ae:	d00d      	beq.n	4003cc <pio_handler_process+0x40>
  4003b0:	3410      	adds	r4, #16
		while (status != 0) {
  4003b2:	b15d      	cbz	r5, 4003cc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4003b4:	6820      	ldr	r0, [r4, #0]
  4003b6:	42b8      	cmp	r0, r7
  4003b8:	d1f8      	bne.n	4003ac <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4003ba:	6861      	ldr	r1, [r4, #4]
  4003bc:	4229      	tst	r1, r5
  4003be:	d0f5      	beq.n	4003ac <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4003c0:	68e3      	ldr	r3, [r4, #12]
  4003c2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4003c4:	6863      	ldr	r3, [r4, #4]
  4003c6:	ea25 0503 	bic.w	r5, r5, r3
  4003ca:	e7ef      	b.n	4003ac <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4003cc:	4b07      	ldr	r3, [pc, #28]	; (4003ec <pio_handler_process+0x60>)
  4003ce:	681b      	ldr	r3, [r3, #0]
  4003d0:	b123      	cbz	r3, 4003dc <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4003d2:	4b07      	ldr	r3, [pc, #28]	; (4003f0 <pio_handler_process+0x64>)
  4003d4:	681b      	ldr	r3, [r3, #0]
  4003d6:	b10b      	cbz	r3, 4003dc <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4003d8:	4648      	mov	r0, r9
  4003da:	4798      	blx	r3
  4003dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4003e0:	00400791 	.word	0x00400791
  4003e4:	00400795 	.word	0x00400795
  4003e8:	20000a28 	.word	0x20000a28
  4003ec:	20000b88 	.word	0x20000b88
  4003f0:	20000a98 	.word	0x20000a98

004003f4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4003f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4003f6:	210b      	movs	r1, #11
  4003f8:	4801      	ldr	r0, [pc, #4]	; (400400 <PIOA_Handler+0xc>)
  4003fa:	4b02      	ldr	r3, [pc, #8]	; (400404 <PIOA_Handler+0x10>)
  4003fc:	4798      	blx	r3
  4003fe:	bd08      	pop	{r3, pc}
  400400:	400e0e00 	.word	0x400e0e00
  400404:	0040038d 	.word	0x0040038d

00400408 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400408:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40040a:	210c      	movs	r1, #12
  40040c:	4801      	ldr	r0, [pc, #4]	; (400414 <PIOB_Handler+0xc>)
  40040e:	4b02      	ldr	r3, [pc, #8]	; (400418 <PIOB_Handler+0x10>)
  400410:	4798      	blx	r3
  400412:	bd08      	pop	{r3, pc}
  400414:	400e1000 	.word	0x400e1000
  400418:	0040038d 	.word	0x0040038d

0040041c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40041c:	6943      	ldr	r3, [r0, #20]
  40041e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400422:	bf1d      	ittte	ne
  400424:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400428:	61c1      	strne	r1, [r0, #28]
	return 0;
  40042a:	2000      	movne	r0, #0
		return 1;
  40042c:	2001      	moveq	r0, #1
}
  40042e:	4770      	bx	lr

00400430 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400430:	6943      	ldr	r3, [r0, #20]
  400432:	f013 0f01 	tst.w	r3, #1
  400436:	d005      	beq.n	400444 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400438:	6983      	ldr	r3, [r0, #24]
  40043a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40043e:	600b      	str	r3, [r1, #0]

	return 0;
  400440:	2000      	movs	r0, #0
  400442:	4770      	bx	lr
		return 1;
  400444:	2001      	movs	r0, #1
}
  400446:	4770      	bx	lr

00400448 <wdt_init>:
 * \param us_counter The value loaded in the 12-bit Watchdog Counter.
 * \param us_delta The permitted range for reloading the Watchdog Timer.
 */
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
		uint16_t us_delta)
{
  400448:	b410      	push	{r4}
	p_wdt->WDT_MR = ul_mode |
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
  40044a:	4c05      	ldr	r4, [pc, #20]	; (400460 <wdt_init+0x18>)
  40044c:	ea04 4303 	and.w	r3, r4, r3, lsl #16
  400450:	f3c2 020b 	ubfx	r2, r2, #0, #12
  400454:	4313      	orrs	r3, r2
  400456:	430b      	orrs	r3, r1
	p_wdt->WDT_MR = ul_mode |
  400458:	6043      	str	r3, [r0, #4]
}
  40045a:	bc10      	pop	{r4}
  40045c:	4770      	bx	lr
  40045e:	bf00      	nop
  400460:	0fff0000 	.word	0x0fff0000

00400464 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
  400464:	b500      	push	{lr}
  400466:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
  400468:	2201      	movs	r2, #1
  40046a:	f10d 0107 	add.w	r1, sp, #7
  40046e:	4810      	ldr	r0, [pc, #64]	; (4004b0 <USART0_Handler+0x4c>)
  400470:	4b10      	ldr	r3, [pc, #64]	; (4004b4 <USART0_Handler+0x50>)
  400472:	4798      	blx	r3
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400474:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400476:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
  40047a:	2200      	movs	r2, #0
  40047c:	4b0e      	ldr	r3, [pc, #56]	; (4004b8 <USART0_Handler+0x54>)
  40047e:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
  400480:	4b0e      	ldr	r3, [pc, #56]	; (4004bc <USART0_Handler+0x58>)
  400482:	781b      	ldrb	r3, [r3, #0]
  400484:	f89d 1007 	ldrb.w	r1, [sp, #7]
  400488:	4a0d      	ldr	r2, [pc, #52]	; (4004c0 <USART0_Handler+0x5c>)
  40048a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
  40048c:	2b9b      	cmp	r3, #155	; 0x9b
  40048e:	d00b      	beq.n	4004a8 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
  400490:	3301      	adds	r3, #1
  400492:	4a0a      	ldr	r2, [pc, #40]	; (4004bc <USART0_Handler+0x58>)
  400494:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
  400496:	2201      	movs	r2, #1
  400498:	4b07      	ldr	r3, [pc, #28]	; (4004b8 <USART0_Handler+0x54>)
  40049a:	701a      	strb	r2, [r3, #0]
  40049c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004a0:	b662      	cpsie	i
}
  4004a2:	b003      	add	sp, #12
  4004a4:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
  4004a8:	2200      	movs	r2, #0
  4004aa:	4b04      	ldr	r3, [pc, #16]	; (4004bc <USART0_Handler+0x58>)
  4004ac:	701a      	strb	r2, [r3, #0]
  4004ae:	e7f2      	b.n	400496 <USART0_Handler+0x32>
  4004b0:	40024000 	.word	0x40024000
  4004b4:	00400515 	.word	0x00400515
  4004b8:	2000000a 	.word	0x2000000a
  4004bc:	20000b38 	.word	0x20000b38
  4004c0:	20000a9c 	.word	0x20000a9c

004004c4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4004c4:	3801      	subs	r0, #1
  4004c6:	2802      	cmp	r0, #2
  4004c8:	d815      	bhi.n	4004f6 <_write+0x32>
{
  4004ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004ce:	460e      	mov	r6, r1
  4004d0:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4004d2:	b19a      	cbz	r2, 4004fc <_write+0x38>
  4004d4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4004d6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400510 <_write+0x4c>
  4004da:	4f0c      	ldr	r7, [pc, #48]	; (40050c <_write+0x48>)
  4004dc:	f8d8 0000 	ldr.w	r0, [r8]
  4004e0:	f815 1b01 	ldrb.w	r1, [r5], #1
  4004e4:	683b      	ldr	r3, [r7, #0]
  4004e6:	4798      	blx	r3
  4004e8:	2800      	cmp	r0, #0
  4004ea:	db0a      	blt.n	400502 <_write+0x3e>
  4004ec:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4004ee:	3c01      	subs	r4, #1
  4004f0:	d1f4      	bne.n	4004dc <_write+0x18>
  4004f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4004f6:	f04f 30ff 	mov.w	r0, #4294967295
  4004fa:	4770      	bx	lr
	for (; len != 0; --len) {
  4004fc:	4610      	mov	r0, r2
  4004fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400502:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40050a:	bf00      	nop
  40050c:	20000b80 	.word	0x20000b80
  400510:	20000b84 	.word	0x20000b84

00400514 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
  400514:	2a00      	cmp	r2, #0
  400516:	d03f      	beq.n	400598 <usart_serial_read_packet+0x84>
{
  400518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40051c:	b083      	sub	sp, #12
  40051e:	4606      	mov	r6, r0
  400520:	460c      	mov	r4, r1
  400522:	4693      	mov	fp, r2
  400524:	448b      	add	fp, r1
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400526:	4f1d      	ldr	r7, [pc, #116]	; (40059c <usart_serial_read_packet+0x88>)
		while (uart_read((Uart*)p_usart, data));
  400528:	4d1d      	ldr	r5, [pc, #116]	; (4005a0 <usart_serial_read_packet+0x8c>)
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40052a:	f8df a080 	ldr.w	sl, [pc, #128]	; 4005ac <usart_serial_read_packet+0x98>
  40052e:	e00d      	b.n	40054c <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
  400530:	4621      	mov	r1, r4
  400532:	4638      	mov	r0, r7
  400534:	47a8      	blx	r5
  400536:	2800      	cmp	r0, #0
  400538:	d1fa      	bne.n	400530 <usart_serial_read_packet+0x1c>
  40053a:	e010      	b.n	40055e <usart_serial_read_packet+0x4a>
		while (uart_read((Uart*)p_usart, data));
  40053c:	4621      	mov	r1, r4
  40053e:	4650      	mov	r0, sl
  400540:	47a8      	blx	r5
  400542:	2800      	cmp	r0, #0
  400544:	d1fa      	bne.n	40053c <usart_serial_read_packet+0x28>
		usart_serial_getchar(usart, data);
		len--;
		data++;
  400546:	3401      	adds	r4, #1
	while (len) {
  400548:	455c      	cmp	r4, fp
  40054a:	d021      	beq.n	400590 <usart_serial_read_packet+0x7c>
	uint32_t val = 0;
  40054c:	2300      	movs	r3, #0
  40054e:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400550:	42be      	cmp	r6, r7
  400552:	d0ed      	beq.n	400530 <usart_serial_read_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  400554:	4556      	cmp	r6, sl
  400556:	d0f1      	beq.n	40053c <usart_serial_read_packet+0x28>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400558:	4b12      	ldr	r3, [pc, #72]	; (4005a4 <usart_serial_read_packet+0x90>)
  40055a:	429e      	cmp	r6, r3
  40055c:	d00d      	beq.n	40057a <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40055e:	4b12      	ldr	r3, [pc, #72]	; (4005a8 <usart_serial_read_packet+0x94>)
  400560:	429e      	cmp	r6, r3
  400562:	d1f0      	bne.n	400546 <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  400564:	4699      	mov	r9, r3
  400566:	f8df 8048 	ldr.w	r8, [pc, #72]	; 4005b0 <usart_serial_read_packet+0x9c>
  40056a:	a901      	add	r1, sp, #4
  40056c:	4648      	mov	r0, r9
  40056e:	47c0      	blx	r8
  400570:	2800      	cmp	r0, #0
  400572:	d1fa      	bne.n	40056a <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
  400574:	9b01      	ldr	r3, [sp, #4]
  400576:	7023      	strb	r3, [r4, #0]
  400578:	e7e5      	b.n	400546 <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  40057a:	4699      	mov	r9, r3
  40057c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 4005b0 <usart_serial_read_packet+0x9c>
  400580:	a901      	add	r1, sp, #4
  400582:	4648      	mov	r0, r9
  400584:	47c0      	blx	r8
  400586:	2800      	cmp	r0, #0
  400588:	d1fa      	bne.n	400580 <usart_serial_read_packet+0x6c>
		*data = (uint8_t)(val & 0xFF);
  40058a:	9b01      	ldr	r3, [sp, #4]
  40058c:	7023      	strb	r3, [r4, #0]
  40058e:	e7da      	b.n	400546 <usart_serial_read_packet+0x32>
	}
	return STATUS_OK;
}
  400590:	2000      	movs	r0, #0
  400592:	b003      	add	sp, #12
  400594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400598:	2000      	movs	r0, #0
  40059a:	4770      	bx	lr
  40059c:	400e0600 	.word	0x400e0600
  4005a0:	00400913 	.word	0x00400913
  4005a4:	40024000 	.word	0x40024000
  4005a8:	40028000 	.word	0x40028000
  4005ac:	400e0800 	.word	0x400e0800
  4005b0:	00400431 	.word	0x00400431

004005b4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4005b4:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4005b6:	480e      	ldr	r0, [pc, #56]	; (4005f0 <sysclk_init+0x3c>)
  4005b8:	4b0e      	ldr	r3, [pc, #56]	; (4005f4 <sysclk_init+0x40>)
  4005ba:	4798      	blx	r3
	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
		break;

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4005bc:	2020      	movs	r0, #32
  4005be:	4b0e      	ldr	r3, [pc, #56]	; (4005f8 <sysclk_init+0x44>)
  4005c0:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4005c2:	4c0e      	ldr	r4, [pc, #56]	; (4005fc <sysclk_init+0x48>)
  4005c4:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4005c6:	2800      	cmp	r0, #0
  4005c8:	d0fc      	beq.n	4005c4 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4005ca:	4b0d      	ldr	r3, [pc, #52]	; (400600 <sysclk_init+0x4c>)
  4005cc:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4005ce:	4a0d      	ldr	r2, [pc, #52]	; (400604 <sysclk_init+0x50>)
  4005d0:	4b0d      	ldr	r3, [pc, #52]	; (400608 <sysclk_init+0x54>)
  4005d2:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4005d4:	4c0d      	ldr	r4, [pc, #52]	; (40060c <sysclk_init+0x58>)
  4005d6:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4005d8:	2800      	cmp	r0, #0
  4005da:	d0fc      	beq.n	4005d6 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4005dc:	2000      	movs	r0, #0
  4005de:	4b0c      	ldr	r3, [pc, #48]	; (400610 <sysclk_init+0x5c>)
  4005e0:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4005e2:	4b0c      	ldr	r3, [pc, #48]	; (400614 <sysclk_init+0x60>)
  4005e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4005e6:	480c      	ldr	r0, [pc, #48]	; (400618 <sysclk_init+0x64>)
  4005e8:	4b02      	ldr	r3, [pc, #8]	; (4005f4 <sysclk_init+0x40>)
  4005ea:	4798      	blx	r3
  4005ec:	bd10      	pop	{r4, pc}
  4005ee:	bf00      	nop
  4005f0:	07270e00 	.word	0x07270e00
  4005f4:	00400b79 	.word	0x00400b79
  4005f8:	004007fd 	.word	0x004007fd
  4005fc:	00400849 	.word	0x00400849
  400600:	00400859 	.word	0x00400859
  400604:	20133f05 	.word	0x20133f05
  400608:	400e0400 	.word	0x400e0400
  40060c:	00400869 	.word	0x00400869
  400610:	00400799 	.word	0x00400799
  400614:	00400a69 	.word	0x00400a69
  400618:	02dc6c00 	.word	0x02dc6c00

0040061c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40061c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40061e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400622:	d039      	beq.n	400698 <pio_set_peripheral+0x7c>
  400624:	d813      	bhi.n	40064e <pio_set_peripheral+0x32>
  400626:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40062a:	d025      	beq.n	400678 <pio_set_peripheral+0x5c>
  40062c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400630:	d10a      	bne.n	400648 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400632:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400634:	4313      	orrs	r3, r2
  400636:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400638:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40063a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40063c:	400b      	ands	r3, r1
  40063e:	ea23 0302 	bic.w	r3, r3, r2
  400642:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400644:	6042      	str	r2, [r0, #4]
  400646:	4770      	bx	lr
	switch (ul_type) {
  400648:	2900      	cmp	r1, #0
  40064a:	d1fb      	bne.n	400644 <pio_set_peripheral+0x28>
  40064c:	4770      	bx	lr
  40064e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400652:	d020      	beq.n	400696 <pio_set_peripheral+0x7a>
  400654:	d809      	bhi.n	40066a <pio_set_peripheral+0x4e>
  400656:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40065a:	d1f3      	bne.n	400644 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40065c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40065e:	4313      	orrs	r3, r2
  400660:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400662:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400664:	4313      	orrs	r3, r2
  400666:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400668:	e7ec      	b.n	400644 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40066a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40066e:	d012      	beq.n	400696 <pio_set_peripheral+0x7a>
  400670:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400674:	d00f      	beq.n	400696 <pio_set_peripheral+0x7a>
  400676:	e7e5      	b.n	400644 <pio_set_peripheral+0x28>
{
  400678:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40067a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40067c:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40067e:	43d3      	mvns	r3, r2
  400680:	4021      	ands	r1, r4
  400682:	461c      	mov	r4, r3
  400684:	4019      	ands	r1, r3
  400686:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400688:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40068a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40068c:	400b      	ands	r3, r1
  40068e:	4023      	ands	r3, r4
  400690:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400692:	6042      	str	r2, [r0, #4]
}
  400694:	bc10      	pop	{r4}
  400696:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400698:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40069a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40069c:	400b      	ands	r3, r1
  40069e:	ea23 0302 	bic.w	r3, r3, r2
  4006a2:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4006a4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4006a6:	4313      	orrs	r3, r2
  4006a8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4006aa:	e7cb      	b.n	400644 <pio_set_peripheral+0x28>

004006ac <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4006ac:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4006ae:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4006b2:	bf14      	ite	ne
  4006b4:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4006b6:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4006b8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4006bc:	bf14      	ite	ne
  4006be:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  4006c0:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  4006c2:	f012 0f02 	tst.w	r2, #2
  4006c6:	d107      	bne.n	4006d8 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4006c8:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4006cc:	bf18      	it	ne
  4006ce:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  4006d2:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4006d4:	6001      	str	r1, [r0, #0]
  4006d6:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  4006d8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4006dc:	e7f9      	b.n	4006d2 <pio_set_input+0x26>

004006de <pio_set_output>:
{
  4006de:	b410      	push	{r4}
  4006e0:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4006e2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4006e4:	b944      	cbnz	r4, 4006f8 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  4006e6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4006e8:	b143      	cbz	r3, 4006fc <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  4006ea:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4006ec:	b942      	cbnz	r2, 400700 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  4006ee:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4006f0:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4006f2:	6001      	str	r1, [r0, #0]
}
  4006f4:	bc10      	pop	{r4}
  4006f6:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4006f8:	6641      	str	r1, [r0, #100]	; 0x64
  4006fa:	e7f5      	b.n	4006e8 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4006fc:	6541      	str	r1, [r0, #84]	; 0x54
  4006fe:	e7f5      	b.n	4006ec <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400700:	6301      	str	r1, [r0, #48]	; 0x30
  400702:	e7f5      	b.n	4006f0 <pio_set_output+0x12>

00400704 <pio_configure>:
{
  400704:	b570      	push	{r4, r5, r6, lr}
  400706:	b082      	sub	sp, #8
  400708:	4605      	mov	r5, r0
  40070a:	4616      	mov	r6, r2
  40070c:	461c      	mov	r4, r3
	switch (ul_type) {
  40070e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400712:	d014      	beq.n	40073e <pio_configure+0x3a>
  400714:	d90a      	bls.n	40072c <pio_configure+0x28>
  400716:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40071a:	d022      	beq.n	400762 <pio_configure+0x5e>
  40071c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400720:	d01f      	beq.n	400762 <pio_configure+0x5e>
  400722:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400726:	d016      	beq.n	400756 <pio_configure+0x52>
		return 0;
  400728:	2000      	movs	r0, #0
  40072a:	e012      	b.n	400752 <pio_configure+0x4e>
	switch (ul_type) {
  40072c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400730:	d005      	beq.n	40073e <pio_configure+0x3a>
  400732:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400736:	d002      	beq.n	40073e <pio_configure+0x3a>
  400738:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40073c:	d1f4      	bne.n	400728 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40073e:	4632      	mov	r2, r6
  400740:	4628      	mov	r0, r5
  400742:	4b10      	ldr	r3, [pc, #64]	; (400784 <pio_configure+0x80>)
  400744:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400746:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40074a:	bf14      	ite	ne
  40074c:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40074e:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400750:	2001      	movs	r0, #1
}
  400752:	b002      	add	sp, #8
  400754:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400756:	461a      	mov	r2, r3
  400758:	4631      	mov	r1, r6
  40075a:	4b0b      	ldr	r3, [pc, #44]	; (400788 <pio_configure+0x84>)
  40075c:	4798      	blx	r3
	return 1;
  40075e:	2001      	movs	r0, #1
		break;
  400760:	e7f7      	b.n	400752 <pio_configure+0x4e>
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400762:	f004 0301 	and.w	r3, r4, #1
  400766:	9300      	str	r3, [sp, #0]
  400768:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40076c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400770:	bf14      	ite	ne
  400772:	2200      	movne	r2, #0
  400774:	2201      	moveq	r2, #1
  400776:	4631      	mov	r1, r6
  400778:	4628      	mov	r0, r5
  40077a:	4c04      	ldr	r4, [pc, #16]	; (40078c <pio_configure+0x88>)
  40077c:	47a0      	blx	r4
	return 1;
  40077e:	2001      	movs	r0, #1
		break;
  400780:	e7e7      	b.n	400752 <pio_configure+0x4e>
  400782:	bf00      	nop
  400784:	0040061d 	.word	0x0040061d
  400788:	004006ad 	.word	0x004006ad
  40078c:	004006df 	.word	0x004006df

00400790 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400790:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400792:	4770      	bx	lr

00400794 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400794:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400796:	4770      	bx	lr

00400798 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400798:	4a17      	ldr	r2, [pc, #92]	; (4007f8 <pmc_switch_mck_to_pllack+0x60>)
  40079a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40079c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4007a0:	4318      	orrs	r0, r3
  4007a2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007a6:	f013 0f08 	tst.w	r3, #8
  4007aa:	d10a      	bne.n	4007c2 <pmc_switch_mck_to_pllack+0x2a>
  4007ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007b0:	4911      	ldr	r1, [pc, #68]	; (4007f8 <pmc_switch_mck_to_pllack+0x60>)
  4007b2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007b4:	f012 0f08 	tst.w	r2, #8
  4007b8:	d103      	bne.n	4007c2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007ba:	3b01      	subs	r3, #1
  4007bc:	d1f9      	bne.n	4007b2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4007be:	2001      	movs	r0, #1
  4007c0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4007c2:	4a0d      	ldr	r2, [pc, #52]	; (4007f8 <pmc_switch_mck_to_pllack+0x60>)
  4007c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007c6:	f023 0303 	bic.w	r3, r3, #3
  4007ca:	f043 0302 	orr.w	r3, r3, #2
  4007ce:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007d2:	f013 0f08 	tst.w	r3, #8
  4007d6:	d10a      	bne.n	4007ee <pmc_switch_mck_to_pllack+0x56>
  4007d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007dc:	4906      	ldr	r1, [pc, #24]	; (4007f8 <pmc_switch_mck_to_pllack+0x60>)
  4007de:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007e0:	f012 0f08 	tst.w	r2, #8
  4007e4:	d105      	bne.n	4007f2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007e6:	3b01      	subs	r3, #1
  4007e8:	d1f9      	bne.n	4007de <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4007ea:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4007ec:	4770      	bx	lr
	return 0;
  4007ee:	2000      	movs	r0, #0
  4007f0:	4770      	bx	lr
  4007f2:	2000      	movs	r0, #0
  4007f4:	4770      	bx	lr
  4007f6:	bf00      	nop
  4007f8:	400e0400 	.word	0x400e0400

004007fc <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4007fc:	4911      	ldr	r1, [pc, #68]	; (400844 <pmc_switch_mainck_to_fastrc+0x48>)
  4007fe:	6a0a      	ldr	r2, [r1, #32]
  400800:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  400804:	f042 0208 	orr.w	r2, r2, #8
  400808:	620a      	str	r2, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40080a:	460a      	mov	r2, r1
  40080c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40080e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  400812:	d0fb      	beq.n	40080c <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400814:	4a0b      	ldr	r2, [pc, #44]	; (400844 <pmc_switch_mainck_to_fastrc+0x48>)
  400816:	6a13      	ldr	r3, [r2, #32]
  400818:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40081c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400820:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400824:	4318      	orrs	r0, r3
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400826:	6210      	str	r0, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400828:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40082a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40082e:	d0fb      	beq.n	400828 <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400830:	4a04      	ldr	r2, [pc, #16]	; (400844 <pmc_switch_mainck_to_fastrc+0x48>)
  400832:	6a13      	ldr	r3, [r2, #32]
  400834:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  400838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40083c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400840:	6213      	str	r3, [r2, #32]
  400842:	4770      	bx	lr
  400844:	400e0400 	.word	0x400e0400

00400848 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400848:	4b02      	ldr	r3, [pc, #8]	; (400854 <pmc_osc_is_ready_mainck+0xc>)
  40084a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40084c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400850:	4770      	bx	lr
  400852:	bf00      	nop
  400854:	400e0400 	.word	0x400e0400

00400858 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400858:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40085c:	4b01      	ldr	r3, [pc, #4]	; (400864 <pmc_disable_pllack+0xc>)
  40085e:	629a      	str	r2, [r3, #40]	; 0x28
  400860:	4770      	bx	lr
  400862:	bf00      	nop
  400864:	400e0400 	.word	0x400e0400

00400868 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400868:	4b02      	ldr	r3, [pc, #8]	; (400874 <pmc_is_locked_pllack+0xc>)
  40086a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40086c:	f000 0002 	and.w	r0, r0, #2
  400870:	4770      	bx	lr
  400872:	bf00      	nop
  400874:	400e0400 	.word	0x400e0400

00400878 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400878:	2822      	cmp	r0, #34	; 0x22
  40087a:	d81e      	bhi.n	4008ba <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40087c:	281f      	cmp	r0, #31
  40087e:	d80c      	bhi.n	40089a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400880:	4b11      	ldr	r3, [pc, #68]	; (4008c8 <pmc_enable_periph_clk+0x50>)
  400882:	699a      	ldr	r2, [r3, #24]
  400884:	2301      	movs	r3, #1
  400886:	4083      	lsls	r3, r0
  400888:	4393      	bics	r3, r2
  40088a:	d018      	beq.n	4008be <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40088c:	2301      	movs	r3, #1
  40088e:	fa03 f000 	lsl.w	r0, r3, r0
  400892:	4b0d      	ldr	r3, [pc, #52]	; (4008c8 <pmc_enable_periph_clk+0x50>)
  400894:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400896:	2000      	movs	r0, #0
  400898:	4770      	bx	lr
		ul_id -= 32;
  40089a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40089c:	4b0a      	ldr	r3, [pc, #40]	; (4008c8 <pmc_enable_periph_clk+0x50>)
  40089e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4008a2:	2301      	movs	r3, #1
  4008a4:	4083      	lsls	r3, r0
  4008a6:	4393      	bics	r3, r2
  4008a8:	d00b      	beq.n	4008c2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4008aa:	2301      	movs	r3, #1
  4008ac:	fa03 f000 	lsl.w	r0, r3, r0
  4008b0:	4b05      	ldr	r3, [pc, #20]	; (4008c8 <pmc_enable_periph_clk+0x50>)
  4008b2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4008b6:	2000      	movs	r0, #0
  4008b8:	4770      	bx	lr
		return 1;
  4008ba:	2001      	movs	r0, #1
  4008bc:	4770      	bx	lr
	return 0;
  4008be:	2000      	movs	r0, #0
  4008c0:	4770      	bx	lr
  4008c2:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4008c4:	4770      	bx	lr
  4008c6:	bf00      	nop
  4008c8:	400e0400 	.word	0x400e0400

004008cc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4008cc:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4008ce:	23ac      	movs	r3, #172	; 0xac
  4008d0:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4008d2:	680b      	ldr	r3, [r1, #0]
  4008d4:	684a      	ldr	r2, [r1, #4]
  4008d6:	fbb3 f3f2 	udiv	r3, r3, r2
  4008da:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4008dc:	1e5c      	subs	r4, r3, #1
  4008de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4008e2:	4294      	cmp	r4, r2
  4008e4:	d80b      	bhi.n	4008fe <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  4008e6:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4008e8:	688b      	ldr	r3, [r1, #8]
  4008ea:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4008ec:	f240 2302 	movw	r3, #514	; 0x202
  4008f0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4008f4:	2350      	movs	r3, #80	; 0x50
  4008f6:	6003      	str	r3, [r0, #0]

	return 0;
  4008f8:	2000      	movs	r0, #0
}
  4008fa:	bc10      	pop	{r4}
  4008fc:	4770      	bx	lr
		return 1;
  4008fe:	2001      	movs	r0, #1
  400900:	e7fb      	b.n	4008fa <uart_init+0x2e>

00400902 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400902:	6943      	ldr	r3, [r0, #20]
  400904:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400908:	bf1a      	itte	ne
  40090a:	61c1      	strne	r1, [r0, #28]
	return 0;
  40090c:	2000      	movne	r0, #0
		return 1;
  40090e:	2001      	moveq	r0, #1
}
  400910:	4770      	bx	lr

00400912 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400912:	6943      	ldr	r3, [r0, #20]
  400914:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400918:	bf1d      	ittte	ne
  40091a:	6983      	ldrne	r3, [r0, #24]
  40091c:	700b      	strbne	r3, [r1, #0]
	return 0;
  40091e:	2000      	movne	r0, #0
		return 1;
  400920:	2001      	moveq	r0, #1
}
  400922:	4770      	bx	lr

00400924 <board_init>:
#define PINS_UART0_PIO      PIOA
#define PINS_UART0_TYPE     PIO_PERIPH_A
#define PINS_UART0_ATTR     PIO_DEFAULT

void board_init(void)
{
  400924:	b510      	push	{r4, lr}
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	pio_configure(PINS_UART0_PIO, PINS_UART0_TYPE, PINS_UART0_MASK, PINS_UART0_ATTR);
  400926:	2300      	movs	r3, #0
  400928:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40092c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400930:	4801      	ldr	r0, [pc, #4]	; (400938 <board_init+0x14>)
  400932:	4c02      	ldr	r4, [pc, #8]	; (40093c <board_init+0x18>)
  400934:	47a0      	blx	r4
  400936:	bd10      	pop	{r4, pc}
  400938:	400e0e00 	.word	0x400e0e00
  40093c:	00400705 	.word	0x00400705

00400940 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
  400940:	4b0b      	ldr	r3, [pc, #44]	; (400970 <cpu_irq_enter_critical+0x30>)
  400942:	681b      	ldr	r3, [r3, #0]
  400944:	b92b      	cbnz	r3, 400952 <cpu_irq_enter_critical+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400946:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
  40094a:	b13b      	cbz	r3, 40095c <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
  40094c:	2200      	movs	r2, #0
  40094e:	4b09      	ldr	r3, [pc, #36]	; (400974 <cpu_irq_enter_critical+0x34>)
  400950:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
  400952:	4a07      	ldr	r2, [pc, #28]	; (400970 <cpu_irq_enter_critical+0x30>)
  400954:	6813      	ldr	r3, [r2, #0]
  400956:	3301      	adds	r3, #1
  400958:	6013      	str	r3, [r2, #0]
  40095a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
  40095c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40095e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
  400962:	2200      	movs	r2, #0
  400964:	4b04      	ldr	r3, [pc, #16]	; (400978 <cpu_irq_enter_critical+0x38>)
  400966:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
  400968:	2201      	movs	r2, #1
  40096a:	4b02      	ldr	r3, [pc, #8]	; (400974 <cpu_irq_enter_critical+0x34>)
  40096c:	701a      	strb	r2, [r3, #0]
  40096e:	e7f0      	b.n	400952 <cpu_irq_enter_critical+0x12>
  400970:	20000b3c 	.word	0x20000b3c
  400974:	20000b40 	.word	0x20000b40
  400978:	2000000a 	.word	0x2000000a

0040097c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
  40097c:	4b07      	ldr	r3, [pc, #28]	; (40099c <cpu_irq_leave_critical+0x20>)
  40097e:	681a      	ldr	r2, [r3, #0]
  400980:	3a01      	subs	r2, #1
  400982:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
  400984:	681b      	ldr	r3, [r3, #0]
  400986:	b943      	cbnz	r3, 40099a <cpu_irq_leave_critical+0x1e>
  400988:	4b05      	ldr	r3, [pc, #20]	; (4009a0 <cpu_irq_leave_critical+0x24>)
  40098a:	781b      	ldrb	r3, [r3, #0]
  40098c:	b12b      	cbz	r3, 40099a <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
  40098e:	2201      	movs	r2, #1
  400990:	4b04      	ldr	r3, [pc, #16]	; (4009a4 <cpu_irq_leave_critical+0x28>)
  400992:	701a      	strb	r2, [r3, #0]
  400994:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400998:	b662      	cpsie	i
  40099a:	4770      	bx	lr
  40099c:	20000b3c 	.word	0x20000b3c
  4009a0:	20000b40 	.word	0x20000b40
  4009a4:	2000000a 	.word	0x2000000a

004009a8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4009a8:	e7fe      	b.n	4009a8 <Dummy_Handler>
	...

004009ac <Reset_Handler>:
{
  4009ac:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  4009ae:	4b21      	ldr	r3, [pc, #132]	; (400a34 <Reset_Handler+0x88>)
  4009b0:	4a21      	ldr	r2, [pc, #132]	; (400a38 <Reset_Handler+0x8c>)
  4009b2:	429a      	cmp	r2, r3
  4009b4:	d928      	bls.n	400a08 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  4009b6:	4b21      	ldr	r3, [pc, #132]	; (400a3c <Reset_Handler+0x90>)
  4009b8:	4a1e      	ldr	r2, [pc, #120]	; (400a34 <Reset_Handler+0x88>)
  4009ba:	429a      	cmp	r2, r3
  4009bc:	d20c      	bcs.n	4009d8 <Reset_Handler+0x2c>
  4009be:	3b01      	subs	r3, #1
  4009c0:	1a9b      	subs	r3, r3, r2
  4009c2:	f023 0303 	bic.w	r3, r3, #3
  4009c6:	3304      	adds	r3, #4
  4009c8:	4413      	add	r3, r2
  4009ca:	491b      	ldr	r1, [pc, #108]	; (400a38 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  4009cc:	f851 0b04 	ldr.w	r0, [r1], #4
  4009d0:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4009d4:	429a      	cmp	r2, r3
  4009d6:	d1f9      	bne.n	4009cc <Reset_Handler+0x20>
	__NOP();
  4009d8:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  4009da:	4b19      	ldr	r3, [pc, #100]	; (400a40 <Reset_Handler+0x94>)
  4009dc:	4a19      	ldr	r2, [pc, #100]	; (400a44 <Reset_Handler+0x98>)
  4009de:	429a      	cmp	r2, r3
  4009e0:	d20a      	bcs.n	4009f8 <Reset_Handler+0x4c>
  4009e2:	3b01      	subs	r3, #1
  4009e4:	1a9b      	subs	r3, r3, r2
  4009e6:	f023 0303 	bic.w	r3, r3, #3
  4009ea:	3304      	adds	r3, #4
  4009ec:	4413      	add	r3, r2
		*pDest++ = 0;
  4009ee:	2100      	movs	r1, #0
  4009f0:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4009f4:	429a      	cmp	r2, r3
  4009f6:	d1fb      	bne.n	4009f0 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  4009f8:	4b13      	ldr	r3, [pc, #76]	; (400a48 <Reset_Handler+0x9c>)
  4009fa:	4a14      	ldr	r2, [pc, #80]	; (400a4c <Reset_Handler+0xa0>)
  4009fc:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  4009fe:	4b14      	ldr	r3, [pc, #80]	; (400a50 <Reset_Handler+0xa4>)
  400a00:	4798      	blx	r3
	main();
  400a02:	4b14      	ldr	r3, [pc, #80]	; (400a54 <Reset_Handler+0xa8>)
  400a04:	4798      	blx	r3
  400a06:	e7fe      	b.n	400a06 <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  400a08:	4b0a      	ldr	r3, [pc, #40]	; (400a34 <Reset_Handler+0x88>)
  400a0a:	4a0b      	ldr	r2, [pc, #44]	; (400a38 <Reset_Handler+0x8c>)
  400a0c:	429a      	cmp	r2, r3
  400a0e:	d2e3      	bcs.n	4009d8 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400a10:	4b0a      	ldr	r3, [pc, #40]	; (400a3c <Reset_Handler+0x90>)
  400a12:	4808      	ldr	r0, [pc, #32]	; (400a34 <Reset_Handler+0x88>)
  400a14:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400a16:	4611      	mov	r1, r2
  400a18:	3a04      	subs	r2, #4
  400a1a:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  400a1c:	2800      	cmp	r0, #0
  400a1e:	d0db      	beq.n	4009d8 <Reset_Handler+0x2c>
  400a20:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  400a24:	f852 0904 	ldr.w	r0, [r2], #-4
  400a28:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  400a2c:	42ca      	cmn	r2, r1
  400a2e:	d1f9      	bne.n	400a24 <Reset_Handler+0x78>
  400a30:	e7d2      	b.n	4009d8 <Reset_Handler+0x2c>
  400a32:	bf00      	nop
  400a34:	20000000 	.word	0x20000000
  400a38:	00403f30 	.word	0x00403f30
  400a3c:	200009c0 	.word	0x200009c0
  400a40:	20000bb4 	.word	0x20000bb4
  400a44:	200009c0 	.word	0x200009c0
  400a48:	e000ed00 	.word	0xe000ed00
  400a4c:	00400000 	.word	0x00400000
  400a50:	00400e19 	.word	0x00400e19
  400a54:	00400d45 	.word	0x00400d45

00400a58 <SystemInit>:
	 * For SAM4S, the internal 4MHz fast RC oscillator is the default clock
	 * selected at system reset state.
	 */

	/* Set FWS according to default clock configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a58:	4a01      	ldr	r2, [pc, #4]	; (400a60 <SystemInit+0x8>)
  400a5a:	4b02      	ldr	r3, [pc, #8]	; (400a64 <SystemInit+0xc>)
  400a5c:	601a      	str	r2, [r3, #0]
  400a5e:	4770      	bx	lr
  400a60:	04000100 	.word	0x04000100
  400a64:	400e0a00 	.word	0x400e0a00

00400a68 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400a68:	4b3c      	ldr	r3, [pc, #240]	; (400b5c <SystemCoreClockUpdate+0xf4>)
  400a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a6c:	f003 0303 	and.w	r3, r3, #3
  400a70:	2b03      	cmp	r3, #3
  400a72:	d80e      	bhi.n	400a92 <SystemCoreClockUpdate+0x2a>
  400a74:	e8df f003 	tbb	[pc, r3]
  400a78:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400a7c:	4b38      	ldr	r3, [pc, #224]	; (400b60 <SystemCoreClockUpdate+0xf8>)
  400a7e:	695b      	ldr	r3, [r3, #20]
  400a80:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400a84:	bf14      	ite	ne
  400a86:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400a8a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400a8e:	4b35      	ldr	r3, [pc, #212]	; (400b64 <SystemCoreClockUpdate+0xfc>)
  400a90:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400a92:	4b32      	ldr	r3, [pc, #200]	; (400b5c <SystemCoreClockUpdate+0xf4>)
  400a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a96:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a9a:	2b70      	cmp	r3, #112	; 0x70
  400a9c:	d055      	beq.n	400b4a <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a9e:	4b2f      	ldr	r3, [pc, #188]	; (400b5c <SystemCoreClockUpdate+0xf4>)
  400aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  400aa2:	4930      	ldr	r1, [pc, #192]	; (400b64 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400aa4:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  400aa8:	680b      	ldr	r3, [r1, #0]
  400aaa:	40d3      	lsrs	r3, r2
  400aac:	600b      	str	r3, [r1, #0]
  400aae:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400ab0:	4b2a      	ldr	r3, [pc, #168]	; (400b5c <SystemCoreClockUpdate+0xf4>)
  400ab2:	6a1b      	ldr	r3, [r3, #32]
  400ab4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ab8:	d003      	beq.n	400ac2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400aba:	4a2b      	ldr	r2, [pc, #172]	; (400b68 <SystemCoreClockUpdate+0x100>)
  400abc:	4b29      	ldr	r3, [pc, #164]	; (400b64 <SystemCoreClockUpdate+0xfc>)
  400abe:	601a      	str	r2, [r3, #0]
  400ac0:	e7e7      	b.n	400a92 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400ac2:	4a2a      	ldr	r2, [pc, #168]	; (400b6c <SystemCoreClockUpdate+0x104>)
  400ac4:	4b27      	ldr	r3, [pc, #156]	; (400b64 <SystemCoreClockUpdate+0xfc>)
  400ac6:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400ac8:	4b24      	ldr	r3, [pc, #144]	; (400b5c <SystemCoreClockUpdate+0xf4>)
  400aca:	6a1b      	ldr	r3, [r3, #32]
  400acc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ad0:	2b10      	cmp	r3, #16
  400ad2:	d005      	beq.n	400ae0 <SystemCoreClockUpdate+0x78>
  400ad4:	2b20      	cmp	r3, #32
  400ad6:	d1dc      	bne.n	400a92 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400ad8:	4a23      	ldr	r2, [pc, #140]	; (400b68 <SystemCoreClockUpdate+0x100>)
  400ada:	4b22      	ldr	r3, [pc, #136]	; (400b64 <SystemCoreClockUpdate+0xfc>)
  400adc:	601a      	str	r2, [r3, #0]
			break;
  400ade:	e7d8      	b.n	400a92 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400ae0:	4a23      	ldr	r2, [pc, #140]	; (400b70 <SystemCoreClockUpdate+0x108>)
  400ae2:	4b20      	ldr	r3, [pc, #128]	; (400b64 <SystemCoreClockUpdate+0xfc>)
  400ae4:	601a      	str	r2, [r3, #0]
			break;
  400ae6:	e7d4      	b.n	400a92 <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400ae8:	4b1c      	ldr	r3, [pc, #112]	; (400b5c <SystemCoreClockUpdate+0xf4>)
  400aea:	6a1b      	ldr	r3, [r3, #32]
  400aec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400af0:	d018      	beq.n	400b24 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400af2:	4a1d      	ldr	r2, [pc, #116]	; (400b68 <SystemCoreClockUpdate+0x100>)
  400af4:	4b1b      	ldr	r3, [pc, #108]	; (400b64 <SystemCoreClockUpdate+0xfc>)
  400af6:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400af8:	4b18      	ldr	r3, [pc, #96]	; (400b5c <SystemCoreClockUpdate+0xf4>)
  400afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400afc:	f003 0303 	and.w	r3, r3, #3
  400b00:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400b02:	4a16      	ldr	r2, [pc, #88]	; (400b5c <SystemCoreClockUpdate+0xf4>)
  400b04:	bf07      	ittee	eq
  400b06:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400b08:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400b0a:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400b0c:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400b0e:	4815      	ldr	r0, [pc, #84]	; (400b64 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400b10:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400b14:	6803      	ldr	r3, [r0, #0]
  400b16:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  400b1a:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400b1c:	fbb3 f3f2 	udiv	r3, r3, r2
  400b20:	6003      	str	r3, [r0, #0]
  400b22:	e7b6      	b.n	400a92 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b24:	4a11      	ldr	r2, [pc, #68]	; (400b6c <SystemCoreClockUpdate+0x104>)
  400b26:	4b0f      	ldr	r3, [pc, #60]	; (400b64 <SystemCoreClockUpdate+0xfc>)
  400b28:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400b2a:	4b0c      	ldr	r3, [pc, #48]	; (400b5c <SystemCoreClockUpdate+0xf4>)
  400b2c:	6a1b      	ldr	r3, [r3, #32]
  400b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b32:	2b10      	cmp	r3, #16
  400b34:	d005      	beq.n	400b42 <SystemCoreClockUpdate+0xda>
  400b36:	2b20      	cmp	r3, #32
  400b38:	d1de      	bne.n	400af8 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400b3a:	4a0b      	ldr	r2, [pc, #44]	; (400b68 <SystemCoreClockUpdate+0x100>)
  400b3c:	4b09      	ldr	r3, [pc, #36]	; (400b64 <SystemCoreClockUpdate+0xfc>)
  400b3e:	601a      	str	r2, [r3, #0]
					break;
  400b40:	e7da      	b.n	400af8 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400b42:	4a0b      	ldr	r2, [pc, #44]	; (400b70 <SystemCoreClockUpdate+0x108>)
  400b44:	4b07      	ldr	r3, [pc, #28]	; (400b64 <SystemCoreClockUpdate+0xfc>)
  400b46:	601a      	str	r2, [r3, #0]
					break;
  400b48:	e7d6      	b.n	400af8 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400b4a:	4a06      	ldr	r2, [pc, #24]	; (400b64 <SystemCoreClockUpdate+0xfc>)
  400b4c:	6813      	ldr	r3, [r2, #0]
  400b4e:	4909      	ldr	r1, [pc, #36]	; (400b74 <SystemCoreClockUpdate+0x10c>)
  400b50:	fba1 1303 	umull	r1, r3, r1, r3
  400b54:	085b      	lsrs	r3, r3, #1
  400b56:	6013      	str	r3, [r2, #0]
  400b58:	4770      	bx	lr
  400b5a:	bf00      	nop
  400b5c:	400e0400 	.word	0x400e0400
  400b60:	400e1410 	.word	0x400e1410
  400b64:	2000000c 	.word	0x2000000c
  400b68:	00b71b00 	.word	0x00b71b00
  400b6c:	003d0900 	.word	0x003d0900
  400b70:	007a1200 	.word	0x007a1200
  400b74:	aaaaaaab 	.word	0xaaaaaaab

00400b78 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400b78:	4b12      	ldr	r3, [pc, #72]	; (400bc4 <system_init_flash+0x4c>)
  400b7a:	4298      	cmp	r0, r3
  400b7c:	d911      	bls.n	400ba2 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400b7e:	4b12      	ldr	r3, [pc, #72]	; (400bc8 <system_init_flash+0x50>)
  400b80:	4298      	cmp	r0, r3
  400b82:	d913      	bls.n	400bac <system_init_flash+0x34>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400b84:	4b11      	ldr	r3, [pc, #68]	; (400bcc <system_init_flash+0x54>)
  400b86:	4298      	cmp	r0, r3
  400b88:	d914      	bls.n	400bb4 <system_init_flash+0x3c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400b8a:	4b11      	ldr	r3, [pc, #68]	; (400bd0 <system_init_flash+0x58>)
  400b8c:	4298      	cmp	r0, r3
  400b8e:	d915      	bls.n	400bbc <system_init_flash+0x44>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400b90:	4b10      	ldr	r3, [pc, #64]	; (400bd4 <system_init_flash+0x5c>)
  400b92:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400b94:	bf94      	ite	ls
  400b96:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b9a:	4a0f      	ldrhi	r2, [pc, #60]	; (400bd8 <system_init_flash+0x60>)
  400b9c:	4b0f      	ldr	r3, [pc, #60]	; (400bdc <system_init_flash+0x64>)
  400b9e:	601a      	str	r2, [r3, #0]
  400ba0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400ba2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400ba6:	4b0d      	ldr	r3, [pc, #52]	; (400bdc <system_init_flash+0x64>)
  400ba8:	601a      	str	r2, [r3, #0]
  400baa:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400bac:	4a0c      	ldr	r2, [pc, #48]	; (400be0 <system_init_flash+0x68>)
  400bae:	4b0b      	ldr	r3, [pc, #44]	; (400bdc <system_init_flash+0x64>)
  400bb0:	601a      	str	r2, [r3, #0]
  400bb2:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400bb4:	4a0b      	ldr	r2, [pc, #44]	; (400be4 <system_init_flash+0x6c>)
  400bb6:	4b09      	ldr	r3, [pc, #36]	; (400bdc <system_init_flash+0x64>)
  400bb8:	601a      	str	r2, [r3, #0]
  400bba:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400bbc:	4a0a      	ldr	r2, [pc, #40]	; (400be8 <system_init_flash+0x70>)
  400bbe:	4b07      	ldr	r3, [pc, #28]	; (400bdc <system_init_flash+0x64>)
  400bc0:	601a      	str	r2, [r3, #0]
  400bc2:	4770      	bx	lr
  400bc4:	01312cff 	.word	0x01312cff
  400bc8:	026259ff 	.word	0x026259ff
  400bcc:	039386ff 	.word	0x039386ff
  400bd0:	04c4b3ff 	.word	0x04c4b3ff
  400bd4:	05f5e0ff 	.word	0x05f5e0ff
  400bd8:	04000500 	.word	0x04000500
  400bdc:	400e0a00 	.word	0x400e0a00
  400be0:	04000100 	.word	0x04000100
  400be4:	04000200 	.word	0x04000200
  400be8:	04000300 	.word	0x04000300

00400bec <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400bec:	4b0a      	ldr	r3, [pc, #40]	; (400c18 <_sbrk+0x2c>)
  400bee:	681b      	ldr	r3, [r3, #0]
  400bf0:	b153      	cbz	r3, 400c08 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400bf2:	4b09      	ldr	r3, [pc, #36]	; (400c18 <_sbrk+0x2c>)
  400bf4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400bf6:	181a      	adds	r2, r3, r0
  400bf8:	4908      	ldr	r1, [pc, #32]	; (400c1c <_sbrk+0x30>)
  400bfa:	4291      	cmp	r1, r2
  400bfc:	db08      	blt.n	400c10 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400bfe:	4610      	mov	r0, r2
  400c00:	4a05      	ldr	r2, [pc, #20]	; (400c18 <_sbrk+0x2c>)
  400c02:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400c04:	4618      	mov	r0, r3
  400c06:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400c08:	4a05      	ldr	r2, [pc, #20]	; (400c20 <_sbrk+0x34>)
  400c0a:	4b03      	ldr	r3, [pc, #12]	; (400c18 <_sbrk+0x2c>)
  400c0c:	601a      	str	r2, [r3, #0]
  400c0e:	e7f0      	b.n	400bf2 <_sbrk+0x6>
		return (caddr_t) -1;	
  400c10:	f04f 30ff 	mov.w	r0, #4294967295
}
  400c14:	4770      	bx	lr
  400c16:	bf00      	nop
  400c18:	20000b44 	.word	0x20000b44
  400c1c:	2001fffc 	.word	0x2001fffc
  400c20:	20003bb8 	.word	0x20003bb8

00400c24 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400c24:	f04f 30ff 	mov.w	r0, #4294967295
  400c28:	4770      	bx	lr

00400c2a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400c2e:	604b      	str	r3, [r1, #4]

	return 0;
}
  400c30:	2000      	movs	r0, #0
  400c32:	4770      	bx	lr

00400c34 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400c34:	2001      	movs	r0, #1
  400c36:	4770      	bx	lr

00400c38 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400c38:	2000      	movs	r0, #0
  400c3a:	4770      	bx	lr

00400c3c <usart_serial_getchar>:
{
  400c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400c3e:	b083      	sub	sp, #12
  400c40:	4605      	mov	r5, r0
  400c42:	460c      	mov	r4, r1
	uint32_t val = 0;
  400c44:	2300      	movs	r3, #0
  400c46:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400c48:	4b18      	ldr	r3, [pc, #96]	; (400cac <usart_serial_getchar+0x70>)
  400c4a:	4298      	cmp	r0, r3
  400c4c:	d00a      	beq.n	400c64 <usart_serial_getchar+0x28>
	if (UART1 == (Uart*)p_usart) {
  400c4e:	4b18      	ldr	r3, [pc, #96]	; (400cb0 <usart_serial_getchar+0x74>)
  400c50:	4298      	cmp	r0, r3
  400c52:	d00f      	beq.n	400c74 <usart_serial_getchar+0x38>
	if (USART0 == p_usart) {
  400c54:	4b17      	ldr	r3, [pc, #92]	; (400cb4 <usart_serial_getchar+0x78>)
  400c56:	4298      	cmp	r0, r3
  400c58:	d014      	beq.n	400c84 <usart_serial_getchar+0x48>
	if (USART1 == p_usart) {
  400c5a:	4b17      	ldr	r3, [pc, #92]	; (400cb8 <usart_serial_getchar+0x7c>)
  400c5c:	429d      	cmp	r5, r3
  400c5e:	d01b      	beq.n	400c98 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400c60:	b003      	add	sp, #12
  400c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400c64:	461f      	mov	r7, r3
  400c66:	4e15      	ldr	r6, [pc, #84]	; (400cbc <usart_serial_getchar+0x80>)
  400c68:	4621      	mov	r1, r4
  400c6a:	4638      	mov	r0, r7
  400c6c:	47b0      	blx	r6
  400c6e:	2800      	cmp	r0, #0
  400c70:	d1fa      	bne.n	400c68 <usart_serial_getchar+0x2c>
  400c72:	e7f2      	b.n	400c5a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400c74:	461e      	mov	r6, r3
  400c76:	4d11      	ldr	r5, [pc, #68]	; (400cbc <usart_serial_getchar+0x80>)
  400c78:	4621      	mov	r1, r4
  400c7a:	4630      	mov	r0, r6
  400c7c:	47a8      	blx	r5
  400c7e:	2800      	cmp	r0, #0
  400c80:	d1fa      	bne.n	400c78 <usart_serial_getchar+0x3c>
  400c82:	e7ed      	b.n	400c60 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400c84:	461e      	mov	r6, r3
  400c86:	4d0e      	ldr	r5, [pc, #56]	; (400cc0 <usart_serial_getchar+0x84>)
  400c88:	a901      	add	r1, sp, #4
  400c8a:	4630      	mov	r0, r6
  400c8c:	47a8      	blx	r5
  400c8e:	2800      	cmp	r0, #0
  400c90:	d1fa      	bne.n	400c88 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400c92:	9b01      	ldr	r3, [sp, #4]
  400c94:	7023      	strb	r3, [r4, #0]
  400c96:	e7e3      	b.n	400c60 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400c98:	461e      	mov	r6, r3
  400c9a:	4d09      	ldr	r5, [pc, #36]	; (400cc0 <usart_serial_getchar+0x84>)
  400c9c:	a901      	add	r1, sp, #4
  400c9e:	4630      	mov	r0, r6
  400ca0:	47a8      	blx	r5
  400ca2:	2800      	cmp	r0, #0
  400ca4:	d1fa      	bne.n	400c9c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400ca6:	9b01      	ldr	r3, [sp, #4]
  400ca8:	7023      	strb	r3, [r4, #0]
}
  400caa:	e7d9      	b.n	400c60 <usart_serial_getchar+0x24>
  400cac:	400e0600 	.word	0x400e0600
  400cb0:	400e0800 	.word	0x400e0800
  400cb4:	40024000 	.word	0x40024000
  400cb8:	40028000 	.word	0x40028000
  400cbc:	00400913 	.word	0x00400913
  400cc0:	00400431 	.word	0x00400431

00400cc4 <usart_serial_putchar>:
{
  400cc4:	b570      	push	{r4, r5, r6, lr}
  400cc6:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400cc8:	4b18      	ldr	r3, [pc, #96]	; (400d2c <usart_serial_putchar+0x68>)
  400cca:	4298      	cmp	r0, r3
  400ccc:	d00a      	beq.n	400ce4 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400cce:	4b18      	ldr	r3, [pc, #96]	; (400d30 <usart_serial_putchar+0x6c>)
  400cd0:	4298      	cmp	r0, r3
  400cd2:	d010      	beq.n	400cf6 <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400cd4:	4b17      	ldr	r3, [pc, #92]	; (400d34 <usart_serial_putchar+0x70>)
  400cd6:	4298      	cmp	r0, r3
  400cd8:	d016      	beq.n	400d08 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400cda:	4b17      	ldr	r3, [pc, #92]	; (400d38 <usart_serial_putchar+0x74>)
  400cdc:	4298      	cmp	r0, r3
  400cde:	d01c      	beq.n	400d1a <usart_serial_putchar+0x56>
	return 0;
  400ce0:	2000      	movs	r0, #0
}
  400ce2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400ce4:	461e      	mov	r6, r3
  400ce6:	4d15      	ldr	r5, [pc, #84]	; (400d3c <usart_serial_putchar+0x78>)
  400ce8:	4621      	mov	r1, r4
  400cea:	4630      	mov	r0, r6
  400cec:	47a8      	blx	r5
  400cee:	2800      	cmp	r0, #0
  400cf0:	d1fa      	bne.n	400ce8 <usart_serial_putchar+0x24>
		return 1;
  400cf2:	2001      	movs	r0, #1
  400cf4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400cf6:	461e      	mov	r6, r3
  400cf8:	4d10      	ldr	r5, [pc, #64]	; (400d3c <usart_serial_putchar+0x78>)
  400cfa:	4621      	mov	r1, r4
  400cfc:	4630      	mov	r0, r6
  400cfe:	47a8      	blx	r5
  400d00:	2800      	cmp	r0, #0
  400d02:	d1fa      	bne.n	400cfa <usart_serial_putchar+0x36>
		return 1;
  400d04:	2001      	movs	r0, #1
  400d06:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400d08:	461e      	mov	r6, r3
  400d0a:	4d0d      	ldr	r5, [pc, #52]	; (400d40 <usart_serial_putchar+0x7c>)
  400d0c:	4621      	mov	r1, r4
  400d0e:	4630      	mov	r0, r6
  400d10:	47a8      	blx	r5
  400d12:	2800      	cmp	r0, #0
  400d14:	d1fa      	bne.n	400d0c <usart_serial_putchar+0x48>
		return 1;
  400d16:	2001      	movs	r0, #1
  400d18:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400d1a:	461e      	mov	r6, r3
  400d1c:	4d08      	ldr	r5, [pc, #32]	; (400d40 <usart_serial_putchar+0x7c>)
  400d1e:	4621      	mov	r1, r4
  400d20:	4630      	mov	r0, r6
  400d22:	47a8      	blx	r5
  400d24:	2800      	cmp	r0, #0
  400d26:	d1fa      	bne.n	400d1e <usart_serial_putchar+0x5a>
		return 1;
  400d28:	2001      	movs	r0, #1
  400d2a:	bd70      	pop	{r4, r5, r6, pc}
  400d2c:	400e0600 	.word	0x400e0600
  400d30:	400e0800 	.word	0x400e0800
  400d34:	40024000 	.word	0x40024000
  400d38:	40028000 	.word	0x40028000
  400d3c:	00400903 	.word	0x00400903
  400d40:	0040041d 	.word	0x0040041d

00400d44 <main>:
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main (void)
{
  400d44:	b500      	push	{lr}
  400d46:	b085      	sub	sp, #20
	/* Insert system clock initialization code here (sysclk_init()). */
	/* Initialize the SAM system */
	SystemInit();
  400d48:	4b1e      	ldr	r3, [pc, #120]	; (400dc4 <main+0x80>)
  400d4a:	4798      	blx	r3
	board_init();
  400d4c:	4b1e      	ldr	r3, [pc, #120]	; (400dc8 <main+0x84>)
  400d4e:	4798      	blx	r3
	/** Disable Default Watchdog */
	wdt_init(WDT, WDT_MR_WDDIS, 0, 0);
  400d50:	2300      	movs	r3, #0
  400d52:	461a      	mov	r2, r3
  400d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400d58:	481c      	ldr	r0, [pc, #112]	; (400dcc <main+0x88>)
  400d5a:	4c1d      	ldr	r4, [pc, #116]	; (400dd0 <main+0x8c>)
  400d5c:	47a0      	blx	r4
	sysclk_init();
  400d5e:	4b1d      	ldr	r3, [pc, #116]	; (400dd4 <main+0x90>)
  400d60:	4798      	blx	r3
	delay_init();
	
	TMOUT_Init();
  400d62:	4b1d      	ldr	r3, [pc, #116]	; (400dd8 <main+0x94>)
  400d64:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400d66:	2008      	movs	r0, #8
  400d68:	4d1c      	ldr	r5, [pc, #112]	; (400ddc <main+0x98>)
  400d6a:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400d6c:	4c1c      	ldr	r4, [pc, #112]	; (400de0 <main+0x9c>)
  400d6e:	4b1d      	ldr	r3, [pc, #116]	; (400de4 <main+0xa0>)
  400d70:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400d72:	4a1d      	ldr	r2, [pc, #116]	; (400de8 <main+0xa4>)
  400d74:	4b1d      	ldr	r3, [pc, #116]	; (400dec <main+0xa8>)
  400d76:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400d78:	4a1d      	ldr	r2, [pc, #116]	; (400df0 <main+0xac>)
  400d7a:	4b1e      	ldr	r3, [pc, #120]	; (400df4 <main+0xb0>)
  400d7c:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400d7e:	4b1e      	ldr	r3, [pc, #120]	; (400df8 <main+0xb4>)
  400d80:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400d82:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400d86:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400d88:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d8c:	9303      	str	r3, [sp, #12]
  400d8e:	2008      	movs	r0, #8
  400d90:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
  400d92:	a901      	add	r1, sp, #4
  400d94:	4620      	mov	r0, r4
  400d96:	4b19      	ldr	r3, [pc, #100]	; (400dfc <main+0xb8>)
  400d98:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400d9a:	4d19      	ldr	r5, [pc, #100]	; (400e00 <main+0xbc>)
  400d9c:	682b      	ldr	r3, [r5, #0]
  400d9e:	2100      	movs	r1, #0
  400da0:	6898      	ldr	r0, [r3, #8]
  400da2:	4c18      	ldr	r4, [pc, #96]	; (400e04 <main+0xc0>)
  400da4:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400da6:	682b      	ldr	r3, [r5, #0]
  400da8:	2100      	movs	r1, #0
  400daa:	6858      	ldr	r0, [r3, #4]
  400dac:	47a0      	blx	r4
	/* Configure UART for debug message output. */
	configure_console();
	
	while (1)
	{
		printf("ADS1298_Test %d \r\n", 122);
  400dae:	4e16      	ldr	r6, [pc, #88]	; (400e08 <main+0xc4>)
  400db0:	4d16      	ldr	r5, [pc, #88]	; (400e0c <main+0xc8>)
		delay_ms(1000);
  400db2:	4c17      	ldr	r4, [pc, #92]	; (400e10 <main+0xcc>)
		printf("ADS1298_Test %d \r\n", 122);
  400db4:	217a      	movs	r1, #122	; 0x7a
  400db6:	4630      	mov	r0, r6
  400db8:	47a8      	blx	r5
		delay_ms(1000);
  400dba:	4620      	mov	r0, r4
  400dbc:	4b15      	ldr	r3, [pc, #84]	; (400e14 <main+0xd0>)
  400dbe:	4798      	blx	r3
  400dc0:	e7f8      	b.n	400db4 <main+0x70>
  400dc2:	bf00      	nop
  400dc4:	00400a59 	.word	0x00400a59
  400dc8:	00400925 	.word	0x00400925
  400dcc:	400e1450 	.word	0x400e1450
  400dd0:	00400449 	.word	0x00400449
  400dd4:	004005b5 	.word	0x004005b5
  400dd8:	0040026d 	.word	0x0040026d
  400ddc:	00400879 	.word	0x00400879
  400de0:	400e0600 	.word	0x400e0600
  400de4:	20000b84 	.word	0x20000b84
  400de8:	00400cc5 	.word	0x00400cc5
  400dec:	20000b80 	.word	0x20000b80
  400df0:	00400c3d 	.word	0x00400c3d
  400df4:	20000b7c 	.word	0x20000b7c
  400df8:	02dc6c00 	.word	0x02dc6c00
  400dfc:	004008cd 	.word	0x004008cd
  400e00:	20000010 	.word	0x20000010
  400e04:	00400f2d 	.word	0x00400f2d
  400e08:	00403d88 	.word	0x00403d88
  400e0c:	00400e69 	.word	0x00400e69
  400e10:	003450dc 	.word	0x003450dc
  400e14:	20000001 	.word	0x20000001

00400e18 <__libc_init_array>:
  400e18:	b570      	push	{r4, r5, r6, lr}
  400e1a:	4e0f      	ldr	r6, [pc, #60]	; (400e58 <__libc_init_array+0x40>)
  400e1c:	4d0f      	ldr	r5, [pc, #60]	; (400e5c <__libc_init_array+0x44>)
  400e1e:	1b76      	subs	r6, r6, r5
  400e20:	10b6      	asrs	r6, r6, #2
  400e22:	bf18      	it	ne
  400e24:	2400      	movne	r4, #0
  400e26:	d005      	beq.n	400e34 <__libc_init_array+0x1c>
  400e28:	3401      	adds	r4, #1
  400e2a:	f855 3b04 	ldr.w	r3, [r5], #4
  400e2e:	4798      	blx	r3
  400e30:	42a6      	cmp	r6, r4
  400e32:	d1f9      	bne.n	400e28 <__libc_init_array+0x10>
  400e34:	4e0a      	ldr	r6, [pc, #40]	; (400e60 <__libc_init_array+0x48>)
  400e36:	4d0b      	ldr	r5, [pc, #44]	; (400e64 <__libc_init_array+0x4c>)
  400e38:	1b76      	subs	r6, r6, r5
  400e3a:	f003 f863 	bl	403f04 <_init>
  400e3e:	10b6      	asrs	r6, r6, #2
  400e40:	bf18      	it	ne
  400e42:	2400      	movne	r4, #0
  400e44:	d006      	beq.n	400e54 <__libc_init_array+0x3c>
  400e46:	3401      	adds	r4, #1
  400e48:	f855 3b04 	ldr.w	r3, [r5], #4
  400e4c:	4798      	blx	r3
  400e4e:	42a6      	cmp	r6, r4
  400e50:	d1f9      	bne.n	400e46 <__libc_init_array+0x2e>
  400e52:	bd70      	pop	{r4, r5, r6, pc}
  400e54:	bd70      	pop	{r4, r5, r6, pc}
  400e56:	bf00      	nop
  400e58:	00403f10 	.word	0x00403f10
  400e5c:	00403f10 	.word	0x00403f10
  400e60:	00403f18 	.word	0x00403f18
  400e64:	00403f10 	.word	0x00403f10

00400e68 <iprintf>:
  400e68:	b40f      	push	{r0, r1, r2, r3}
  400e6a:	b500      	push	{lr}
  400e6c:	4907      	ldr	r1, [pc, #28]	; (400e8c <iprintf+0x24>)
  400e6e:	b083      	sub	sp, #12
  400e70:	ab04      	add	r3, sp, #16
  400e72:	6808      	ldr	r0, [r1, #0]
  400e74:	f853 2b04 	ldr.w	r2, [r3], #4
  400e78:	6881      	ldr	r1, [r0, #8]
  400e7a:	9301      	str	r3, [sp, #4]
  400e7c:	f000 f966 	bl	40114c <_vfiprintf_r>
  400e80:	b003      	add	sp, #12
  400e82:	f85d eb04 	ldr.w	lr, [sp], #4
  400e86:	b004      	add	sp, #16
  400e88:	4770      	bx	lr
  400e8a:	bf00      	nop
  400e8c:	20000010 	.word	0x20000010

00400e90 <memset>:
  400e90:	b470      	push	{r4, r5, r6}
  400e92:	0786      	lsls	r6, r0, #30
  400e94:	d046      	beq.n	400f24 <memset+0x94>
  400e96:	1e54      	subs	r4, r2, #1
  400e98:	2a00      	cmp	r2, #0
  400e9a:	d041      	beq.n	400f20 <memset+0x90>
  400e9c:	b2ca      	uxtb	r2, r1
  400e9e:	4603      	mov	r3, r0
  400ea0:	e002      	b.n	400ea8 <memset+0x18>
  400ea2:	f114 34ff 	adds.w	r4, r4, #4294967295
  400ea6:	d33b      	bcc.n	400f20 <memset+0x90>
  400ea8:	f803 2b01 	strb.w	r2, [r3], #1
  400eac:	079d      	lsls	r5, r3, #30
  400eae:	d1f8      	bne.n	400ea2 <memset+0x12>
  400eb0:	2c03      	cmp	r4, #3
  400eb2:	d92e      	bls.n	400f12 <memset+0x82>
  400eb4:	b2cd      	uxtb	r5, r1
  400eb6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400eba:	2c0f      	cmp	r4, #15
  400ebc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400ec0:	d919      	bls.n	400ef6 <memset+0x66>
  400ec2:	f103 0210 	add.w	r2, r3, #16
  400ec6:	4626      	mov	r6, r4
  400ec8:	3e10      	subs	r6, #16
  400eca:	2e0f      	cmp	r6, #15
  400ecc:	f842 5c10 	str.w	r5, [r2, #-16]
  400ed0:	f842 5c0c 	str.w	r5, [r2, #-12]
  400ed4:	f842 5c08 	str.w	r5, [r2, #-8]
  400ed8:	f842 5c04 	str.w	r5, [r2, #-4]
  400edc:	f102 0210 	add.w	r2, r2, #16
  400ee0:	d8f2      	bhi.n	400ec8 <memset+0x38>
  400ee2:	f1a4 0210 	sub.w	r2, r4, #16
  400ee6:	f022 020f 	bic.w	r2, r2, #15
  400eea:	f004 040f 	and.w	r4, r4, #15
  400eee:	3210      	adds	r2, #16
  400ef0:	2c03      	cmp	r4, #3
  400ef2:	4413      	add	r3, r2
  400ef4:	d90d      	bls.n	400f12 <memset+0x82>
  400ef6:	461e      	mov	r6, r3
  400ef8:	4622      	mov	r2, r4
  400efa:	3a04      	subs	r2, #4
  400efc:	2a03      	cmp	r2, #3
  400efe:	f846 5b04 	str.w	r5, [r6], #4
  400f02:	d8fa      	bhi.n	400efa <memset+0x6a>
  400f04:	1f22      	subs	r2, r4, #4
  400f06:	f022 0203 	bic.w	r2, r2, #3
  400f0a:	3204      	adds	r2, #4
  400f0c:	4413      	add	r3, r2
  400f0e:	f004 0403 	and.w	r4, r4, #3
  400f12:	b12c      	cbz	r4, 400f20 <memset+0x90>
  400f14:	b2c9      	uxtb	r1, r1
  400f16:	441c      	add	r4, r3
  400f18:	f803 1b01 	strb.w	r1, [r3], #1
  400f1c:	429c      	cmp	r4, r3
  400f1e:	d1fb      	bne.n	400f18 <memset+0x88>
  400f20:	bc70      	pop	{r4, r5, r6}
  400f22:	4770      	bx	lr
  400f24:	4614      	mov	r4, r2
  400f26:	4603      	mov	r3, r0
  400f28:	e7c2      	b.n	400eb0 <memset+0x20>
  400f2a:	bf00      	nop

00400f2c <setbuf>:
  400f2c:	2900      	cmp	r1, #0
  400f2e:	bf0c      	ite	eq
  400f30:	2202      	moveq	r2, #2
  400f32:	2200      	movne	r2, #0
  400f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400f38:	f000 b800 	b.w	400f3c <setvbuf>

00400f3c <setvbuf>:
  400f3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400f40:	4c61      	ldr	r4, [pc, #388]	; (4010c8 <setvbuf+0x18c>)
  400f42:	6825      	ldr	r5, [r4, #0]
  400f44:	b083      	sub	sp, #12
  400f46:	4604      	mov	r4, r0
  400f48:	460f      	mov	r7, r1
  400f4a:	4690      	mov	r8, r2
  400f4c:	461e      	mov	r6, r3
  400f4e:	b115      	cbz	r5, 400f56 <setvbuf+0x1a>
  400f50:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400f52:	2b00      	cmp	r3, #0
  400f54:	d064      	beq.n	401020 <setvbuf+0xe4>
  400f56:	f1b8 0f02 	cmp.w	r8, #2
  400f5a:	d006      	beq.n	400f6a <setvbuf+0x2e>
  400f5c:	f1b8 0f01 	cmp.w	r8, #1
  400f60:	f200 809f 	bhi.w	4010a2 <setvbuf+0x166>
  400f64:	2e00      	cmp	r6, #0
  400f66:	f2c0 809c 	blt.w	4010a2 <setvbuf+0x166>
  400f6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400f6c:	07d8      	lsls	r0, r3, #31
  400f6e:	d534      	bpl.n	400fda <setvbuf+0x9e>
  400f70:	4621      	mov	r1, r4
  400f72:	4628      	mov	r0, r5
  400f74:	f001 f888 	bl	402088 <_fflush_r>
  400f78:	6b21      	ldr	r1, [r4, #48]	; 0x30
  400f7a:	b141      	cbz	r1, 400f8e <setvbuf+0x52>
  400f7c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  400f80:	4299      	cmp	r1, r3
  400f82:	d002      	beq.n	400f8a <setvbuf+0x4e>
  400f84:	4628      	mov	r0, r5
  400f86:	f001 f9fd 	bl	402384 <_free_r>
  400f8a:	2300      	movs	r3, #0
  400f8c:	6323      	str	r3, [r4, #48]	; 0x30
  400f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400f92:	2200      	movs	r2, #0
  400f94:	61a2      	str	r2, [r4, #24]
  400f96:	6062      	str	r2, [r4, #4]
  400f98:	061a      	lsls	r2, r3, #24
  400f9a:	d43a      	bmi.n	401012 <setvbuf+0xd6>
  400f9c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  400fa0:	f023 0303 	bic.w	r3, r3, #3
  400fa4:	f1b8 0f02 	cmp.w	r8, #2
  400fa8:	81a3      	strh	r3, [r4, #12]
  400faa:	d01d      	beq.n	400fe8 <setvbuf+0xac>
  400fac:	ab01      	add	r3, sp, #4
  400fae:	466a      	mov	r2, sp
  400fb0:	4621      	mov	r1, r4
  400fb2:	4628      	mov	r0, r5
  400fb4:	f001 fc84 	bl	4028c0 <__swhatbuf_r>
  400fb8:	89a3      	ldrh	r3, [r4, #12]
  400fba:	4318      	orrs	r0, r3
  400fbc:	81a0      	strh	r0, [r4, #12]
  400fbe:	2e00      	cmp	r6, #0
  400fc0:	d132      	bne.n	401028 <setvbuf+0xec>
  400fc2:	9e00      	ldr	r6, [sp, #0]
  400fc4:	4630      	mov	r0, r6
  400fc6:	f001 fcf3 	bl	4029b0 <malloc>
  400fca:	4607      	mov	r7, r0
  400fcc:	2800      	cmp	r0, #0
  400fce:	d06b      	beq.n	4010a8 <setvbuf+0x16c>
  400fd0:	89a3      	ldrh	r3, [r4, #12]
  400fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400fd6:	81a3      	strh	r3, [r4, #12]
  400fd8:	e028      	b.n	40102c <setvbuf+0xf0>
  400fda:	89a3      	ldrh	r3, [r4, #12]
  400fdc:	0599      	lsls	r1, r3, #22
  400fde:	d4c7      	bmi.n	400f70 <setvbuf+0x34>
  400fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400fe2:	f001 fc69 	bl	4028b8 <__retarget_lock_acquire_recursive>
  400fe6:	e7c3      	b.n	400f70 <setvbuf+0x34>
  400fe8:	2500      	movs	r5, #0
  400fea:	6e61      	ldr	r1, [r4, #100]	; 0x64
  400fec:	2600      	movs	r6, #0
  400fee:	f104 0243 	add.w	r2, r4, #67	; 0x43
  400ff2:	f043 0302 	orr.w	r3, r3, #2
  400ff6:	2001      	movs	r0, #1
  400ff8:	60a6      	str	r6, [r4, #8]
  400ffa:	07ce      	lsls	r6, r1, #31
  400ffc:	81a3      	strh	r3, [r4, #12]
  400ffe:	6022      	str	r2, [r4, #0]
  401000:	6122      	str	r2, [r4, #16]
  401002:	6160      	str	r0, [r4, #20]
  401004:	d401      	bmi.n	40100a <setvbuf+0xce>
  401006:	0598      	lsls	r0, r3, #22
  401008:	d53e      	bpl.n	401088 <setvbuf+0x14c>
  40100a:	4628      	mov	r0, r5
  40100c:	b003      	add	sp, #12
  40100e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401012:	6921      	ldr	r1, [r4, #16]
  401014:	4628      	mov	r0, r5
  401016:	f001 f9b5 	bl	402384 <_free_r>
  40101a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40101e:	e7bd      	b.n	400f9c <setvbuf+0x60>
  401020:	4628      	mov	r0, r5
  401022:	f001 f889 	bl	402138 <__sinit>
  401026:	e796      	b.n	400f56 <setvbuf+0x1a>
  401028:	2f00      	cmp	r7, #0
  40102a:	d0cb      	beq.n	400fc4 <setvbuf+0x88>
  40102c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40102e:	2b00      	cmp	r3, #0
  401030:	d033      	beq.n	40109a <setvbuf+0x15e>
  401032:	9b00      	ldr	r3, [sp, #0]
  401034:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401038:	6027      	str	r7, [r4, #0]
  40103a:	429e      	cmp	r6, r3
  40103c:	bf1c      	itt	ne
  40103e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401042:	81a2      	strhne	r2, [r4, #12]
  401044:	f1b8 0f01 	cmp.w	r8, #1
  401048:	bf04      	itt	eq
  40104a:	f042 0201 	orreq.w	r2, r2, #1
  40104e:	81a2      	strheq	r2, [r4, #12]
  401050:	b292      	uxth	r2, r2
  401052:	f012 0308 	ands.w	r3, r2, #8
  401056:	6127      	str	r7, [r4, #16]
  401058:	6166      	str	r6, [r4, #20]
  40105a:	d00e      	beq.n	40107a <setvbuf+0x13e>
  40105c:	07d1      	lsls	r1, r2, #31
  40105e:	d51a      	bpl.n	401096 <setvbuf+0x15a>
  401060:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401062:	4276      	negs	r6, r6
  401064:	2300      	movs	r3, #0
  401066:	f015 0501 	ands.w	r5, r5, #1
  40106a:	61a6      	str	r6, [r4, #24]
  40106c:	60a3      	str	r3, [r4, #8]
  40106e:	d009      	beq.n	401084 <setvbuf+0x148>
  401070:	2500      	movs	r5, #0
  401072:	4628      	mov	r0, r5
  401074:	b003      	add	sp, #12
  401076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40107a:	60a3      	str	r3, [r4, #8]
  40107c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40107e:	f015 0501 	ands.w	r5, r5, #1
  401082:	d1f5      	bne.n	401070 <setvbuf+0x134>
  401084:	0593      	lsls	r3, r2, #22
  401086:	d4c0      	bmi.n	40100a <setvbuf+0xce>
  401088:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40108a:	f001 fc17 	bl	4028bc <__retarget_lock_release_recursive>
  40108e:	4628      	mov	r0, r5
  401090:	b003      	add	sp, #12
  401092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401096:	60a6      	str	r6, [r4, #8]
  401098:	e7f0      	b.n	40107c <setvbuf+0x140>
  40109a:	4628      	mov	r0, r5
  40109c:	f001 f84c 	bl	402138 <__sinit>
  4010a0:	e7c7      	b.n	401032 <setvbuf+0xf6>
  4010a2:	f04f 35ff 	mov.w	r5, #4294967295
  4010a6:	e7b0      	b.n	40100a <setvbuf+0xce>
  4010a8:	f8dd 9000 	ldr.w	r9, [sp]
  4010ac:	45b1      	cmp	r9, r6
  4010ae:	d004      	beq.n	4010ba <setvbuf+0x17e>
  4010b0:	4648      	mov	r0, r9
  4010b2:	f001 fc7d 	bl	4029b0 <malloc>
  4010b6:	4607      	mov	r7, r0
  4010b8:	b920      	cbnz	r0, 4010c4 <setvbuf+0x188>
  4010ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4010be:	f04f 35ff 	mov.w	r5, #4294967295
  4010c2:	e792      	b.n	400fea <setvbuf+0xae>
  4010c4:	464e      	mov	r6, r9
  4010c6:	e783      	b.n	400fd0 <setvbuf+0x94>
  4010c8:	20000010 	.word	0x20000010

004010cc <__sprint_r.part.0>:
  4010cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010d0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4010d2:	049c      	lsls	r4, r3, #18
  4010d4:	4693      	mov	fp, r2
  4010d6:	d52f      	bpl.n	401138 <__sprint_r.part.0+0x6c>
  4010d8:	6893      	ldr	r3, [r2, #8]
  4010da:	6812      	ldr	r2, [r2, #0]
  4010dc:	b353      	cbz	r3, 401134 <__sprint_r.part.0+0x68>
  4010de:	460e      	mov	r6, r1
  4010e0:	4607      	mov	r7, r0
  4010e2:	f102 0908 	add.w	r9, r2, #8
  4010e6:	e919 0420 	ldmdb	r9, {r5, sl}
  4010ea:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4010ee:	d017      	beq.n	401120 <__sprint_r.part.0+0x54>
  4010f0:	3d04      	subs	r5, #4
  4010f2:	2400      	movs	r4, #0
  4010f4:	e001      	b.n	4010fa <__sprint_r.part.0+0x2e>
  4010f6:	45a0      	cmp	r8, r4
  4010f8:	d010      	beq.n	40111c <__sprint_r.part.0+0x50>
  4010fa:	4632      	mov	r2, r6
  4010fc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401100:	4638      	mov	r0, r7
  401102:	f001 f8bb 	bl	40227c <_fputwc_r>
  401106:	1c43      	adds	r3, r0, #1
  401108:	f104 0401 	add.w	r4, r4, #1
  40110c:	d1f3      	bne.n	4010f6 <__sprint_r.part.0+0x2a>
  40110e:	2300      	movs	r3, #0
  401110:	f8cb 3008 	str.w	r3, [fp, #8]
  401114:	f8cb 3004 	str.w	r3, [fp, #4]
  401118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40111c:	f8db 3008 	ldr.w	r3, [fp, #8]
  401120:	f02a 0a03 	bic.w	sl, sl, #3
  401124:	eba3 030a 	sub.w	r3, r3, sl
  401128:	f8cb 3008 	str.w	r3, [fp, #8]
  40112c:	f109 0908 	add.w	r9, r9, #8
  401130:	2b00      	cmp	r3, #0
  401132:	d1d8      	bne.n	4010e6 <__sprint_r.part.0+0x1a>
  401134:	2000      	movs	r0, #0
  401136:	e7ea      	b.n	40110e <__sprint_r.part.0+0x42>
  401138:	f001 fa0a 	bl	402550 <__sfvwrite_r>
  40113c:	2300      	movs	r3, #0
  40113e:	f8cb 3008 	str.w	r3, [fp, #8]
  401142:	f8cb 3004 	str.w	r3, [fp, #4]
  401146:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40114a:	bf00      	nop

0040114c <_vfiprintf_r>:
  40114c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401150:	b0ad      	sub	sp, #180	; 0xb4
  401152:	461d      	mov	r5, r3
  401154:	468b      	mov	fp, r1
  401156:	4690      	mov	r8, r2
  401158:	9307      	str	r3, [sp, #28]
  40115a:	9006      	str	r0, [sp, #24]
  40115c:	b118      	cbz	r0, 401166 <_vfiprintf_r+0x1a>
  40115e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401160:	2b00      	cmp	r3, #0
  401162:	f000 80f3 	beq.w	40134c <_vfiprintf_r+0x200>
  401166:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40116a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40116e:	07df      	lsls	r7, r3, #31
  401170:	b281      	uxth	r1, r0
  401172:	d402      	bmi.n	40117a <_vfiprintf_r+0x2e>
  401174:	058e      	lsls	r6, r1, #22
  401176:	f140 80fc 	bpl.w	401372 <_vfiprintf_r+0x226>
  40117a:	048c      	lsls	r4, r1, #18
  40117c:	d40a      	bmi.n	401194 <_vfiprintf_r+0x48>
  40117e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401182:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40118a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40118e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401192:	b289      	uxth	r1, r1
  401194:	0708      	lsls	r0, r1, #28
  401196:	f140 80b3 	bpl.w	401300 <_vfiprintf_r+0x1b4>
  40119a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40119e:	2b00      	cmp	r3, #0
  4011a0:	f000 80ae 	beq.w	401300 <_vfiprintf_r+0x1b4>
  4011a4:	f001 031a 	and.w	r3, r1, #26
  4011a8:	2b0a      	cmp	r3, #10
  4011aa:	f000 80b5 	beq.w	401318 <_vfiprintf_r+0x1cc>
  4011ae:	2300      	movs	r3, #0
  4011b0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4011b4:	930b      	str	r3, [sp, #44]	; 0x2c
  4011b6:	9311      	str	r3, [sp, #68]	; 0x44
  4011b8:	9310      	str	r3, [sp, #64]	; 0x40
  4011ba:	9303      	str	r3, [sp, #12]
  4011bc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4011c0:	46ca      	mov	sl, r9
  4011c2:	f8cd b010 	str.w	fp, [sp, #16]
  4011c6:	f898 3000 	ldrb.w	r3, [r8]
  4011ca:	4644      	mov	r4, r8
  4011cc:	b1fb      	cbz	r3, 40120e <_vfiprintf_r+0xc2>
  4011ce:	2b25      	cmp	r3, #37	; 0x25
  4011d0:	d102      	bne.n	4011d8 <_vfiprintf_r+0x8c>
  4011d2:	e01c      	b.n	40120e <_vfiprintf_r+0xc2>
  4011d4:	2b25      	cmp	r3, #37	; 0x25
  4011d6:	d003      	beq.n	4011e0 <_vfiprintf_r+0x94>
  4011d8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4011dc:	2b00      	cmp	r3, #0
  4011de:	d1f9      	bne.n	4011d4 <_vfiprintf_r+0x88>
  4011e0:	eba4 0508 	sub.w	r5, r4, r8
  4011e4:	b19d      	cbz	r5, 40120e <_vfiprintf_r+0xc2>
  4011e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4011e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4011ea:	f8ca 8000 	str.w	r8, [sl]
  4011ee:	3301      	adds	r3, #1
  4011f0:	442a      	add	r2, r5
  4011f2:	2b07      	cmp	r3, #7
  4011f4:	f8ca 5004 	str.w	r5, [sl, #4]
  4011f8:	9211      	str	r2, [sp, #68]	; 0x44
  4011fa:	9310      	str	r3, [sp, #64]	; 0x40
  4011fc:	dd7a      	ble.n	4012f4 <_vfiprintf_r+0x1a8>
  4011fe:	2a00      	cmp	r2, #0
  401200:	f040 84b0 	bne.w	401b64 <_vfiprintf_r+0xa18>
  401204:	9b03      	ldr	r3, [sp, #12]
  401206:	9210      	str	r2, [sp, #64]	; 0x40
  401208:	442b      	add	r3, r5
  40120a:	46ca      	mov	sl, r9
  40120c:	9303      	str	r3, [sp, #12]
  40120e:	7823      	ldrb	r3, [r4, #0]
  401210:	2b00      	cmp	r3, #0
  401212:	f000 83e0 	beq.w	4019d6 <_vfiprintf_r+0x88a>
  401216:	2000      	movs	r0, #0
  401218:	f04f 0300 	mov.w	r3, #0
  40121c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401220:	f104 0801 	add.w	r8, r4, #1
  401224:	7862      	ldrb	r2, [r4, #1]
  401226:	4605      	mov	r5, r0
  401228:	4606      	mov	r6, r0
  40122a:	4603      	mov	r3, r0
  40122c:	f04f 34ff 	mov.w	r4, #4294967295
  401230:	f108 0801 	add.w	r8, r8, #1
  401234:	f1a2 0120 	sub.w	r1, r2, #32
  401238:	2958      	cmp	r1, #88	; 0x58
  40123a:	f200 82de 	bhi.w	4017fa <_vfiprintf_r+0x6ae>
  40123e:	e8df f011 	tbh	[pc, r1, lsl #1]
  401242:	0221      	.short	0x0221
  401244:	02dc02dc 	.word	0x02dc02dc
  401248:	02dc0229 	.word	0x02dc0229
  40124c:	02dc02dc 	.word	0x02dc02dc
  401250:	02dc02dc 	.word	0x02dc02dc
  401254:	028902dc 	.word	0x028902dc
  401258:	02dc0295 	.word	0x02dc0295
  40125c:	02bd00a2 	.word	0x02bd00a2
  401260:	019f02dc 	.word	0x019f02dc
  401264:	01a401a4 	.word	0x01a401a4
  401268:	01a401a4 	.word	0x01a401a4
  40126c:	01a401a4 	.word	0x01a401a4
  401270:	01a401a4 	.word	0x01a401a4
  401274:	02dc01a4 	.word	0x02dc01a4
  401278:	02dc02dc 	.word	0x02dc02dc
  40127c:	02dc02dc 	.word	0x02dc02dc
  401280:	02dc02dc 	.word	0x02dc02dc
  401284:	02dc02dc 	.word	0x02dc02dc
  401288:	01b202dc 	.word	0x01b202dc
  40128c:	02dc02dc 	.word	0x02dc02dc
  401290:	02dc02dc 	.word	0x02dc02dc
  401294:	02dc02dc 	.word	0x02dc02dc
  401298:	02dc02dc 	.word	0x02dc02dc
  40129c:	02dc02dc 	.word	0x02dc02dc
  4012a0:	02dc0197 	.word	0x02dc0197
  4012a4:	02dc02dc 	.word	0x02dc02dc
  4012a8:	02dc02dc 	.word	0x02dc02dc
  4012ac:	02dc019b 	.word	0x02dc019b
  4012b0:	025302dc 	.word	0x025302dc
  4012b4:	02dc02dc 	.word	0x02dc02dc
  4012b8:	02dc02dc 	.word	0x02dc02dc
  4012bc:	02dc02dc 	.word	0x02dc02dc
  4012c0:	02dc02dc 	.word	0x02dc02dc
  4012c4:	02dc02dc 	.word	0x02dc02dc
  4012c8:	021b025a 	.word	0x021b025a
  4012cc:	02dc02dc 	.word	0x02dc02dc
  4012d0:	026e02dc 	.word	0x026e02dc
  4012d4:	02dc021b 	.word	0x02dc021b
  4012d8:	027302dc 	.word	0x027302dc
  4012dc:	01f502dc 	.word	0x01f502dc
  4012e0:	02090182 	.word	0x02090182
  4012e4:	02dc02d7 	.word	0x02dc02d7
  4012e8:	02dc029a 	.word	0x02dc029a
  4012ec:	02dc00a7 	.word	0x02dc00a7
  4012f0:	022e02dc 	.word	0x022e02dc
  4012f4:	f10a 0a08 	add.w	sl, sl, #8
  4012f8:	9b03      	ldr	r3, [sp, #12]
  4012fa:	442b      	add	r3, r5
  4012fc:	9303      	str	r3, [sp, #12]
  4012fe:	e786      	b.n	40120e <_vfiprintf_r+0xc2>
  401300:	4659      	mov	r1, fp
  401302:	9806      	ldr	r0, [sp, #24]
  401304:	f000 fdac 	bl	401e60 <__swsetup_r>
  401308:	bb18      	cbnz	r0, 401352 <_vfiprintf_r+0x206>
  40130a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40130e:	f001 031a 	and.w	r3, r1, #26
  401312:	2b0a      	cmp	r3, #10
  401314:	f47f af4b 	bne.w	4011ae <_vfiprintf_r+0x62>
  401318:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40131c:	2b00      	cmp	r3, #0
  40131e:	f6ff af46 	blt.w	4011ae <_vfiprintf_r+0x62>
  401322:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401326:	07db      	lsls	r3, r3, #31
  401328:	d405      	bmi.n	401336 <_vfiprintf_r+0x1ea>
  40132a:	058f      	lsls	r7, r1, #22
  40132c:	d403      	bmi.n	401336 <_vfiprintf_r+0x1ea>
  40132e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401332:	f001 fac3 	bl	4028bc <__retarget_lock_release_recursive>
  401336:	462b      	mov	r3, r5
  401338:	4642      	mov	r2, r8
  40133a:	4659      	mov	r1, fp
  40133c:	9806      	ldr	r0, [sp, #24]
  40133e:	f000 fd4d 	bl	401ddc <__sbprintf>
  401342:	9003      	str	r0, [sp, #12]
  401344:	9803      	ldr	r0, [sp, #12]
  401346:	b02d      	add	sp, #180	; 0xb4
  401348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40134c:	f000 fef4 	bl	402138 <__sinit>
  401350:	e709      	b.n	401166 <_vfiprintf_r+0x1a>
  401352:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401356:	07d9      	lsls	r1, r3, #31
  401358:	d404      	bmi.n	401364 <_vfiprintf_r+0x218>
  40135a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40135e:	059a      	lsls	r2, r3, #22
  401360:	f140 84aa 	bpl.w	401cb8 <_vfiprintf_r+0xb6c>
  401364:	f04f 33ff 	mov.w	r3, #4294967295
  401368:	9303      	str	r3, [sp, #12]
  40136a:	9803      	ldr	r0, [sp, #12]
  40136c:	b02d      	add	sp, #180	; 0xb4
  40136e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401372:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401376:	f001 fa9f 	bl	4028b8 <__retarget_lock_acquire_recursive>
  40137a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40137e:	b281      	uxth	r1, r0
  401380:	e6fb      	b.n	40117a <_vfiprintf_r+0x2e>
  401382:	4276      	negs	r6, r6
  401384:	9207      	str	r2, [sp, #28]
  401386:	f043 0304 	orr.w	r3, r3, #4
  40138a:	f898 2000 	ldrb.w	r2, [r8]
  40138e:	e74f      	b.n	401230 <_vfiprintf_r+0xe4>
  401390:	9608      	str	r6, [sp, #32]
  401392:	069e      	lsls	r6, r3, #26
  401394:	f100 8450 	bmi.w	401c38 <_vfiprintf_r+0xaec>
  401398:	9907      	ldr	r1, [sp, #28]
  40139a:	06dd      	lsls	r5, r3, #27
  40139c:	460a      	mov	r2, r1
  40139e:	f100 83ef 	bmi.w	401b80 <_vfiprintf_r+0xa34>
  4013a2:	0658      	lsls	r0, r3, #25
  4013a4:	f140 83ec 	bpl.w	401b80 <_vfiprintf_r+0xa34>
  4013a8:	880e      	ldrh	r6, [r1, #0]
  4013aa:	3104      	adds	r1, #4
  4013ac:	2700      	movs	r7, #0
  4013ae:	2201      	movs	r2, #1
  4013b0:	9107      	str	r1, [sp, #28]
  4013b2:	f04f 0100 	mov.w	r1, #0
  4013b6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4013ba:	2500      	movs	r5, #0
  4013bc:	1c61      	adds	r1, r4, #1
  4013be:	f000 8116 	beq.w	4015ee <_vfiprintf_r+0x4a2>
  4013c2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4013c6:	9102      	str	r1, [sp, #8]
  4013c8:	ea56 0107 	orrs.w	r1, r6, r7
  4013cc:	f040 8114 	bne.w	4015f8 <_vfiprintf_r+0x4ac>
  4013d0:	2c00      	cmp	r4, #0
  4013d2:	f040 835c 	bne.w	401a8e <_vfiprintf_r+0x942>
  4013d6:	2a00      	cmp	r2, #0
  4013d8:	f040 83b7 	bne.w	401b4a <_vfiprintf_r+0x9fe>
  4013dc:	f013 0301 	ands.w	r3, r3, #1
  4013e0:	9305      	str	r3, [sp, #20]
  4013e2:	f000 8457 	beq.w	401c94 <_vfiprintf_r+0xb48>
  4013e6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4013ea:	2330      	movs	r3, #48	; 0x30
  4013ec:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4013f0:	9b05      	ldr	r3, [sp, #20]
  4013f2:	42a3      	cmp	r3, r4
  4013f4:	bfb8      	it	lt
  4013f6:	4623      	movlt	r3, r4
  4013f8:	9301      	str	r3, [sp, #4]
  4013fa:	b10d      	cbz	r5, 401400 <_vfiprintf_r+0x2b4>
  4013fc:	3301      	adds	r3, #1
  4013fe:	9301      	str	r3, [sp, #4]
  401400:	9b02      	ldr	r3, [sp, #8]
  401402:	f013 0302 	ands.w	r3, r3, #2
  401406:	9309      	str	r3, [sp, #36]	; 0x24
  401408:	d002      	beq.n	401410 <_vfiprintf_r+0x2c4>
  40140a:	9b01      	ldr	r3, [sp, #4]
  40140c:	3302      	adds	r3, #2
  40140e:	9301      	str	r3, [sp, #4]
  401410:	9b02      	ldr	r3, [sp, #8]
  401412:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401416:	930a      	str	r3, [sp, #40]	; 0x28
  401418:	f040 8217 	bne.w	40184a <_vfiprintf_r+0x6fe>
  40141c:	9b08      	ldr	r3, [sp, #32]
  40141e:	9a01      	ldr	r2, [sp, #4]
  401420:	1a9d      	subs	r5, r3, r2
  401422:	2d00      	cmp	r5, #0
  401424:	f340 8211 	ble.w	40184a <_vfiprintf_r+0x6fe>
  401428:	2d10      	cmp	r5, #16
  40142a:	f340 8490 	ble.w	401d4e <_vfiprintf_r+0xc02>
  40142e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401430:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401432:	4ec4      	ldr	r6, [pc, #784]	; (401744 <_vfiprintf_r+0x5f8>)
  401434:	46d6      	mov	lr, sl
  401436:	2710      	movs	r7, #16
  401438:	46a2      	mov	sl, r4
  40143a:	4619      	mov	r1, r3
  40143c:	9c06      	ldr	r4, [sp, #24]
  40143e:	e007      	b.n	401450 <_vfiprintf_r+0x304>
  401440:	f101 0c02 	add.w	ip, r1, #2
  401444:	f10e 0e08 	add.w	lr, lr, #8
  401448:	4601      	mov	r1, r0
  40144a:	3d10      	subs	r5, #16
  40144c:	2d10      	cmp	r5, #16
  40144e:	dd11      	ble.n	401474 <_vfiprintf_r+0x328>
  401450:	1c48      	adds	r0, r1, #1
  401452:	3210      	adds	r2, #16
  401454:	2807      	cmp	r0, #7
  401456:	9211      	str	r2, [sp, #68]	; 0x44
  401458:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40145c:	9010      	str	r0, [sp, #64]	; 0x40
  40145e:	ddef      	ble.n	401440 <_vfiprintf_r+0x2f4>
  401460:	2a00      	cmp	r2, #0
  401462:	f040 81e4 	bne.w	40182e <_vfiprintf_r+0x6e2>
  401466:	3d10      	subs	r5, #16
  401468:	2d10      	cmp	r5, #16
  40146a:	4611      	mov	r1, r2
  40146c:	f04f 0c01 	mov.w	ip, #1
  401470:	46ce      	mov	lr, r9
  401472:	dced      	bgt.n	401450 <_vfiprintf_r+0x304>
  401474:	4654      	mov	r4, sl
  401476:	4661      	mov	r1, ip
  401478:	46f2      	mov	sl, lr
  40147a:	442a      	add	r2, r5
  40147c:	2907      	cmp	r1, #7
  40147e:	9211      	str	r2, [sp, #68]	; 0x44
  401480:	f8ca 6000 	str.w	r6, [sl]
  401484:	f8ca 5004 	str.w	r5, [sl, #4]
  401488:	9110      	str	r1, [sp, #64]	; 0x40
  40148a:	f300 82ec 	bgt.w	401a66 <_vfiprintf_r+0x91a>
  40148e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401492:	f10a 0a08 	add.w	sl, sl, #8
  401496:	1c48      	adds	r0, r1, #1
  401498:	2d00      	cmp	r5, #0
  40149a:	f040 81de 	bne.w	40185a <_vfiprintf_r+0x70e>
  40149e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4014a0:	2b00      	cmp	r3, #0
  4014a2:	f000 81f8 	beq.w	401896 <_vfiprintf_r+0x74a>
  4014a6:	3202      	adds	r2, #2
  4014a8:	a90e      	add	r1, sp, #56	; 0x38
  4014aa:	2302      	movs	r3, #2
  4014ac:	2807      	cmp	r0, #7
  4014ae:	9211      	str	r2, [sp, #68]	; 0x44
  4014b0:	9010      	str	r0, [sp, #64]	; 0x40
  4014b2:	e88a 000a 	stmia.w	sl, {r1, r3}
  4014b6:	f340 81ea 	ble.w	40188e <_vfiprintf_r+0x742>
  4014ba:	2a00      	cmp	r2, #0
  4014bc:	f040 838c 	bne.w	401bd8 <_vfiprintf_r+0xa8c>
  4014c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4014c2:	2b80      	cmp	r3, #128	; 0x80
  4014c4:	f04f 0001 	mov.w	r0, #1
  4014c8:	4611      	mov	r1, r2
  4014ca:	46ca      	mov	sl, r9
  4014cc:	f040 81e7 	bne.w	40189e <_vfiprintf_r+0x752>
  4014d0:	9b08      	ldr	r3, [sp, #32]
  4014d2:	9d01      	ldr	r5, [sp, #4]
  4014d4:	1b5e      	subs	r6, r3, r5
  4014d6:	2e00      	cmp	r6, #0
  4014d8:	f340 81e1 	ble.w	40189e <_vfiprintf_r+0x752>
  4014dc:	2e10      	cmp	r6, #16
  4014de:	4d9a      	ldr	r5, [pc, #616]	; (401748 <_vfiprintf_r+0x5fc>)
  4014e0:	f340 8450 	ble.w	401d84 <_vfiprintf_r+0xc38>
  4014e4:	46d4      	mov	ip, sl
  4014e6:	2710      	movs	r7, #16
  4014e8:	46a2      	mov	sl, r4
  4014ea:	9c06      	ldr	r4, [sp, #24]
  4014ec:	e007      	b.n	4014fe <_vfiprintf_r+0x3b2>
  4014ee:	f101 0e02 	add.w	lr, r1, #2
  4014f2:	f10c 0c08 	add.w	ip, ip, #8
  4014f6:	4601      	mov	r1, r0
  4014f8:	3e10      	subs	r6, #16
  4014fa:	2e10      	cmp	r6, #16
  4014fc:	dd11      	ble.n	401522 <_vfiprintf_r+0x3d6>
  4014fe:	1c48      	adds	r0, r1, #1
  401500:	3210      	adds	r2, #16
  401502:	2807      	cmp	r0, #7
  401504:	9211      	str	r2, [sp, #68]	; 0x44
  401506:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40150a:	9010      	str	r0, [sp, #64]	; 0x40
  40150c:	ddef      	ble.n	4014ee <_vfiprintf_r+0x3a2>
  40150e:	2a00      	cmp	r2, #0
  401510:	f040 829d 	bne.w	401a4e <_vfiprintf_r+0x902>
  401514:	3e10      	subs	r6, #16
  401516:	2e10      	cmp	r6, #16
  401518:	f04f 0e01 	mov.w	lr, #1
  40151c:	4611      	mov	r1, r2
  40151e:	46cc      	mov	ip, r9
  401520:	dced      	bgt.n	4014fe <_vfiprintf_r+0x3b2>
  401522:	4654      	mov	r4, sl
  401524:	46e2      	mov	sl, ip
  401526:	4432      	add	r2, r6
  401528:	f1be 0f07 	cmp.w	lr, #7
  40152c:	9211      	str	r2, [sp, #68]	; 0x44
  40152e:	e88a 0060 	stmia.w	sl, {r5, r6}
  401532:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401536:	f300 8369 	bgt.w	401c0c <_vfiprintf_r+0xac0>
  40153a:	f10a 0a08 	add.w	sl, sl, #8
  40153e:	f10e 0001 	add.w	r0, lr, #1
  401542:	4671      	mov	r1, lr
  401544:	e1ab      	b.n	40189e <_vfiprintf_r+0x752>
  401546:	9608      	str	r6, [sp, #32]
  401548:	f013 0220 	ands.w	r2, r3, #32
  40154c:	f040 838c 	bne.w	401c68 <_vfiprintf_r+0xb1c>
  401550:	f013 0110 	ands.w	r1, r3, #16
  401554:	f040 831a 	bne.w	401b8c <_vfiprintf_r+0xa40>
  401558:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40155c:	f000 8316 	beq.w	401b8c <_vfiprintf_r+0xa40>
  401560:	9807      	ldr	r0, [sp, #28]
  401562:	460a      	mov	r2, r1
  401564:	4601      	mov	r1, r0
  401566:	3104      	adds	r1, #4
  401568:	8806      	ldrh	r6, [r0, #0]
  40156a:	9107      	str	r1, [sp, #28]
  40156c:	2700      	movs	r7, #0
  40156e:	e720      	b.n	4013b2 <_vfiprintf_r+0x266>
  401570:	9608      	str	r6, [sp, #32]
  401572:	f043 0310 	orr.w	r3, r3, #16
  401576:	e7e7      	b.n	401548 <_vfiprintf_r+0x3fc>
  401578:	9608      	str	r6, [sp, #32]
  40157a:	f043 0310 	orr.w	r3, r3, #16
  40157e:	e708      	b.n	401392 <_vfiprintf_r+0x246>
  401580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401584:	f898 2000 	ldrb.w	r2, [r8]
  401588:	e652      	b.n	401230 <_vfiprintf_r+0xe4>
  40158a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40158e:	2600      	movs	r6, #0
  401590:	f818 2b01 	ldrb.w	r2, [r8], #1
  401594:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401598:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40159c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4015a0:	2909      	cmp	r1, #9
  4015a2:	d9f5      	bls.n	401590 <_vfiprintf_r+0x444>
  4015a4:	e646      	b.n	401234 <_vfiprintf_r+0xe8>
  4015a6:	9608      	str	r6, [sp, #32]
  4015a8:	2800      	cmp	r0, #0
  4015aa:	f040 8408 	bne.w	401dbe <_vfiprintf_r+0xc72>
  4015ae:	f043 0310 	orr.w	r3, r3, #16
  4015b2:	069e      	lsls	r6, r3, #26
  4015b4:	f100 834c 	bmi.w	401c50 <_vfiprintf_r+0xb04>
  4015b8:	06dd      	lsls	r5, r3, #27
  4015ba:	f100 82f3 	bmi.w	401ba4 <_vfiprintf_r+0xa58>
  4015be:	0658      	lsls	r0, r3, #25
  4015c0:	f140 82f0 	bpl.w	401ba4 <_vfiprintf_r+0xa58>
  4015c4:	9d07      	ldr	r5, [sp, #28]
  4015c6:	f9b5 6000 	ldrsh.w	r6, [r5]
  4015ca:	462a      	mov	r2, r5
  4015cc:	17f7      	asrs	r7, r6, #31
  4015ce:	3204      	adds	r2, #4
  4015d0:	4630      	mov	r0, r6
  4015d2:	4639      	mov	r1, r7
  4015d4:	9207      	str	r2, [sp, #28]
  4015d6:	2800      	cmp	r0, #0
  4015d8:	f171 0200 	sbcs.w	r2, r1, #0
  4015dc:	f2c0 835d 	blt.w	401c9a <_vfiprintf_r+0xb4e>
  4015e0:	1c61      	adds	r1, r4, #1
  4015e2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4015e6:	f04f 0201 	mov.w	r2, #1
  4015ea:	f47f aeea 	bne.w	4013c2 <_vfiprintf_r+0x276>
  4015ee:	ea56 0107 	orrs.w	r1, r6, r7
  4015f2:	f000 824d 	beq.w	401a90 <_vfiprintf_r+0x944>
  4015f6:	9302      	str	r3, [sp, #8]
  4015f8:	2a01      	cmp	r2, #1
  4015fa:	f000 828c 	beq.w	401b16 <_vfiprintf_r+0x9ca>
  4015fe:	2a02      	cmp	r2, #2
  401600:	f040 825c 	bne.w	401abc <_vfiprintf_r+0x970>
  401604:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401606:	46cb      	mov	fp, r9
  401608:	0933      	lsrs	r3, r6, #4
  40160a:	f006 010f 	and.w	r1, r6, #15
  40160e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401612:	093a      	lsrs	r2, r7, #4
  401614:	461e      	mov	r6, r3
  401616:	4617      	mov	r7, r2
  401618:	5c43      	ldrb	r3, [r0, r1]
  40161a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40161e:	ea56 0307 	orrs.w	r3, r6, r7
  401622:	d1f1      	bne.n	401608 <_vfiprintf_r+0x4bc>
  401624:	eba9 030b 	sub.w	r3, r9, fp
  401628:	9305      	str	r3, [sp, #20]
  40162a:	e6e1      	b.n	4013f0 <_vfiprintf_r+0x2a4>
  40162c:	2800      	cmp	r0, #0
  40162e:	f040 83c0 	bne.w	401db2 <_vfiprintf_r+0xc66>
  401632:	0699      	lsls	r1, r3, #26
  401634:	f100 8367 	bmi.w	401d06 <_vfiprintf_r+0xbba>
  401638:	06da      	lsls	r2, r3, #27
  40163a:	f100 80f1 	bmi.w	401820 <_vfiprintf_r+0x6d4>
  40163e:	065b      	lsls	r3, r3, #25
  401640:	f140 80ee 	bpl.w	401820 <_vfiprintf_r+0x6d4>
  401644:	9a07      	ldr	r2, [sp, #28]
  401646:	6813      	ldr	r3, [r2, #0]
  401648:	3204      	adds	r2, #4
  40164a:	9207      	str	r2, [sp, #28]
  40164c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  401650:	801a      	strh	r2, [r3, #0]
  401652:	e5b8      	b.n	4011c6 <_vfiprintf_r+0x7a>
  401654:	9807      	ldr	r0, [sp, #28]
  401656:	4a3d      	ldr	r2, [pc, #244]	; (40174c <_vfiprintf_r+0x600>)
  401658:	9608      	str	r6, [sp, #32]
  40165a:	920b      	str	r2, [sp, #44]	; 0x2c
  40165c:	6806      	ldr	r6, [r0, #0]
  40165e:	2278      	movs	r2, #120	; 0x78
  401660:	2130      	movs	r1, #48	; 0x30
  401662:	3004      	adds	r0, #4
  401664:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401668:	f043 0302 	orr.w	r3, r3, #2
  40166c:	9007      	str	r0, [sp, #28]
  40166e:	2700      	movs	r7, #0
  401670:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401674:	2202      	movs	r2, #2
  401676:	e69c      	b.n	4013b2 <_vfiprintf_r+0x266>
  401678:	9608      	str	r6, [sp, #32]
  40167a:	2800      	cmp	r0, #0
  40167c:	d099      	beq.n	4015b2 <_vfiprintf_r+0x466>
  40167e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401682:	e796      	b.n	4015b2 <_vfiprintf_r+0x466>
  401684:	f898 2000 	ldrb.w	r2, [r8]
  401688:	2d00      	cmp	r5, #0
  40168a:	f47f add1 	bne.w	401230 <_vfiprintf_r+0xe4>
  40168e:	2001      	movs	r0, #1
  401690:	2520      	movs	r5, #32
  401692:	e5cd      	b.n	401230 <_vfiprintf_r+0xe4>
  401694:	f043 0301 	orr.w	r3, r3, #1
  401698:	f898 2000 	ldrb.w	r2, [r8]
  40169c:	e5c8      	b.n	401230 <_vfiprintf_r+0xe4>
  40169e:	9608      	str	r6, [sp, #32]
  4016a0:	2800      	cmp	r0, #0
  4016a2:	f040 8393 	bne.w	401dcc <_vfiprintf_r+0xc80>
  4016a6:	4929      	ldr	r1, [pc, #164]	; (40174c <_vfiprintf_r+0x600>)
  4016a8:	910b      	str	r1, [sp, #44]	; 0x2c
  4016aa:	069f      	lsls	r7, r3, #26
  4016ac:	f100 82e8 	bmi.w	401c80 <_vfiprintf_r+0xb34>
  4016b0:	9807      	ldr	r0, [sp, #28]
  4016b2:	06de      	lsls	r6, r3, #27
  4016b4:	4601      	mov	r1, r0
  4016b6:	f100 8270 	bmi.w	401b9a <_vfiprintf_r+0xa4e>
  4016ba:	065d      	lsls	r5, r3, #25
  4016bc:	f140 826d 	bpl.w	401b9a <_vfiprintf_r+0xa4e>
  4016c0:	3104      	adds	r1, #4
  4016c2:	8806      	ldrh	r6, [r0, #0]
  4016c4:	9107      	str	r1, [sp, #28]
  4016c6:	2700      	movs	r7, #0
  4016c8:	07d8      	lsls	r0, r3, #31
  4016ca:	f140 8222 	bpl.w	401b12 <_vfiprintf_r+0x9c6>
  4016ce:	ea56 0107 	orrs.w	r1, r6, r7
  4016d2:	f000 821e 	beq.w	401b12 <_vfiprintf_r+0x9c6>
  4016d6:	2130      	movs	r1, #48	; 0x30
  4016d8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4016dc:	f043 0302 	orr.w	r3, r3, #2
  4016e0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4016e4:	2202      	movs	r2, #2
  4016e6:	e664      	b.n	4013b2 <_vfiprintf_r+0x266>
  4016e8:	9608      	str	r6, [sp, #32]
  4016ea:	2800      	cmp	r0, #0
  4016ec:	f040 836b 	bne.w	401dc6 <_vfiprintf_r+0xc7a>
  4016f0:	4917      	ldr	r1, [pc, #92]	; (401750 <_vfiprintf_r+0x604>)
  4016f2:	910b      	str	r1, [sp, #44]	; 0x2c
  4016f4:	e7d9      	b.n	4016aa <_vfiprintf_r+0x55e>
  4016f6:	9907      	ldr	r1, [sp, #28]
  4016f8:	9608      	str	r6, [sp, #32]
  4016fa:	680a      	ldr	r2, [r1, #0]
  4016fc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401700:	f04f 0000 	mov.w	r0, #0
  401704:	460a      	mov	r2, r1
  401706:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40170a:	3204      	adds	r2, #4
  40170c:	2001      	movs	r0, #1
  40170e:	9001      	str	r0, [sp, #4]
  401710:	9207      	str	r2, [sp, #28]
  401712:	9005      	str	r0, [sp, #20]
  401714:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401718:	9302      	str	r3, [sp, #8]
  40171a:	2400      	movs	r4, #0
  40171c:	e670      	b.n	401400 <_vfiprintf_r+0x2b4>
  40171e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401722:	f898 2000 	ldrb.w	r2, [r8]
  401726:	e583      	b.n	401230 <_vfiprintf_r+0xe4>
  401728:	f898 2000 	ldrb.w	r2, [r8]
  40172c:	2a6c      	cmp	r2, #108	; 0x6c
  40172e:	bf03      	ittte	eq
  401730:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  401734:	f043 0320 	orreq.w	r3, r3, #32
  401738:	f108 0801 	addeq.w	r8, r8, #1
  40173c:	f043 0310 	orrne.w	r3, r3, #16
  401740:	e576      	b.n	401230 <_vfiprintf_r+0xe4>
  401742:	bf00      	nop
  401744:	00403dd0 	.word	0x00403dd0
  401748:	00403de0 	.word	0x00403de0
  40174c:	00403db4 	.word	0x00403db4
  401750:	00403da0 	.word	0x00403da0
  401754:	9907      	ldr	r1, [sp, #28]
  401756:	680e      	ldr	r6, [r1, #0]
  401758:	460a      	mov	r2, r1
  40175a:	2e00      	cmp	r6, #0
  40175c:	f102 0204 	add.w	r2, r2, #4
  401760:	f6ff ae0f 	blt.w	401382 <_vfiprintf_r+0x236>
  401764:	9207      	str	r2, [sp, #28]
  401766:	f898 2000 	ldrb.w	r2, [r8]
  40176a:	e561      	b.n	401230 <_vfiprintf_r+0xe4>
  40176c:	f898 2000 	ldrb.w	r2, [r8]
  401770:	2001      	movs	r0, #1
  401772:	252b      	movs	r5, #43	; 0x2b
  401774:	e55c      	b.n	401230 <_vfiprintf_r+0xe4>
  401776:	9907      	ldr	r1, [sp, #28]
  401778:	9608      	str	r6, [sp, #32]
  40177a:	f8d1 b000 	ldr.w	fp, [r1]
  40177e:	f04f 0200 	mov.w	r2, #0
  401782:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401786:	1d0e      	adds	r6, r1, #4
  401788:	f1bb 0f00 	cmp.w	fp, #0
  40178c:	f000 82e5 	beq.w	401d5a <_vfiprintf_r+0xc0e>
  401790:	1c67      	adds	r7, r4, #1
  401792:	f000 82c4 	beq.w	401d1e <_vfiprintf_r+0xbd2>
  401796:	4622      	mov	r2, r4
  401798:	2100      	movs	r1, #0
  40179a:	4658      	mov	r0, fp
  40179c:	9301      	str	r3, [sp, #4]
  40179e:	f001 fbd7 	bl	402f50 <memchr>
  4017a2:	9b01      	ldr	r3, [sp, #4]
  4017a4:	2800      	cmp	r0, #0
  4017a6:	f000 82e5 	beq.w	401d74 <_vfiprintf_r+0xc28>
  4017aa:	eba0 020b 	sub.w	r2, r0, fp
  4017ae:	9205      	str	r2, [sp, #20]
  4017b0:	9607      	str	r6, [sp, #28]
  4017b2:	9302      	str	r3, [sp, #8]
  4017b4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4017b8:	2400      	movs	r4, #0
  4017ba:	e619      	b.n	4013f0 <_vfiprintf_r+0x2a4>
  4017bc:	f898 2000 	ldrb.w	r2, [r8]
  4017c0:	2a2a      	cmp	r2, #42	; 0x2a
  4017c2:	f108 0701 	add.w	r7, r8, #1
  4017c6:	f000 82e9 	beq.w	401d9c <_vfiprintf_r+0xc50>
  4017ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4017ce:	2909      	cmp	r1, #9
  4017d0:	46b8      	mov	r8, r7
  4017d2:	f04f 0400 	mov.w	r4, #0
  4017d6:	f63f ad2d 	bhi.w	401234 <_vfiprintf_r+0xe8>
  4017da:	f818 2b01 	ldrb.w	r2, [r8], #1
  4017de:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4017e2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4017e6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4017ea:	2909      	cmp	r1, #9
  4017ec:	d9f5      	bls.n	4017da <_vfiprintf_r+0x68e>
  4017ee:	e521      	b.n	401234 <_vfiprintf_r+0xe8>
  4017f0:	f043 0320 	orr.w	r3, r3, #32
  4017f4:	f898 2000 	ldrb.w	r2, [r8]
  4017f8:	e51a      	b.n	401230 <_vfiprintf_r+0xe4>
  4017fa:	9608      	str	r6, [sp, #32]
  4017fc:	2800      	cmp	r0, #0
  4017fe:	f040 82db 	bne.w	401db8 <_vfiprintf_r+0xc6c>
  401802:	2a00      	cmp	r2, #0
  401804:	f000 80e7 	beq.w	4019d6 <_vfiprintf_r+0x88a>
  401808:	2101      	movs	r1, #1
  40180a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40180e:	f04f 0200 	mov.w	r2, #0
  401812:	9101      	str	r1, [sp, #4]
  401814:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401818:	9105      	str	r1, [sp, #20]
  40181a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40181e:	e77b      	b.n	401718 <_vfiprintf_r+0x5cc>
  401820:	9a07      	ldr	r2, [sp, #28]
  401822:	6813      	ldr	r3, [r2, #0]
  401824:	3204      	adds	r2, #4
  401826:	9207      	str	r2, [sp, #28]
  401828:	9a03      	ldr	r2, [sp, #12]
  40182a:	601a      	str	r2, [r3, #0]
  40182c:	e4cb      	b.n	4011c6 <_vfiprintf_r+0x7a>
  40182e:	aa0f      	add	r2, sp, #60	; 0x3c
  401830:	9904      	ldr	r1, [sp, #16]
  401832:	4620      	mov	r0, r4
  401834:	f7ff fc4a 	bl	4010cc <__sprint_r.part.0>
  401838:	2800      	cmp	r0, #0
  40183a:	f040 8139 	bne.w	401ab0 <_vfiprintf_r+0x964>
  40183e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401840:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401842:	f101 0c01 	add.w	ip, r1, #1
  401846:	46ce      	mov	lr, r9
  401848:	e5ff      	b.n	40144a <_vfiprintf_r+0x2fe>
  40184a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40184c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40184e:	1c48      	adds	r0, r1, #1
  401850:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401854:	2d00      	cmp	r5, #0
  401856:	f43f ae22 	beq.w	40149e <_vfiprintf_r+0x352>
  40185a:	3201      	adds	r2, #1
  40185c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  401860:	2101      	movs	r1, #1
  401862:	2807      	cmp	r0, #7
  401864:	9211      	str	r2, [sp, #68]	; 0x44
  401866:	9010      	str	r0, [sp, #64]	; 0x40
  401868:	f8ca 5000 	str.w	r5, [sl]
  40186c:	f8ca 1004 	str.w	r1, [sl, #4]
  401870:	f340 8108 	ble.w	401a84 <_vfiprintf_r+0x938>
  401874:	2a00      	cmp	r2, #0
  401876:	f040 81bc 	bne.w	401bf2 <_vfiprintf_r+0xaa6>
  40187a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40187c:	2b00      	cmp	r3, #0
  40187e:	f43f ae1f 	beq.w	4014c0 <_vfiprintf_r+0x374>
  401882:	ab0e      	add	r3, sp, #56	; 0x38
  401884:	2202      	movs	r2, #2
  401886:	4608      	mov	r0, r1
  401888:	931c      	str	r3, [sp, #112]	; 0x70
  40188a:	921d      	str	r2, [sp, #116]	; 0x74
  40188c:	46ca      	mov	sl, r9
  40188e:	4601      	mov	r1, r0
  401890:	f10a 0a08 	add.w	sl, sl, #8
  401894:	3001      	adds	r0, #1
  401896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401898:	2b80      	cmp	r3, #128	; 0x80
  40189a:	f43f ae19 	beq.w	4014d0 <_vfiprintf_r+0x384>
  40189e:	9b05      	ldr	r3, [sp, #20]
  4018a0:	1ae4      	subs	r4, r4, r3
  4018a2:	2c00      	cmp	r4, #0
  4018a4:	dd2e      	ble.n	401904 <_vfiprintf_r+0x7b8>
  4018a6:	2c10      	cmp	r4, #16
  4018a8:	4db3      	ldr	r5, [pc, #716]	; (401b78 <_vfiprintf_r+0xa2c>)
  4018aa:	dd1e      	ble.n	4018ea <_vfiprintf_r+0x79e>
  4018ac:	46d6      	mov	lr, sl
  4018ae:	2610      	movs	r6, #16
  4018b0:	9f06      	ldr	r7, [sp, #24]
  4018b2:	f8dd a010 	ldr.w	sl, [sp, #16]
  4018b6:	e006      	b.n	4018c6 <_vfiprintf_r+0x77a>
  4018b8:	1c88      	adds	r0, r1, #2
  4018ba:	f10e 0e08 	add.w	lr, lr, #8
  4018be:	4619      	mov	r1, r3
  4018c0:	3c10      	subs	r4, #16
  4018c2:	2c10      	cmp	r4, #16
  4018c4:	dd10      	ble.n	4018e8 <_vfiprintf_r+0x79c>
  4018c6:	1c4b      	adds	r3, r1, #1
  4018c8:	3210      	adds	r2, #16
  4018ca:	2b07      	cmp	r3, #7
  4018cc:	9211      	str	r2, [sp, #68]	; 0x44
  4018ce:	e88e 0060 	stmia.w	lr, {r5, r6}
  4018d2:	9310      	str	r3, [sp, #64]	; 0x40
  4018d4:	ddf0      	ble.n	4018b8 <_vfiprintf_r+0x76c>
  4018d6:	2a00      	cmp	r2, #0
  4018d8:	d165      	bne.n	4019a6 <_vfiprintf_r+0x85a>
  4018da:	3c10      	subs	r4, #16
  4018dc:	2c10      	cmp	r4, #16
  4018de:	f04f 0001 	mov.w	r0, #1
  4018e2:	4611      	mov	r1, r2
  4018e4:	46ce      	mov	lr, r9
  4018e6:	dcee      	bgt.n	4018c6 <_vfiprintf_r+0x77a>
  4018e8:	46f2      	mov	sl, lr
  4018ea:	4422      	add	r2, r4
  4018ec:	2807      	cmp	r0, #7
  4018ee:	9211      	str	r2, [sp, #68]	; 0x44
  4018f0:	f8ca 5000 	str.w	r5, [sl]
  4018f4:	f8ca 4004 	str.w	r4, [sl, #4]
  4018f8:	9010      	str	r0, [sp, #64]	; 0x40
  4018fa:	f300 8085 	bgt.w	401a08 <_vfiprintf_r+0x8bc>
  4018fe:	f10a 0a08 	add.w	sl, sl, #8
  401902:	3001      	adds	r0, #1
  401904:	9905      	ldr	r1, [sp, #20]
  401906:	f8ca b000 	str.w	fp, [sl]
  40190a:	440a      	add	r2, r1
  40190c:	2807      	cmp	r0, #7
  40190e:	9211      	str	r2, [sp, #68]	; 0x44
  401910:	f8ca 1004 	str.w	r1, [sl, #4]
  401914:	9010      	str	r0, [sp, #64]	; 0x40
  401916:	f340 8082 	ble.w	401a1e <_vfiprintf_r+0x8d2>
  40191a:	2a00      	cmp	r2, #0
  40191c:	f040 8118 	bne.w	401b50 <_vfiprintf_r+0xa04>
  401920:	9b02      	ldr	r3, [sp, #8]
  401922:	9210      	str	r2, [sp, #64]	; 0x40
  401924:	0758      	lsls	r0, r3, #29
  401926:	d535      	bpl.n	401994 <_vfiprintf_r+0x848>
  401928:	9b08      	ldr	r3, [sp, #32]
  40192a:	9901      	ldr	r1, [sp, #4]
  40192c:	1a5c      	subs	r4, r3, r1
  40192e:	2c00      	cmp	r4, #0
  401930:	f340 80e7 	ble.w	401b02 <_vfiprintf_r+0x9b6>
  401934:	46ca      	mov	sl, r9
  401936:	2c10      	cmp	r4, #16
  401938:	f340 8218 	ble.w	401d6c <_vfiprintf_r+0xc20>
  40193c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40193e:	4e8f      	ldr	r6, [pc, #572]	; (401b7c <_vfiprintf_r+0xa30>)
  401940:	9f06      	ldr	r7, [sp, #24]
  401942:	f8dd b010 	ldr.w	fp, [sp, #16]
  401946:	2510      	movs	r5, #16
  401948:	e006      	b.n	401958 <_vfiprintf_r+0x80c>
  40194a:	1c88      	adds	r0, r1, #2
  40194c:	f10a 0a08 	add.w	sl, sl, #8
  401950:	4619      	mov	r1, r3
  401952:	3c10      	subs	r4, #16
  401954:	2c10      	cmp	r4, #16
  401956:	dd11      	ble.n	40197c <_vfiprintf_r+0x830>
  401958:	1c4b      	adds	r3, r1, #1
  40195a:	3210      	adds	r2, #16
  40195c:	2b07      	cmp	r3, #7
  40195e:	9211      	str	r2, [sp, #68]	; 0x44
  401960:	f8ca 6000 	str.w	r6, [sl]
  401964:	f8ca 5004 	str.w	r5, [sl, #4]
  401968:	9310      	str	r3, [sp, #64]	; 0x40
  40196a:	ddee      	ble.n	40194a <_vfiprintf_r+0x7fe>
  40196c:	bb42      	cbnz	r2, 4019c0 <_vfiprintf_r+0x874>
  40196e:	3c10      	subs	r4, #16
  401970:	2c10      	cmp	r4, #16
  401972:	f04f 0001 	mov.w	r0, #1
  401976:	4611      	mov	r1, r2
  401978:	46ca      	mov	sl, r9
  40197a:	dced      	bgt.n	401958 <_vfiprintf_r+0x80c>
  40197c:	4422      	add	r2, r4
  40197e:	2807      	cmp	r0, #7
  401980:	9211      	str	r2, [sp, #68]	; 0x44
  401982:	f8ca 6000 	str.w	r6, [sl]
  401986:	f8ca 4004 	str.w	r4, [sl, #4]
  40198a:	9010      	str	r0, [sp, #64]	; 0x40
  40198c:	dd51      	ble.n	401a32 <_vfiprintf_r+0x8e6>
  40198e:	2a00      	cmp	r2, #0
  401990:	f040 819b 	bne.w	401cca <_vfiprintf_r+0xb7e>
  401994:	9b03      	ldr	r3, [sp, #12]
  401996:	9a08      	ldr	r2, [sp, #32]
  401998:	9901      	ldr	r1, [sp, #4]
  40199a:	428a      	cmp	r2, r1
  40199c:	bfac      	ite	ge
  40199e:	189b      	addge	r3, r3, r2
  4019a0:	185b      	addlt	r3, r3, r1
  4019a2:	9303      	str	r3, [sp, #12]
  4019a4:	e04e      	b.n	401a44 <_vfiprintf_r+0x8f8>
  4019a6:	aa0f      	add	r2, sp, #60	; 0x3c
  4019a8:	4651      	mov	r1, sl
  4019aa:	4638      	mov	r0, r7
  4019ac:	f7ff fb8e 	bl	4010cc <__sprint_r.part.0>
  4019b0:	2800      	cmp	r0, #0
  4019b2:	f040 813f 	bne.w	401c34 <_vfiprintf_r+0xae8>
  4019b6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4019b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4019ba:	1c48      	adds	r0, r1, #1
  4019bc:	46ce      	mov	lr, r9
  4019be:	e77f      	b.n	4018c0 <_vfiprintf_r+0x774>
  4019c0:	aa0f      	add	r2, sp, #60	; 0x3c
  4019c2:	4659      	mov	r1, fp
  4019c4:	4638      	mov	r0, r7
  4019c6:	f7ff fb81 	bl	4010cc <__sprint_r.part.0>
  4019ca:	b960      	cbnz	r0, 4019e6 <_vfiprintf_r+0x89a>
  4019cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4019ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4019d0:	1c48      	adds	r0, r1, #1
  4019d2:	46ca      	mov	sl, r9
  4019d4:	e7bd      	b.n	401952 <_vfiprintf_r+0x806>
  4019d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4019d8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4019dc:	2b00      	cmp	r3, #0
  4019de:	f040 81d4 	bne.w	401d8a <_vfiprintf_r+0xc3e>
  4019e2:	2300      	movs	r3, #0
  4019e4:	9310      	str	r3, [sp, #64]	; 0x40
  4019e6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4019ea:	f013 0f01 	tst.w	r3, #1
  4019ee:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4019f2:	d102      	bne.n	4019fa <_vfiprintf_r+0x8ae>
  4019f4:	059a      	lsls	r2, r3, #22
  4019f6:	f140 80de 	bpl.w	401bb6 <_vfiprintf_r+0xa6a>
  4019fa:	065b      	lsls	r3, r3, #25
  4019fc:	f53f acb2 	bmi.w	401364 <_vfiprintf_r+0x218>
  401a00:	9803      	ldr	r0, [sp, #12]
  401a02:	b02d      	add	sp, #180	; 0xb4
  401a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a08:	2a00      	cmp	r2, #0
  401a0a:	f040 8106 	bne.w	401c1a <_vfiprintf_r+0xace>
  401a0e:	9a05      	ldr	r2, [sp, #20]
  401a10:	921d      	str	r2, [sp, #116]	; 0x74
  401a12:	2301      	movs	r3, #1
  401a14:	9211      	str	r2, [sp, #68]	; 0x44
  401a16:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  401a1a:	9310      	str	r3, [sp, #64]	; 0x40
  401a1c:	46ca      	mov	sl, r9
  401a1e:	f10a 0a08 	add.w	sl, sl, #8
  401a22:	9b02      	ldr	r3, [sp, #8]
  401a24:	0759      	lsls	r1, r3, #29
  401a26:	d504      	bpl.n	401a32 <_vfiprintf_r+0x8e6>
  401a28:	9b08      	ldr	r3, [sp, #32]
  401a2a:	9901      	ldr	r1, [sp, #4]
  401a2c:	1a5c      	subs	r4, r3, r1
  401a2e:	2c00      	cmp	r4, #0
  401a30:	dc81      	bgt.n	401936 <_vfiprintf_r+0x7ea>
  401a32:	9b03      	ldr	r3, [sp, #12]
  401a34:	9908      	ldr	r1, [sp, #32]
  401a36:	9801      	ldr	r0, [sp, #4]
  401a38:	4281      	cmp	r1, r0
  401a3a:	bfac      	ite	ge
  401a3c:	185b      	addge	r3, r3, r1
  401a3e:	181b      	addlt	r3, r3, r0
  401a40:	9303      	str	r3, [sp, #12]
  401a42:	bb72      	cbnz	r2, 401aa2 <_vfiprintf_r+0x956>
  401a44:	2300      	movs	r3, #0
  401a46:	9310      	str	r3, [sp, #64]	; 0x40
  401a48:	46ca      	mov	sl, r9
  401a4a:	f7ff bbbc 	b.w	4011c6 <_vfiprintf_r+0x7a>
  401a4e:	aa0f      	add	r2, sp, #60	; 0x3c
  401a50:	9904      	ldr	r1, [sp, #16]
  401a52:	4620      	mov	r0, r4
  401a54:	f7ff fb3a 	bl	4010cc <__sprint_r.part.0>
  401a58:	bb50      	cbnz	r0, 401ab0 <_vfiprintf_r+0x964>
  401a5a:	9910      	ldr	r1, [sp, #64]	; 0x40
  401a5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401a5e:	f101 0e01 	add.w	lr, r1, #1
  401a62:	46cc      	mov	ip, r9
  401a64:	e548      	b.n	4014f8 <_vfiprintf_r+0x3ac>
  401a66:	2a00      	cmp	r2, #0
  401a68:	f040 8140 	bne.w	401cec <_vfiprintf_r+0xba0>
  401a6c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  401a70:	2900      	cmp	r1, #0
  401a72:	f000 811b 	beq.w	401cac <_vfiprintf_r+0xb60>
  401a76:	2201      	movs	r2, #1
  401a78:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  401a7c:	4610      	mov	r0, r2
  401a7e:	921d      	str	r2, [sp, #116]	; 0x74
  401a80:	911c      	str	r1, [sp, #112]	; 0x70
  401a82:	46ca      	mov	sl, r9
  401a84:	4601      	mov	r1, r0
  401a86:	f10a 0a08 	add.w	sl, sl, #8
  401a8a:	3001      	adds	r0, #1
  401a8c:	e507      	b.n	40149e <_vfiprintf_r+0x352>
  401a8e:	9b02      	ldr	r3, [sp, #8]
  401a90:	2a01      	cmp	r2, #1
  401a92:	f000 8098 	beq.w	401bc6 <_vfiprintf_r+0xa7a>
  401a96:	2a02      	cmp	r2, #2
  401a98:	d10d      	bne.n	401ab6 <_vfiprintf_r+0x96a>
  401a9a:	9302      	str	r3, [sp, #8]
  401a9c:	2600      	movs	r6, #0
  401a9e:	2700      	movs	r7, #0
  401aa0:	e5b0      	b.n	401604 <_vfiprintf_r+0x4b8>
  401aa2:	aa0f      	add	r2, sp, #60	; 0x3c
  401aa4:	9904      	ldr	r1, [sp, #16]
  401aa6:	9806      	ldr	r0, [sp, #24]
  401aa8:	f7ff fb10 	bl	4010cc <__sprint_r.part.0>
  401aac:	2800      	cmp	r0, #0
  401aae:	d0c9      	beq.n	401a44 <_vfiprintf_r+0x8f8>
  401ab0:	f8dd b010 	ldr.w	fp, [sp, #16]
  401ab4:	e797      	b.n	4019e6 <_vfiprintf_r+0x89a>
  401ab6:	9302      	str	r3, [sp, #8]
  401ab8:	2600      	movs	r6, #0
  401aba:	2700      	movs	r7, #0
  401abc:	4649      	mov	r1, r9
  401abe:	e000      	b.n	401ac2 <_vfiprintf_r+0x976>
  401ac0:	4659      	mov	r1, fp
  401ac2:	08f2      	lsrs	r2, r6, #3
  401ac4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401ac8:	08f8      	lsrs	r0, r7, #3
  401aca:	f006 0307 	and.w	r3, r6, #7
  401ace:	4607      	mov	r7, r0
  401ad0:	4616      	mov	r6, r2
  401ad2:	3330      	adds	r3, #48	; 0x30
  401ad4:	ea56 0207 	orrs.w	r2, r6, r7
  401ad8:	f801 3c01 	strb.w	r3, [r1, #-1]
  401adc:	f101 3bff 	add.w	fp, r1, #4294967295
  401ae0:	d1ee      	bne.n	401ac0 <_vfiprintf_r+0x974>
  401ae2:	9a02      	ldr	r2, [sp, #8]
  401ae4:	07d6      	lsls	r6, r2, #31
  401ae6:	f57f ad9d 	bpl.w	401624 <_vfiprintf_r+0x4d8>
  401aea:	2b30      	cmp	r3, #48	; 0x30
  401aec:	f43f ad9a 	beq.w	401624 <_vfiprintf_r+0x4d8>
  401af0:	3902      	subs	r1, #2
  401af2:	2330      	movs	r3, #48	; 0x30
  401af4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  401af8:	eba9 0301 	sub.w	r3, r9, r1
  401afc:	9305      	str	r3, [sp, #20]
  401afe:	468b      	mov	fp, r1
  401b00:	e476      	b.n	4013f0 <_vfiprintf_r+0x2a4>
  401b02:	9b03      	ldr	r3, [sp, #12]
  401b04:	9a08      	ldr	r2, [sp, #32]
  401b06:	428a      	cmp	r2, r1
  401b08:	bfac      	ite	ge
  401b0a:	189b      	addge	r3, r3, r2
  401b0c:	185b      	addlt	r3, r3, r1
  401b0e:	9303      	str	r3, [sp, #12]
  401b10:	e798      	b.n	401a44 <_vfiprintf_r+0x8f8>
  401b12:	2202      	movs	r2, #2
  401b14:	e44d      	b.n	4013b2 <_vfiprintf_r+0x266>
  401b16:	2f00      	cmp	r7, #0
  401b18:	bf08      	it	eq
  401b1a:	2e0a      	cmpeq	r6, #10
  401b1c:	d352      	bcc.n	401bc4 <_vfiprintf_r+0xa78>
  401b1e:	46cb      	mov	fp, r9
  401b20:	4630      	mov	r0, r6
  401b22:	4639      	mov	r1, r7
  401b24:	220a      	movs	r2, #10
  401b26:	2300      	movs	r3, #0
  401b28:	f001 ffa6 	bl	403a78 <__aeabi_uldivmod>
  401b2c:	3230      	adds	r2, #48	; 0x30
  401b2e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  401b32:	4630      	mov	r0, r6
  401b34:	4639      	mov	r1, r7
  401b36:	2300      	movs	r3, #0
  401b38:	220a      	movs	r2, #10
  401b3a:	f001 ff9d 	bl	403a78 <__aeabi_uldivmod>
  401b3e:	4606      	mov	r6, r0
  401b40:	460f      	mov	r7, r1
  401b42:	ea56 0307 	orrs.w	r3, r6, r7
  401b46:	d1eb      	bne.n	401b20 <_vfiprintf_r+0x9d4>
  401b48:	e56c      	b.n	401624 <_vfiprintf_r+0x4d8>
  401b4a:	9405      	str	r4, [sp, #20]
  401b4c:	46cb      	mov	fp, r9
  401b4e:	e44f      	b.n	4013f0 <_vfiprintf_r+0x2a4>
  401b50:	aa0f      	add	r2, sp, #60	; 0x3c
  401b52:	9904      	ldr	r1, [sp, #16]
  401b54:	9806      	ldr	r0, [sp, #24]
  401b56:	f7ff fab9 	bl	4010cc <__sprint_r.part.0>
  401b5a:	2800      	cmp	r0, #0
  401b5c:	d1a8      	bne.n	401ab0 <_vfiprintf_r+0x964>
  401b5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401b60:	46ca      	mov	sl, r9
  401b62:	e75e      	b.n	401a22 <_vfiprintf_r+0x8d6>
  401b64:	aa0f      	add	r2, sp, #60	; 0x3c
  401b66:	9904      	ldr	r1, [sp, #16]
  401b68:	9806      	ldr	r0, [sp, #24]
  401b6a:	f7ff faaf 	bl	4010cc <__sprint_r.part.0>
  401b6e:	2800      	cmp	r0, #0
  401b70:	d19e      	bne.n	401ab0 <_vfiprintf_r+0x964>
  401b72:	46ca      	mov	sl, r9
  401b74:	f7ff bbc0 	b.w	4012f8 <_vfiprintf_r+0x1ac>
  401b78:	00403de0 	.word	0x00403de0
  401b7c:	00403dd0 	.word	0x00403dd0
  401b80:	3104      	adds	r1, #4
  401b82:	6816      	ldr	r6, [r2, #0]
  401b84:	9107      	str	r1, [sp, #28]
  401b86:	2201      	movs	r2, #1
  401b88:	2700      	movs	r7, #0
  401b8a:	e412      	b.n	4013b2 <_vfiprintf_r+0x266>
  401b8c:	9807      	ldr	r0, [sp, #28]
  401b8e:	4601      	mov	r1, r0
  401b90:	3104      	adds	r1, #4
  401b92:	6806      	ldr	r6, [r0, #0]
  401b94:	9107      	str	r1, [sp, #28]
  401b96:	2700      	movs	r7, #0
  401b98:	e40b      	b.n	4013b2 <_vfiprintf_r+0x266>
  401b9a:	680e      	ldr	r6, [r1, #0]
  401b9c:	3104      	adds	r1, #4
  401b9e:	9107      	str	r1, [sp, #28]
  401ba0:	2700      	movs	r7, #0
  401ba2:	e591      	b.n	4016c8 <_vfiprintf_r+0x57c>
  401ba4:	9907      	ldr	r1, [sp, #28]
  401ba6:	680e      	ldr	r6, [r1, #0]
  401ba8:	460a      	mov	r2, r1
  401baa:	17f7      	asrs	r7, r6, #31
  401bac:	3204      	adds	r2, #4
  401bae:	9207      	str	r2, [sp, #28]
  401bb0:	4630      	mov	r0, r6
  401bb2:	4639      	mov	r1, r7
  401bb4:	e50f      	b.n	4015d6 <_vfiprintf_r+0x48a>
  401bb6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401bba:	f000 fe7f 	bl	4028bc <__retarget_lock_release_recursive>
  401bbe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401bc2:	e71a      	b.n	4019fa <_vfiprintf_r+0x8ae>
  401bc4:	9b02      	ldr	r3, [sp, #8]
  401bc6:	9302      	str	r3, [sp, #8]
  401bc8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401bcc:	3630      	adds	r6, #48	; 0x30
  401bce:	2301      	movs	r3, #1
  401bd0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  401bd4:	9305      	str	r3, [sp, #20]
  401bd6:	e40b      	b.n	4013f0 <_vfiprintf_r+0x2a4>
  401bd8:	aa0f      	add	r2, sp, #60	; 0x3c
  401bda:	9904      	ldr	r1, [sp, #16]
  401bdc:	9806      	ldr	r0, [sp, #24]
  401bde:	f7ff fa75 	bl	4010cc <__sprint_r.part.0>
  401be2:	2800      	cmp	r0, #0
  401be4:	f47f af64 	bne.w	401ab0 <_vfiprintf_r+0x964>
  401be8:	9910      	ldr	r1, [sp, #64]	; 0x40
  401bea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401bec:	1c48      	adds	r0, r1, #1
  401bee:	46ca      	mov	sl, r9
  401bf0:	e651      	b.n	401896 <_vfiprintf_r+0x74a>
  401bf2:	aa0f      	add	r2, sp, #60	; 0x3c
  401bf4:	9904      	ldr	r1, [sp, #16]
  401bf6:	9806      	ldr	r0, [sp, #24]
  401bf8:	f7ff fa68 	bl	4010cc <__sprint_r.part.0>
  401bfc:	2800      	cmp	r0, #0
  401bfe:	f47f af57 	bne.w	401ab0 <_vfiprintf_r+0x964>
  401c02:	9910      	ldr	r1, [sp, #64]	; 0x40
  401c04:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c06:	1c48      	adds	r0, r1, #1
  401c08:	46ca      	mov	sl, r9
  401c0a:	e448      	b.n	40149e <_vfiprintf_r+0x352>
  401c0c:	2a00      	cmp	r2, #0
  401c0e:	f040 8091 	bne.w	401d34 <_vfiprintf_r+0xbe8>
  401c12:	2001      	movs	r0, #1
  401c14:	4611      	mov	r1, r2
  401c16:	46ca      	mov	sl, r9
  401c18:	e641      	b.n	40189e <_vfiprintf_r+0x752>
  401c1a:	aa0f      	add	r2, sp, #60	; 0x3c
  401c1c:	9904      	ldr	r1, [sp, #16]
  401c1e:	9806      	ldr	r0, [sp, #24]
  401c20:	f7ff fa54 	bl	4010cc <__sprint_r.part.0>
  401c24:	2800      	cmp	r0, #0
  401c26:	f47f af43 	bne.w	401ab0 <_vfiprintf_r+0x964>
  401c2a:	9810      	ldr	r0, [sp, #64]	; 0x40
  401c2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c2e:	3001      	adds	r0, #1
  401c30:	46ca      	mov	sl, r9
  401c32:	e667      	b.n	401904 <_vfiprintf_r+0x7b8>
  401c34:	46d3      	mov	fp, sl
  401c36:	e6d6      	b.n	4019e6 <_vfiprintf_r+0x89a>
  401c38:	9e07      	ldr	r6, [sp, #28]
  401c3a:	3607      	adds	r6, #7
  401c3c:	f026 0207 	bic.w	r2, r6, #7
  401c40:	f102 0108 	add.w	r1, r2, #8
  401c44:	e9d2 6700 	ldrd	r6, r7, [r2]
  401c48:	9107      	str	r1, [sp, #28]
  401c4a:	2201      	movs	r2, #1
  401c4c:	f7ff bbb1 	b.w	4013b2 <_vfiprintf_r+0x266>
  401c50:	9e07      	ldr	r6, [sp, #28]
  401c52:	3607      	adds	r6, #7
  401c54:	f026 0607 	bic.w	r6, r6, #7
  401c58:	e9d6 0100 	ldrd	r0, r1, [r6]
  401c5c:	f106 0208 	add.w	r2, r6, #8
  401c60:	9207      	str	r2, [sp, #28]
  401c62:	4606      	mov	r6, r0
  401c64:	460f      	mov	r7, r1
  401c66:	e4b6      	b.n	4015d6 <_vfiprintf_r+0x48a>
  401c68:	9e07      	ldr	r6, [sp, #28]
  401c6a:	3607      	adds	r6, #7
  401c6c:	f026 0207 	bic.w	r2, r6, #7
  401c70:	f102 0108 	add.w	r1, r2, #8
  401c74:	e9d2 6700 	ldrd	r6, r7, [r2]
  401c78:	9107      	str	r1, [sp, #28]
  401c7a:	2200      	movs	r2, #0
  401c7c:	f7ff bb99 	b.w	4013b2 <_vfiprintf_r+0x266>
  401c80:	9e07      	ldr	r6, [sp, #28]
  401c82:	3607      	adds	r6, #7
  401c84:	f026 0107 	bic.w	r1, r6, #7
  401c88:	f101 0008 	add.w	r0, r1, #8
  401c8c:	9007      	str	r0, [sp, #28]
  401c8e:	e9d1 6700 	ldrd	r6, r7, [r1]
  401c92:	e519      	b.n	4016c8 <_vfiprintf_r+0x57c>
  401c94:	46cb      	mov	fp, r9
  401c96:	f7ff bbab 	b.w	4013f0 <_vfiprintf_r+0x2a4>
  401c9a:	252d      	movs	r5, #45	; 0x2d
  401c9c:	4276      	negs	r6, r6
  401c9e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  401ca2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401ca6:	2201      	movs	r2, #1
  401ca8:	f7ff bb88 	b.w	4013bc <_vfiprintf_r+0x270>
  401cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401cae:	b9b3      	cbnz	r3, 401cde <_vfiprintf_r+0xb92>
  401cb0:	4611      	mov	r1, r2
  401cb2:	2001      	movs	r0, #1
  401cb4:	46ca      	mov	sl, r9
  401cb6:	e5f2      	b.n	40189e <_vfiprintf_r+0x752>
  401cb8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401cbc:	f000 fdfe 	bl	4028bc <__retarget_lock_release_recursive>
  401cc0:	f04f 33ff 	mov.w	r3, #4294967295
  401cc4:	9303      	str	r3, [sp, #12]
  401cc6:	f7ff bb50 	b.w	40136a <_vfiprintf_r+0x21e>
  401cca:	aa0f      	add	r2, sp, #60	; 0x3c
  401ccc:	9904      	ldr	r1, [sp, #16]
  401cce:	9806      	ldr	r0, [sp, #24]
  401cd0:	f7ff f9fc 	bl	4010cc <__sprint_r.part.0>
  401cd4:	2800      	cmp	r0, #0
  401cd6:	f47f aeeb 	bne.w	401ab0 <_vfiprintf_r+0x964>
  401cda:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401cdc:	e6a9      	b.n	401a32 <_vfiprintf_r+0x8e6>
  401cde:	ab0e      	add	r3, sp, #56	; 0x38
  401ce0:	2202      	movs	r2, #2
  401ce2:	931c      	str	r3, [sp, #112]	; 0x70
  401ce4:	921d      	str	r2, [sp, #116]	; 0x74
  401ce6:	2001      	movs	r0, #1
  401ce8:	46ca      	mov	sl, r9
  401cea:	e5d0      	b.n	40188e <_vfiprintf_r+0x742>
  401cec:	aa0f      	add	r2, sp, #60	; 0x3c
  401cee:	9904      	ldr	r1, [sp, #16]
  401cf0:	9806      	ldr	r0, [sp, #24]
  401cf2:	f7ff f9eb 	bl	4010cc <__sprint_r.part.0>
  401cf6:	2800      	cmp	r0, #0
  401cf8:	f47f aeda 	bne.w	401ab0 <_vfiprintf_r+0x964>
  401cfc:	9910      	ldr	r1, [sp, #64]	; 0x40
  401cfe:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d00:	1c48      	adds	r0, r1, #1
  401d02:	46ca      	mov	sl, r9
  401d04:	e5a4      	b.n	401850 <_vfiprintf_r+0x704>
  401d06:	9a07      	ldr	r2, [sp, #28]
  401d08:	9903      	ldr	r1, [sp, #12]
  401d0a:	6813      	ldr	r3, [r2, #0]
  401d0c:	17cd      	asrs	r5, r1, #31
  401d0e:	4608      	mov	r0, r1
  401d10:	3204      	adds	r2, #4
  401d12:	4629      	mov	r1, r5
  401d14:	9207      	str	r2, [sp, #28]
  401d16:	e9c3 0100 	strd	r0, r1, [r3]
  401d1a:	f7ff ba54 	b.w	4011c6 <_vfiprintf_r+0x7a>
  401d1e:	4658      	mov	r0, fp
  401d20:	9607      	str	r6, [sp, #28]
  401d22:	9302      	str	r3, [sp, #8]
  401d24:	f001 fc6c 	bl	403600 <strlen>
  401d28:	2400      	movs	r4, #0
  401d2a:	9005      	str	r0, [sp, #20]
  401d2c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401d30:	f7ff bb5e 	b.w	4013f0 <_vfiprintf_r+0x2a4>
  401d34:	aa0f      	add	r2, sp, #60	; 0x3c
  401d36:	9904      	ldr	r1, [sp, #16]
  401d38:	9806      	ldr	r0, [sp, #24]
  401d3a:	f7ff f9c7 	bl	4010cc <__sprint_r.part.0>
  401d3e:	2800      	cmp	r0, #0
  401d40:	f47f aeb6 	bne.w	401ab0 <_vfiprintf_r+0x964>
  401d44:	9910      	ldr	r1, [sp, #64]	; 0x40
  401d46:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d48:	1c48      	adds	r0, r1, #1
  401d4a:	46ca      	mov	sl, r9
  401d4c:	e5a7      	b.n	40189e <_vfiprintf_r+0x752>
  401d4e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401d50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d52:	4e20      	ldr	r6, [pc, #128]	; (401dd4 <_vfiprintf_r+0xc88>)
  401d54:	3101      	adds	r1, #1
  401d56:	f7ff bb90 	b.w	40147a <_vfiprintf_r+0x32e>
  401d5a:	2c06      	cmp	r4, #6
  401d5c:	bf28      	it	cs
  401d5e:	2406      	movcs	r4, #6
  401d60:	9405      	str	r4, [sp, #20]
  401d62:	9607      	str	r6, [sp, #28]
  401d64:	9401      	str	r4, [sp, #4]
  401d66:	f8df b070 	ldr.w	fp, [pc, #112]	; 401dd8 <_vfiprintf_r+0xc8c>
  401d6a:	e4d5      	b.n	401718 <_vfiprintf_r+0x5cc>
  401d6c:	9810      	ldr	r0, [sp, #64]	; 0x40
  401d6e:	4e19      	ldr	r6, [pc, #100]	; (401dd4 <_vfiprintf_r+0xc88>)
  401d70:	3001      	adds	r0, #1
  401d72:	e603      	b.n	40197c <_vfiprintf_r+0x830>
  401d74:	9405      	str	r4, [sp, #20]
  401d76:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401d7a:	9607      	str	r6, [sp, #28]
  401d7c:	9302      	str	r3, [sp, #8]
  401d7e:	4604      	mov	r4, r0
  401d80:	f7ff bb36 	b.w	4013f0 <_vfiprintf_r+0x2a4>
  401d84:	4686      	mov	lr, r0
  401d86:	f7ff bbce 	b.w	401526 <_vfiprintf_r+0x3da>
  401d8a:	9806      	ldr	r0, [sp, #24]
  401d8c:	aa0f      	add	r2, sp, #60	; 0x3c
  401d8e:	4659      	mov	r1, fp
  401d90:	f7ff f99c 	bl	4010cc <__sprint_r.part.0>
  401d94:	2800      	cmp	r0, #0
  401d96:	f43f ae24 	beq.w	4019e2 <_vfiprintf_r+0x896>
  401d9a:	e624      	b.n	4019e6 <_vfiprintf_r+0x89a>
  401d9c:	9907      	ldr	r1, [sp, #28]
  401d9e:	f898 2001 	ldrb.w	r2, [r8, #1]
  401da2:	680c      	ldr	r4, [r1, #0]
  401da4:	3104      	adds	r1, #4
  401da6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  401daa:	46b8      	mov	r8, r7
  401dac:	9107      	str	r1, [sp, #28]
  401dae:	f7ff ba3f 	b.w	401230 <_vfiprintf_r+0xe4>
  401db2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401db6:	e43c      	b.n	401632 <_vfiprintf_r+0x4e6>
  401db8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401dbc:	e521      	b.n	401802 <_vfiprintf_r+0x6b6>
  401dbe:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401dc2:	f7ff bbf4 	b.w	4015ae <_vfiprintf_r+0x462>
  401dc6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401dca:	e491      	b.n	4016f0 <_vfiprintf_r+0x5a4>
  401dcc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401dd0:	e469      	b.n	4016a6 <_vfiprintf_r+0x55a>
  401dd2:	bf00      	nop
  401dd4:	00403dd0 	.word	0x00403dd0
  401dd8:	00403dc8 	.word	0x00403dc8

00401ddc <__sbprintf>:
  401ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401de0:	460c      	mov	r4, r1
  401de2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  401de6:	8989      	ldrh	r1, [r1, #12]
  401de8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  401dea:	89e5      	ldrh	r5, [r4, #14]
  401dec:	9619      	str	r6, [sp, #100]	; 0x64
  401dee:	f021 0102 	bic.w	r1, r1, #2
  401df2:	4606      	mov	r6, r0
  401df4:	69e0      	ldr	r0, [r4, #28]
  401df6:	f8ad 100c 	strh.w	r1, [sp, #12]
  401dfa:	4617      	mov	r7, r2
  401dfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  401e00:	6a62      	ldr	r2, [r4, #36]	; 0x24
  401e02:	f8ad 500e 	strh.w	r5, [sp, #14]
  401e06:	4698      	mov	r8, r3
  401e08:	ad1a      	add	r5, sp, #104	; 0x68
  401e0a:	2300      	movs	r3, #0
  401e0c:	9007      	str	r0, [sp, #28]
  401e0e:	a816      	add	r0, sp, #88	; 0x58
  401e10:	9209      	str	r2, [sp, #36]	; 0x24
  401e12:	9306      	str	r3, [sp, #24]
  401e14:	9500      	str	r5, [sp, #0]
  401e16:	9504      	str	r5, [sp, #16]
  401e18:	9102      	str	r1, [sp, #8]
  401e1a:	9105      	str	r1, [sp, #20]
  401e1c:	f000 fd48 	bl	4028b0 <__retarget_lock_init_recursive>
  401e20:	4643      	mov	r3, r8
  401e22:	463a      	mov	r2, r7
  401e24:	4669      	mov	r1, sp
  401e26:	4630      	mov	r0, r6
  401e28:	f7ff f990 	bl	40114c <_vfiprintf_r>
  401e2c:	1e05      	subs	r5, r0, #0
  401e2e:	db07      	blt.n	401e40 <__sbprintf+0x64>
  401e30:	4630      	mov	r0, r6
  401e32:	4669      	mov	r1, sp
  401e34:	f000 f928 	bl	402088 <_fflush_r>
  401e38:	2800      	cmp	r0, #0
  401e3a:	bf18      	it	ne
  401e3c:	f04f 35ff 	movne.w	r5, #4294967295
  401e40:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  401e44:	065b      	lsls	r3, r3, #25
  401e46:	d503      	bpl.n	401e50 <__sbprintf+0x74>
  401e48:	89a3      	ldrh	r3, [r4, #12]
  401e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401e4e:	81a3      	strh	r3, [r4, #12]
  401e50:	9816      	ldr	r0, [sp, #88]	; 0x58
  401e52:	f000 fd2f 	bl	4028b4 <__retarget_lock_close_recursive>
  401e56:	4628      	mov	r0, r5
  401e58:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  401e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00401e60 <__swsetup_r>:
  401e60:	b538      	push	{r3, r4, r5, lr}
  401e62:	4b30      	ldr	r3, [pc, #192]	; (401f24 <__swsetup_r+0xc4>)
  401e64:	681b      	ldr	r3, [r3, #0]
  401e66:	4605      	mov	r5, r0
  401e68:	460c      	mov	r4, r1
  401e6a:	b113      	cbz	r3, 401e72 <__swsetup_r+0x12>
  401e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  401e6e:	2a00      	cmp	r2, #0
  401e70:	d038      	beq.n	401ee4 <__swsetup_r+0x84>
  401e72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401e76:	b293      	uxth	r3, r2
  401e78:	0718      	lsls	r0, r3, #28
  401e7a:	d50c      	bpl.n	401e96 <__swsetup_r+0x36>
  401e7c:	6920      	ldr	r0, [r4, #16]
  401e7e:	b1a8      	cbz	r0, 401eac <__swsetup_r+0x4c>
  401e80:	f013 0201 	ands.w	r2, r3, #1
  401e84:	d01e      	beq.n	401ec4 <__swsetup_r+0x64>
  401e86:	6963      	ldr	r3, [r4, #20]
  401e88:	2200      	movs	r2, #0
  401e8a:	425b      	negs	r3, r3
  401e8c:	61a3      	str	r3, [r4, #24]
  401e8e:	60a2      	str	r2, [r4, #8]
  401e90:	b1f0      	cbz	r0, 401ed0 <__swsetup_r+0x70>
  401e92:	2000      	movs	r0, #0
  401e94:	bd38      	pop	{r3, r4, r5, pc}
  401e96:	06d9      	lsls	r1, r3, #27
  401e98:	d53c      	bpl.n	401f14 <__swsetup_r+0xb4>
  401e9a:	0758      	lsls	r0, r3, #29
  401e9c:	d426      	bmi.n	401eec <__swsetup_r+0x8c>
  401e9e:	6920      	ldr	r0, [r4, #16]
  401ea0:	f042 0308 	orr.w	r3, r2, #8
  401ea4:	81a3      	strh	r3, [r4, #12]
  401ea6:	b29b      	uxth	r3, r3
  401ea8:	2800      	cmp	r0, #0
  401eaa:	d1e9      	bne.n	401e80 <__swsetup_r+0x20>
  401eac:	f403 7220 	and.w	r2, r3, #640	; 0x280
  401eb0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  401eb4:	d0e4      	beq.n	401e80 <__swsetup_r+0x20>
  401eb6:	4628      	mov	r0, r5
  401eb8:	4621      	mov	r1, r4
  401eba:	f000 fd2f 	bl	40291c <__smakebuf_r>
  401ebe:	89a3      	ldrh	r3, [r4, #12]
  401ec0:	6920      	ldr	r0, [r4, #16]
  401ec2:	e7dd      	b.n	401e80 <__swsetup_r+0x20>
  401ec4:	0799      	lsls	r1, r3, #30
  401ec6:	bf58      	it	pl
  401ec8:	6962      	ldrpl	r2, [r4, #20]
  401eca:	60a2      	str	r2, [r4, #8]
  401ecc:	2800      	cmp	r0, #0
  401ece:	d1e0      	bne.n	401e92 <__swsetup_r+0x32>
  401ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401ed4:	061a      	lsls	r2, r3, #24
  401ed6:	d5dd      	bpl.n	401e94 <__swsetup_r+0x34>
  401ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401edc:	81a3      	strh	r3, [r4, #12]
  401ede:	f04f 30ff 	mov.w	r0, #4294967295
  401ee2:	bd38      	pop	{r3, r4, r5, pc}
  401ee4:	4618      	mov	r0, r3
  401ee6:	f000 f927 	bl	402138 <__sinit>
  401eea:	e7c2      	b.n	401e72 <__swsetup_r+0x12>
  401eec:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401eee:	b151      	cbz	r1, 401f06 <__swsetup_r+0xa6>
  401ef0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401ef4:	4299      	cmp	r1, r3
  401ef6:	d004      	beq.n	401f02 <__swsetup_r+0xa2>
  401ef8:	4628      	mov	r0, r5
  401efa:	f000 fa43 	bl	402384 <_free_r>
  401efe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401f02:	2300      	movs	r3, #0
  401f04:	6323      	str	r3, [r4, #48]	; 0x30
  401f06:	2300      	movs	r3, #0
  401f08:	6920      	ldr	r0, [r4, #16]
  401f0a:	6063      	str	r3, [r4, #4]
  401f0c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  401f10:	6020      	str	r0, [r4, #0]
  401f12:	e7c5      	b.n	401ea0 <__swsetup_r+0x40>
  401f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  401f18:	2309      	movs	r3, #9
  401f1a:	602b      	str	r3, [r5, #0]
  401f1c:	f04f 30ff 	mov.w	r0, #4294967295
  401f20:	81a2      	strh	r2, [r4, #12]
  401f22:	bd38      	pop	{r3, r4, r5, pc}
  401f24:	20000010 	.word	0x20000010

00401f28 <register_fini>:
  401f28:	4b02      	ldr	r3, [pc, #8]	; (401f34 <register_fini+0xc>)
  401f2a:	b113      	cbz	r3, 401f32 <register_fini+0xa>
  401f2c:	4802      	ldr	r0, [pc, #8]	; (401f38 <register_fini+0x10>)
  401f2e:	f000 b805 	b.w	401f3c <atexit>
  401f32:	4770      	bx	lr
  401f34:	00000000 	.word	0x00000000
  401f38:	004021a9 	.word	0x004021a9

00401f3c <atexit>:
  401f3c:	2300      	movs	r3, #0
  401f3e:	4601      	mov	r1, r0
  401f40:	461a      	mov	r2, r3
  401f42:	4618      	mov	r0, r3
  401f44:	f001 bc70 	b.w	403828 <__register_exitproc>

00401f48 <__sflush_r>:
  401f48:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  401f4c:	b29a      	uxth	r2, r3
  401f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401f52:	460d      	mov	r5, r1
  401f54:	0711      	lsls	r1, r2, #28
  401f56:	4680      	mov	r8, r0
  401f58:	d43a      	bmi.n	401fd0 <__sflush_r+0x88>
  401f5a:	686a      	ldr	r2, [r5, #4]
  401f5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401f60:	2a00      	cmp	r2, #0
  401f62:	81ab      	strh	r3, [r5, #12]
  401f64:	dd6f      	ble.n	402046 <__sflush_r+0xfe>
  401f66:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401f68:	2c00      	cmp	r4, #0
  401f6a:	d049      	beq.n	402000 <__sflush_r+0xb8>
  401f6c:	2200      	movs	r2, #0
  401f6e:	b29b      	uxth	r3, r3
  401f70:	f8d8 6000 	ldr.w	r6, [r8]
  401f74:	f8c8 2000 	str.w	r2, [r8]
  401f78:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  401f7c:	d067      	beq.n	40204e <__sflush_r+0x106>
  401f7e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401f80:	075f      	lsls	r7, r3, #29
  401f82:	d505      	bpl.n	401f90 <__sflush_r+0x48>
  401f84:	6869      	ldr	r1, [r5, #4]
  401f86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401f88:	1a52      	subs	r2, r2, r1
  401f8a:	b10b      	cbz	r3, 401f90 <__sflush_r+0x48>
  401f8c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  401f8e:	1ad2      	subs	r2, r2, r3
  401f90:	2300      	movs	r3, #0
  401f92:	69e9      	ldr	r1, [r5, #28]
  401f94:	4640      	mov	r0, r8
  401f96:	47a0      	blx	r4
  401f98:	1c44      	adds	r4, r0, #1
  401f9a:	d03c      	beq.n	402016 <__sflush_r+0xce>
  401f9c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  401fa0:	692a      	ldr	r2, [r5, #16]
  401fa2:	602a      	str	r2, [r5, #0]
  401fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401fa8:	2200      	movs	r2, #0
  401faa:	81ab      	strh	r3, [r5, #12]
  401fac:	04db      	lsls	r3, r3, #19
  401fae:	606a      	str	r2, [r5, #4]
  401fb0:	d447      	bmi.n	402042 <__sflush_r+0xfa>
  401fb2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  401fb4:	f8c8 6000 	str.w	r6, [r8]
  401fb8:	b311      	cbz	r1, 402000 <__sflush_r+0xb8>
  401fba:	f105 0340 	add.w	r3, r5, #64	; 0x40
  401fbe:	4299      	cmp	r1, r3
  401fc0:	d002      	beq.n	401fc8 <__sflush_r+0x80>
  401fc2:	4640      	mov	r0, r8
  401fc4:	f000 f9de 	bl	402384 <_free_r>
  401fc8:	2000      	movs	r0, #0
  401fca:	6328      	str	r0, [r5, #48]	; 0x30
  401fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401fd0:	692e      	ldr	r6, [r5, #16]
  401fd2:	b1ae      	cbz	r6, 402000 <__sflush_r+0xb8>
  401fd4:	682c      	ldr	r4, [r5, #0]
  401fd6:	602e      	str	r6, [r5, #0]
  401fd8:	0791      	lsls	r1, r2, #30
  401fda:	bf0c      	ite	eq
  401fdc:	696b      	ldreq	r3, [r5, #20]
  401fde:	2300      	movne	r3, #0
  401fe0:	1ba4      	subs	r4, r4, r6
  401fe2:	60ab      	str	r3, [r5, #8]
  401fe4:	e00a      	b.n	401ffc <__sflush_r+0xb4>
  401fe6:	4623      	mov	r3, r4
  401fe8:	4632      	mov	r2, r6
  401fea:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  401fec:	69e9      	ldr	r1, [r5, #28]
  401fee:	4640      	mov	r0, r8
  401ff0:	47b8      	blx	r7
  401ff2:	2800      	cmp	r0, #0
  401ff4:	eba4 0400 	sub.w	r4, r4, r0
  401ff8:	4406      	add	r6, r0
  401ffa:	dd04      	ble.n	402006 <__sflush_r+0xbe>
  401ffc:	2c00      	cmp	r4, #0
  401ffe:	dcf2      	bgt.n	401fe6 <__sflush_r+0x9e>
  402000:	2000      	movs	r0, #0
  402002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402006:	89ab      	ldrh	r3, [r5, #12]
  402008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40200c:	81ab      	strh	r3, [r5, #12]
  40200e:	f04f 30ff 	mov.w	r0, #4294967295
  402012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402016:	f8d8 4000 	ldr.w	r4, [r8]
  40201a:	2c1d      	cmp	r4, #29
  40201c:	d8f3      	bhi.n	402006 <__sflush_r+0xbe>
  40201e:	4b19      	ldr	r3, [pc, #100]	; (402084 <__sflush_r+0x13c>)
  402020:	40e3      	lsrs	r3, r4
  402022:	43db      	mvns	r3, r3
  402024:	f013 0301 	ands.w	r3, r3, #1
  402028:	d1ed      	bne.n	402006 <__sflush_r+0xbe>
  40202a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40202e:	606b      	str	r3, [r5, #4]
  402030:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402034:	6929      	ldr	r1, [r5, #16]
  402036:	81ab      	strh	r3, [r5, #12]
  402038:	04da      	lsls	r2, r3, #19
  40203a:	6029      	str	r1, [r5, #0]
  40203c:	d5b9      	bpl.n	401fb2 <__sflush_r+0x6a>
  40203e:	2c00      	cmp	r4, #0
  402040:	d1b7      	bne.n	401fb2 <__sflush_r+0x6a>
  402042:	6528      	str	r0, [r5, #80]	; 0x50
  402044:	e7b5      	b.n	401fb2 <__sflush_r+0x6a>
  402046:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402048:	2a00      	cmp	r2, #0
  40204a:	dc8c      	bgt.n	401f66 <__sflush_r+0x1e>
  40204c:	e7d8      	b.n	402000 <__sflush_r+0xb8>
  40204e:	2301      	movs	r3, #1
  402050:	69e9      	ldr	r1, [r5, #28]
  402052:	4640      	mov	r0, r8
  402054:	47a0      	blx	r4
  402056:	1c43      	adds	r3, r0, #1
  402058:	4602      	mov	r2, r0
  40205a:	d002      	beq.n	402062 <__sflush_r+0x11a>
  40205c:	89ab      	ldrh	r3, [r5, #12]
  40205e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402060:	e78e      	b.n	401f80 <__sflush_r+0x38>
  402062:	f8d8 3000 	ldr.w	r3, [r8]
  402066:	2b00      	cmp	r3, #0
  402068:	d0f8      	beq.n	40205c <__sflush_r+0x114>
  40206a:	2b1d      	cmp	r3, #29
  40206c:	d001      	beq.n	402072 <__sflush_r+0x12a>
  40206e:	2b16      	cmp	r3, #22
  402070:	d102      	bne.n	402078 <__sflush_r+0x130>
  402072:	f8c8 6000 	str.w	r6, [r8]
  402076:	e7c3      	b.n	402000 <__sflush_r+0xb8>
  402078:	89ab      	ldrh	r3, [r5, #12]
  40207a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40207e:	81ab      	strh	r3, [r5, #12]
  402080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402084:	20400001 	.word	0x20400001

00402088 <_fflush_r>:
  402088:	b538      	push	{r3, r4, r5, lr}
  40208a:	460d      	mov	r5, r1
  40208c:	4604      	mov	r4, r0
  40208e:	b108      	cbz	r0, 402094 <_fflush_r+0xc>
  402090:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402092:	b1bb      	cbz	r3, 4020c4 <_fflush_r+0x3c>
  402094:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402098:	b188      	cbz	r0, 4020be <_fflush_r+0x36>
  40209a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40209c:	07db      	lsls	r3, r3, #31
  40209e:	d401      	bmi.n	4020a4 <_fflush_r+0x1c>
  4020a0:	0581      	lsls	r1, r0, #22
  4020a2:	d517      	bpl.n	4020d4 <_fflush_r+0x4c>
  4020a4:	4620      	mov	r0, r4
  4020a6:	4629      	mov	r1, r5
  4020a8:	f7ff ff4e 	bl	401f48 <__sflush_r>
  4020ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4020ae:	07da      	lsls	r2, r3, #31
  4020b0:	4604      	mov	r4, r0
  4020b2:	d402      	bmi.n	4020ba <_fflush_r+0x32>
  4020b4:	89ab      	ldrh	r3, [r5, #12]
  4020b6:	059b      	lsls	r3, r3, #22
  4020b8:	d507      	bpl.n	4020ca <_fflush_r+0x42>
  4020ba:	4620      	mov	r0, r4
  4020bc:	bd38      	pop	{r3, r4, r5, pc}
  4020be:	4604      	mov	r4, r0
  4020c0:	4620      	mov	r0, r4
  4020c2:	bd38      	pop	{r3, r4, r5, pc}
  4020c4:	f000 f838 	bl	402138 <__sinit>
  4020c8:	e7e4      	b.n	402094 <_fflush_r+0xc>
  4020ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4020cc:	f000 fbf6 	bl	4028bc <__retarget_lock_release_recursive>
  4020d0:	4620      	mov	r0, r4
  4020d2:	bd38      	pop	{r3, r4, r5, pc}
  4020d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4020d6:	f000 fbef 	bl	4028b8 <__retarget_lock_acquire_recursive>
  4020da:	e7e3      	b.n	4020a4 <_fflush_r+0x1c>

004020dc <_cleanup_r>:
  4020dc:	4901      	ldr	r1, [pc, #4]	; (4020e4 <_cleanup_r+0x8>)
  4020de:	f000 bbaf 	b.w	402840 <_fwalk_reent>
  4020e2:	bf00      	nop
  4020e4:	00403911 	.word	0x00403911

004020e8 <std.isra.0>:
  4020e8:	b510      	push	{r4, lr}
  4020ea:	2300      	movs	r3, #0
  4020ec:	4604      	mov	r4, r0
  4020ee:	8181      	strh	r1, [r0, #12]
  4020f0:	81c2      	strh	r2, [r0, #14]
  4020f2:	6003      	str	r3, [r0, #0]
  4020f4:	6043      	str	r3, [r0, #4]
  4020f6:	6083      	str	r3, [r0, #8]
  4020f8:	6643      	str	r3, [r0, #100]	; 0x64
  4020fa:	6103      	str	r3, [r0, #16]
  4020fc:	6143      	str	r3, [r0, #20]
  4020fe:	6183      	str	r3, [r0, #24]
  402100:	4619      	mov	r1, r3
  402102:	2208      	movs	r2, #8
  402104:	305c      	adds	r0, #92	; 0x5c
  402106:	f7fe fec3 	bl	400e90 <memset>
  40210a:	4807      	ldr	r0, [pc, #28]	; (402128 <std.isra.0+0x40>)
  40210c:	4907      	ldr	r1, [pc, #28]	; (40212c <std.isra.0+0x44>)
  40210e:	4a08      	ldr	r2, [pc, #32]	; (402130 <std.isra.0+0x48>)
  402110:	4b08      	ldr	r3, [pc, #32]	; (402134 <std.isra.0+0x4c>)
  402112:	6220      	str	r0, [r4, #32]
  402114:	61e4      	str	r4, [r4, #28]
  402116:	6261      	str	r1, [r4, #36]	; 0x24
  402118:	62a2      	str	r2, [r4, #40]	; 0x28
  40211a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40211c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402124:	f000 bbc4 	b.w	4028b0 <__retarget_lock_init_recursive>
  402128:	00403575 	.word	0x00403575
  40212c:	00403599 	.word	0x00403599
  402130:	004035d5 	.word	0x004035d5
  402134:	004035f5 	.word	0x004035f5

00402138 <__sinit>:
  402138:	b510      	push	{r4, lr}
  40213a:	4604      	mov	r4, r0
  40213c:	4812      	ldr	r0, [pc, #72]	; (402188 <__sinit+0x50>)
  40213e:	f000 fbbb 	bl	4028b8 <__retarget_lock_acquire_recursive>
  402142:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402144:	b9d2      	cbnz	r2, 40217c <__sinit+0x44>
  402146:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40214a:	4810      	ldr	r0, [pc, #64]	; (40218c <__sinit+0x54>)
  40214c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402150:	2103      	movs	r1, #3
  402152:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402156:	63e0      	str	r0, [r4, #60]	; 0x3c
  402158:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40215c:	6860      	ldr	r0, [r4, #4]
  40215e:	2104      	movs	r1, #4
  402160:	f7ff ffc2 	bl	4020e8 <std.isra.0>
  402164:	2201      	movs	r2, #1
  402166:	2109      	movs	r1, #9
  402168:	68a0      	ldr	r0, [r4, #8]
  40216a:	f7ff ffbd 	bl	4020e8 <std.isra.0>
  40216e:	2202      	movs	r2, #2
  402170:	2112      	movs	r1, #18
  402172:	68e0      	ldr	r0, [r4, #12]
  402174:	f7ff ffb8 	bl	4020e8 <std.isra.0>
  402178:	2301      	movs	r3, #1
  40217a:	63a3      	str	r3, [r4, #56]	; 0x38
  40217c:	4802      	ldr	r0, [pc, #8]	; (402188 <__sinit+0x50>)
  40217e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402182:	f000 bb9b 	b.w	4028bc <__retarget_lock_release_recursive>
  402186:	bf00      	nop
  402188:	20000b98 	.word	0x20000b98
  40218c:	004020dd 	.word	0x004020dd

00402190 <__sfp_lock_acquire>:
  402190:	4801      	ldr	r0, [pc, #4]	; (402198 <__sfp_lock_acquire+0x8>)
  402192:	f000 bb91 	b.w	4028b8 <__retarget_lock_acquire_recursive>
  402196:	bf00      	nop
  402198:	20000bac 	.word	0x20000bac

0040219c <__sfp_lock_release>:
  40219c:	4801      	ldr	r0, [pc, #4]	; (4021a4 <__sfp_lock_release+0x8>)
  40219e:	f000 bb8d 	b.w	4028bc <__retarget_lock_release_recursive>
  4021a2:	bf00      	nop
  4021a4:	20000bac 	.word	0x20000bac

004021a8 <__libc_fini_array>:
  4021a8:	b538      	push	{r3, r4, r5, lr}
  4021aa:	4c0a      	ldr	r4, [pc, #40]	; (4021d4 <__libc_fini_array+0x2c>)
  4021ac:	4d0a      	ldr	r5, [pc, #40]	; (4021d8 <__libc_fini_array+0x30>)
  4021ae:	1b64      	subs	r4, r4, r5
  4021b0:	10a4      	asrs	r4, r4, #2
  4021b2:	d00a      	beq.n	4021ca <__libc_fini_array+0x22>
  4021b4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4021b8:	3b01      	subs	r3, #1
  4021ba:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4021be:	3c01      	subs	r4, #1
  4021c0:	f855 3904 	ldr.w	r3, [r5], #-4
  4021c4:	4798      	blx	r3
  4021c6:	2c00      	cmp	r4, #0
  4021c8:	d1f9      	bne.n	4021be <__libc_fini_array+0x16>
  4021ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4021ce:	f001 bea3 	b.w	403f18 <_fini>
  4021d2:	bf00      	nop
  4021d4:	00403f28 	.word	0x00403f28
  4021d8:	00403f24 	.word	0x00403f24

004021dc <__fputwc>:
  4021dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4021e0:	b082      	sub	sp, #8
  4021e2:	4680      	mov	r8, r0
  4021e4:	4689      	mov	r9, r1
  4021e6:	4614      	mov	r4, r2
  4021e8:	f000 fb54 	bl	402894 <__locale_mb_cur_max>
  4021ec:	2801      	cmp	r0, #1
  4021ee:	d036      	beq.n	40225e <__fputwc+0x82>
  4021f0:	464a      	mov	r2, r9
  4021f2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4021f6:	a901      	add	r1, sp, #4
  4021f8:	4640      	mov	r0, r8
  4021fa:	f001 fac7 	bl	40378c <_wcrtomb_r>
  4021fe:	1c42      	adds	r2, r0, #1
  402200:	4606      	mov	r6, r0
  402202:	d025      	beq.n	402250 <__fputwc+0x74>
  402204:	b3a8      	cbz	r0, 402272 <__fputwc+0x96>
  402206:	f89d e004 	ldrb.w	lr, [sp, #4]
  40220a:	2500      	movs	r5, #0
  40220c:	f10d 0a04 	add.w	sl, sp, #4
  402210:	e009      	b.n	402226 <__fputwc+0x4a>
  402212:	6823      	ldr	r3, [r4, #0]
  402214:	1c5a      	adds	r2, r3, #1
  402216:	6022      	str	r2, [r4, #0]
  402218:	f883 e000 	strb.w	lr, [r3]
  40221c:	3501      	adds	r5, #1
  40221e:	42b5      	cmp	r5, r6
  402220:	d227      	bcs.n	402272 <__fputwc+0x96>
  402222:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402226:	68a3      	ldr	r3, [r4, #8]
  402228:	3b01      	subs	r3, #1
  40222a:	2b00      	cmp	r3, #0
  40222c:	60a3      	str	r3, [r4, #8]
  40222e:	daf0      	bge.n	402212 <__fputwc+0x36>
  402230:	69a7      	ldr	r7, [r4, #24]
  402232:	42bb      	cmp	r3, r7
  402234:	4671      	mov	r1, lr
  402236:	4622      	mov	r2, r4
  402238:	4640      	mov	r0, r8
  40223a:	db02      	blt.n	402242 <__fputwc+0x66>
  40223c:	f1be 0f0a 	cmp.w	lr, #10
  402240:	d1e7      	bne.n	402212 <__fputwc+0x36>
  402242:	f001 fa4b 	bl	4036dc <__swbuf_r>
  402246:	1c43      	adds	r3, r0, #1
  402248:	d1e8      	bne.n	40221c <__fputwc+0x40>
  40224a:	b002      	add	sp, #8
  40224c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402250:	89a3      	ldrh	r3, [r4, #12]
  402252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402256:	81a3      	strh	r3, [r4, #12]
  402258:	b002      	add	sp, #8
  40225a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40225e:	f109 33ff 	add.w	r3, r9, #4294967295
  402262:	2bfe      	cmp	r3, #254	; 0xfe
  402264:	d8c4      	bhi.n	4021f0 <__fputwc+0x14>
  402266:	fa5f fe89 	uxtb.w	lr, r9
  40226a:	4606      	mov	r6, r0
  40226c:	f88d e004 	strb.w	lr, [sp, #4]
  402270:	e7cb      	b.n	40220a <__fputwc+0x2e>
  402272:	4648      	mov	r0, r9
  402274:	b002      	add	sp, #8
  402276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40227a:	bf00      	nop

0040227c <_fputwc_r>:
  40227c:	b530      	push	{r4, r5, lr}
  40227e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402280:	f013 0f01 	tst.w	r3, #1
  402284:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402288:	4614      	mov	r4, r2
  40228a:	b083      	sub	sp, #12
  40228c:	4605      	mov	r5, r0
  40228e:	b29a      	uxth	r2, r3
  402290:	d101      	bne.n	402296 <_fputwc_r+0x1a>
  402292:	0590      	lsls	r0, r2, #22
  402294:	d51c      	bpl.n	4022d0 <_fputwc_r+0x54>
  402296:	0490      	lsls	r0, r2, #18
  402298:	d406      	bmi.n	4022a8 <_fputwc_r+0x2c>
  40229a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40229c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4022a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4022a4:	81a3      	strh	r3, [r4, #12]
  4022a6:	6662      	str	r2, [r4, #100]	; 0x64
  4022a8:	4628      	mov	r0, r5
  4022aa:	4622      	mov	r2, r4
  4022ac:	f7ff ff96 	bl	4021dc <__fputwc>
  4022b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4022b2:	07da      	lsls	r2, r3, #31
  4022b4:	4605      	mov	r5, r0
  4022b6:	d402      	bmi.n	4022be <_fputwc_r+0x42>
  4022b8:	89a3      	ldrh	r3, [r4, #12]
  4022ba:	059b      	lsls	r3, r3, #22
  4022bc:	d502      	bpl.n	4022c4 <_fputwc_r+0x48>
  4022be:	4628      	mov	r0, r5
  4022c0:	b003      	add	sp, #12
  4022c2:	bd30      	pop	{r4, r5, pc}
  4022c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4022c6:	f000 faf9 	bl	4028bc <__retarget_lock_release_recursive>
  4022ca:	4628      	mov	r0, r5
  4022cc:	b003      	add	sp, #12
  4022ce:	bd30      	pop	{r4, r5, pc}
  4022d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4022d2:	9101      	str	r1, [sp, #4]
  4022d4:	f000 faf0 	bl	4028b8 <__retarget_lock_acquire_recursive>
  4022d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4022dc:	9901      	ldr	r1, [sp, #4]
  4022de:	b29a      	uxth	r2, r3
  4022e0:	e7d9      	b.n	402296 <_fputwc_r+0x1a>
  4022e2:	bf00      	nop

004022e4 <_malloc_trim_r>:
  4022e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4022e6:	4f24      	ldr	r7, [pc, #144]	; (402378 <_malloc_trim_r+0x94>)
  4022e8:	460c      	mov	r4, r1
  4022ea:	4606      	mov	r6, r0
  4022ec:	f000 ff7e 	bl	4031ec <__malloc_lock>
  4022f0:	68bb      	ldr	r3, [r7, #8]
  4022f2:	685d      	ldr	r5, [r3, #4]
  4022f4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4022f8:	310f      	adds	r1, #15
  4022fa:	f025 0503 	bic.w	r5, r5, #3
  4022fe:	4429      	add	r1, r5
  402300:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402304:	f021 010f 	bic.w	r1, r1, #15
  402308:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40230c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402310:	db07      	blt.n	402322 <_malloc_trim_r+0x3e>
  402312:	2100      	movs	r1, #0
  402314:	4630      	mov	r0, r6
  402316:	f001 f91b 	bl	403550 <_sbrk_r>
  40231a:	68bb      	ldr	r3, [r7, #8]
  40231c:	442b      	add	r3, r5
  40231e:	4298      	cmp	r0, r3
  402320:	d004      	beq.n	40232c <_malloc_trim_r+0x48>
  402322:	4630      	mov	r0, r6
  402324:	f000 ff68 	bl	4031f8 <__malloc_unlock>
  402328:	2000      	movs	r0, #0
  40232a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40232c:	4261      	negs	r1, r4
  40232e:	4630      	mov	r0, r6
  402330:	f001 f90e 	bl	403550 <_sbrk_r>
  402334:	3001      	adds	r0, #1
  402336:	d00d      	beq.n	402354 <_malloc_trim_r+0x70>
  402338:	4b10      	ldr	r3, [pc, #64]	; (40237c <_malloc_trim_r+0x98>)
  40233a:	68ba      	ldr	r2, [r7, #8]
  40233c:	6819      	ldr	r1, [r3, #0]
  40233e:	1b2d      	subs	r5, r5, r4
  402340:	f045 0501 	orr.w	r5, r5, #1
  402344:	4630      	mov	r0, r6
  402346:	1b09      	subs	r1, r1, r4
  402348:	6055      	str	r5, [r2, #4]
  40234a:	6019      	str	r1, [r3, #0]
  40234c:	f000 ff54 	bl	4031f8 <__malloc_unlock>
  402350:	2001      	movs	r0, #1
  402352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402354:	2100      	movs	r1, #0
  402356:	4630      	mov	r0, r6
  402358:	f001 f8fa 	bl	403550 <_sbrk_r>
  40235c:	68ba      	ldr	r2, [r7, #8]
  40235e:	1a83      	subs	r3, r0, r2
  402360:	2b0f      	cmp	r3, #15
  402362:	ddde      	ble.n	402322 <_malloc_trim_r+0x3e>
  402364:	4c06      	ldr	r4, [pc, #24]	; (402380 <_malloc_trim_r+0x9c>)
  402366:	4905      	ldr	r1, [pc, #20]	; (40237c <_malloc_trim_r+0x98>)
  402368:	6824      	ldr	r4, [r4, #0]
  40236a:	f043 0301 	orr.w	r3, r3, #1
  40236e:	1b00      	subs	r0, r0, r4
  402370:	6053      	str	r3, [r2, #4]
  402372:	6008      	str	r0, [r1, #0]
  402374:	e7d5      	b.n	402322 <_malloc_trim_r+0x3e>
  402376:	bf00      	nop
  402378:	200005b0 	.word	0x200005b0
  40237c:	20000b48 	.word	0x20000b48
  402380:	200009b8 	.word	0x200009b8

00402384 <_free_r>:
  402384:	2900      	cmp	r1, #0
  402386:	d044      	beq.n	402412 <_free_r+0x8e>
  402388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40238c:	460d      	mov	r5, r1
  40238e:	4680      	mov	r8, r0
  402390:	f000 ff2c 	bl	4031ec <__malloc_lock>
  402394:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402398:	4969      	ldr	r1, [pc, #420]	; (402540 <_free_r+0x1bc>)
  40239a:	f027 0301 	bic.w	r3, r7, #1
  40239e:	f1a5 0408 	sub.w	r4, r5, #8
  4023a2:	18e2      	adds	r2, r4, r3
  4023a4:	688e      	ldr	r6, [r1, #8]
  4023a6:	6850      	ldr	r0, [r2, #4]
  4023a8:	42b2      	cmp	r2, r6
  4023aa:	f020 0003 	bic.w	r0, r0, #3
  4023ae:	d05e      	beq.n	40246e <_free_r+0xea>
  4023b0:	07fe      	lsls	r6, r7, #31
  4023b2:	6050      	str	r0, [r2, #4]
  4023b4:	d40b      	bmi.n	4023ce <_free_r+0x4a>
  4023b6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4023ba:	1be4      	subs	r4, r4, r7
  4023bc:	f101 0e08 	add.w	lr, r1, #8
  4023c0:	68a5      	ldr	r5, [r4, #8]
  4023c2:	4575      	cmp	r5, lr
  4023c4:	443b      	add	r3, r7
  4023c6:	d06d      	beq.n	4024a4 <_free_r+0x120>
  4023c8:	68e7      	ldr	r7, [r4, #12]
  4023ca:	60ef      	str	r7, [r5, #12]
  4023cc:	60bd      	str	r5, [r7, #8]
  4023ce:	1815      	adds	r5, r2, r0
  4023d0:	686d      	ldr	r5, [r5, #4]
  4023d2:	07ed      	lsls	r5, r5, #31
  4023d4:	d53e      	bpl.n	402454 <_free_r+0xd0>
  4023d6:	f043 0201 	orr.w	r2, r3, #1
  4023da:	6062      	str	r2, [r4, #4]
  4023dc:	50e3      	str	r3, [r4, r3]
  4023de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4023e2:	d217      	bcs.n	402414 <_free_r+0x90>
  4023e4:	08db      	lsrs	r3, r3, #3
  4023e6:	1c58      	adds	r0, r3, #1
  4023e8:	109a      	asrs	r2, r3, #2
  4023ea:	684d      	ldr	r5, [r1, #4]
  4023ec:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4023f0:	60a7      	str	r7, [r4, #8]
  4023f2:	2301      	movs	r3, #1
  4023f4:	4093      	lsls	r3, r2
  4023f6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4023fa:	432b      	orrs	r3, r5
  4023fc:	3a08      	subs	r2, #8
  4023fe:	60e2      	str	r2, [r4, #12]
  402400:	604b      	str	r3, [r1, #4]
  402402:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402406:	60fc      	str	r4, [r7, #12]
  402408:	4640      	mov	r0, r8
  40240a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40240e:	f000 bef3 	b.w	4031f8 <__malloc_unlock>
  402412:	4770      	bx	lr
  402414:	0a5a      	lsrs	r2, r3, #9
  402416:	2a04      	cmp	r2, #4
  402418:	d852      	bhi.n	4024c0 <_free_r+0x13c>
  40241a:	099a      	lsrs	r2, r3, #6
  40241c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402420:	00ff      	lsls	r7, r7, #3
  402422:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402426:	19c8      	adds	r0, r1, r7
  402428:	59ca      	ldr	r2, [r1, r7]
  40242a:	3808      	subs	r0, #8
  40242c:	4290      	cmp	r0, r2
  40242e:	d04f      	beq.n	4024d0 <_free_r+0x14c>
  402430:	6851      	ldr	r1, [r2, #4]
  402432:	f021 0103 	bic.w	r1, r1, #3
  402436:	428b      	cmp	r3, r1
  402438:	d232      	bcs.n	4024a0 <_free_r+0x11c>
  40243a:	6892      	ldr	r2, [r2, #8]
  40243c:	4290      	cmp	r0, r2
  40243e:	d1f7      	bne.n	402430 <_free_r+0xac>
  402440:	68c3      	ldr	r3, [r0, #12]
  402442:	60a0      	str	r0, [r4, #8]
  402444:	60e3      	str	r3, [r4, #12]
  402446:	609c      	str	r4, [r3, #8]
  402448:	60c4      	str	r4, [r0, #12]
  40244a:	4640      	mov	r0, r8
  40244c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402450:	f000 bed2 	b.w	4031f8 <__malloc_unlock>
  402454:	6895      	ldr	r5, [r2, #8]
  402456:	4f3b      	ldr	r7, [pc, #236]	; (402544 <_free_r+0x1c0>)
  402458:	42bd      	cmp	r5, r7
  40245a:	4403      	add	r3, r0
  40245c:	d040      	beq.n	4024e0 <_free_r+0x15c>
  40245e:	68d0      	ldr	r0, [r2, #12]
  402460:	60e8      	str	r0, [r5, #12]
  402462:	f043 0201 	orr.w	r2, r3, #1
  402466:	6085      	str	r5, [r0, #8]
  402468:	6062      	str	r2, [r4, #4]
  40246a:	50e3      	str	r3, [r4, r3]
  40246c:	e7b7      	b.n	4023de <_free_r+0x5a>
  40246e:	07ff      	lsls	r7, r7, #31
  402470:	4403      	add	r3, r0
  402472:	d407      	bmi.n	402484 <_free_r+0x100>
  402474:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402478:	1aa4      	subs	r4, r4, r2
  40247a:	4413      	add	r3, r2
  40247c:	68a0      	ldr	r0, [r4, #8]
  40247e:	68e2      	ldr	r2, [r4, #12]
  402480:	60c2      	str	r2, [r0, #12]
  402482:	6090      	str	r0, [r2, #8]
  402484:	4a30      	ldr	r2, [pc, #192]	; (402548 <_free_r+0x1c4>)
  402486:	6812      	ldr	r2, [r2, #0]
  402488:	f043 0001 	orr.w	r0, r3, #1
  40248c:	4293      	cmp	r3, r2
  40248e:	6060      	str	r0, [r4, #4]
  402490:	608c      	str	r4, [r1, #8]
  402492:	d3b9      	bcc.n	402408 <_free_r+0x84>
  402494:	4b2d      	ldr	r3, [pc, #180]	; (40254c <_free_r+0x1c8>)
  402496:	4640      	mov	r0, r8
  402498:	6819      	ldr	r1, [r3, #0]
  40249a:	f7ff ff23 	bl	4022e4 <_malloc_trim_r>
  40249e:	e7b3      	b.n	402408 <_free_r+0x84>
  4024a0:	4610      	mov	r0, r2
  4024a2:	e7cd      	b.n	402440 <_free_r+0xbc>
  4024a4:	1811      	adds	r1, r2, r0
  4024a6:	6849      	ldr	r1, [r1, #4]
  4024a8:	07c9      	lsls	r1, r1, #31
  4024aa:	d444      	bmi.n	402536 <_free_r+0x1b2>
  4024ac:	6891      	ldr	r1, [r2, #8]
  4024ae:	68d2      	ldr	r2, [r2, #12]
  4024b0:	60ca      	str	r2, [r1, #12]
  4024b2:	4403      	add	r3, r0
  4024b4:	f043 0001 	orr.w	r0, r3, #1
  4024b8:	6091      	str	r1, [r2, #8]
  4024ba:	6060      	str	r0, [r4, #4]
  4024bc:	50e3      	str	r3, [r4, r3]
  4024be:	e7a3      	b.n	402408 <_free_r+0x84>
  4024c0:	2a14      	cmp	r2, #20
  4024c2:	d816      	bhi.n	4024f2 <_free_r+0x16e>
  4024c4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4024c8:	00ff      	lsls	r7, r7, #3
  4024ca:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4024ce:	e7aa      	b.n	402426 <_free_r+0xa2>
  4024d0:	10aa      	asrs	r2, r5, #2
  4024d2:	2301      	movs	r3, #1
  4024d4:	684d      	ldr	r5, [r1, #4]
  4024d6:	4093      	lsls	r3, r2
  4024d8:	432b      	orrs	r3, r5
  4024da:	604b      	str	r3, [r1, #4]
  4024dc:	4603      	mov	r3, r0
  4024de:	e7b0      	b.n	402442 <_free_r+0xbe>
  4024e0:	f043 0201 	orr.w	r2, r3, #1
  4024e4:	614c      	str	r4, [r1, #20]
  4024e6:	610c      	str	r4, [r1, #16]
  4024e8:	60e5      	str	r5, [r4, #12]
  4024ea:	60a5      	str	r5, [r4, #8]
  4024ec:	6062      	str	r2, [r4, #4]
  4024ee:	50e3      	str	r3, [r4, r3]
  4024f0:	e78a      	b.n	402408 <_free_r+0x84>
  4024f2:	2a54      	cmp	r2, #84	; 0x54
  4024f4:	d806      	bhi.n	402504 <_free_r+0x180>
  4024f6:	0b1a      	lsrs	r2, r3, #12
  4024f8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4024fc:	00ff      	lsls	r7, r7, #3
  4024fe:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402502:	e790      	b.n	402426 <_free_r+0xa2>
  402504:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402508:	d806      	bhi.n	402518 <_free_r+0x194>
  40250a:	0bda      	lsrs	r2, r3, #15
  40250c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402510:	00ff      	lsls	r7, r7, #3
  402512:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402516:	e786      	b.n	402426 <_free_r+0xa2>
  402518:	f240 5054 	movw	r0, #1364	; 0x554
  40251c:	4282      	cmp	r2, r0
  40251e:	d806      	bhi.n	40252e <_free_r+0x1aa>
  402520:	0c9a      	lsrs	r2, r3, #18
  402522:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402526:	00ff      	lsls	r7, r7, #3
  402528:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40252c:	e77b      	b.n	402426 <_free_r+0xa2>
  40252e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402532:	257e      	movs	r5, #126	; 0x7e
  402534:	e777      	b.n	402426 <_free_r+0xa2>
  402536:	f043 0101 	orr.w	r1, r3, #1
  40253a:	6061      	str	r1, [r4, #4]
  40253c:	6013      	str	r3, [r2, #0]
  40253e:	e763      	b.n	402408 <_free_r+0x84>
  402540:	200005b0 	.word	0x200005b0
  402544:	200005b8 	.word	0x200005b8
  402548:	200009bc 	.word	0x200009bc
  40254c:	20000b78 	.word	0x20000b78

00402550 <__sfvwrite_r>:
  402550:	6893      	ldr	r3, [r2, #8]
  402552:	2b00      	cmp	r3, #0
  402554:	d073      	beq.n	40263e <__sfvwrite_r+0xee>
  402556:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40255a:	898b      	ldrh	r3, [r1, #12]
  40255c:	b083      	sub	sp, #12
  40255e:	460c      	mov	r4, r1
  402560:	0719      	lsls	r1, r3, #28
  402562:	9000      	str	r0, [sp, #0]
  402564:	4616      	mov	r6, r2
  402566:	d526      	bpl.n	4025b6 <__sfvwrite_r+0x66>
  402568:	6922      	ldr	r2, [r4, #16]
  40256a:	b322      	cbz	r2, 4025b6 <__sfvwrite_r+0x66>
  40256c:	f013 0002 	ands.w	r0, r3, #2
  402570:	6835      	ldr	r5, [r6, #0]
  402572:	d02c      	beq.n	4025ce <__sfvwrite_r+0x7e>
  402574:	f04f 0900 	mov.w	r9, #0
  402578:	4fb0      	ldr	r7, [pc, #704]	; (40283c <__sfvwrite_r+0x2ec>)
  40257a:	46c8      	mov	r8, r9
  40257c:	46b2      	mov	sl, r6
  40257e:	45b8      	cmp	r8, r7
  402580:	4643      	mov	r3, r8
  402582:	464a      	mov	r2, r9
  402584:	bf28      	it	cs
  402586:	463b      	movcs	r3, r7
  402588:	9800      	ldr	r0, [sp, #0]
  40258a:	f1b8 0f00 	cmp.w	r8, #0
  40258e:	d050      	beq.n	402632 <__sfvwrite_r+0xe2>
  402590:	69e1      	ldr	r1, [r4, #28]
  402592:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402594:	47b0      	blx	r6
  402596:	2800      	cmp	r0, #0
  402598:	dd58      	ble.n	40264c <__sfvwrite_r+0xfc>
  40259a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40259e:	1a1b      	subs	r3, r3, r0
  4025a0:	4481      	add	r9, r0
  4025a2:	eba8 0800 	sub.w	r8, r8, r0
  4025a6:	f8ca 3008 	str.w	r3, [sl, #8]
  4025aa:	2b00      	cmp	r3, #0
  4025ac:	d1e7      	bne.n	40257e <__sfvwrite_r+0x2e>
  4025ae:	2000      	movs	r0, #0
  4025b0:	b003      	add	sp, #12
  4025b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4025b6:	4621      	mov	r1, r4
  4025b8:	9800      	ldr	r0, [sp, #0]
  4025ba:	f7ff fc51 	bl	401e60 <__swsetup_r>
  4025be:	2800      	cmp	r0, #0
  4025c0:	f040 8133 	bne.w	40282a <__sfvwrite_r+0x2da>
  4025c4:	89a3      	ldrh	r3, [r4, #12]
  4025c6:	6835      	ldr	r5, [r6, #0]
  4025c8:	f013 0002 	ands.w	r0, r3, #2
  4025cc:	d1d2      	bne.n	402574 <__sfvwrite_r+0x24>
  4025ce:	f013 0901 	ands.w	r9, r3, #1
  4025d2:	d145      	bne.n	402660 <__sfvwrite_r+0x110>
  4025d4:	464f      	mov	r7, r9
  4025d6:	9601      	str	r6, [sp, #4]
  4025d8:	b337      	cbz	r7, 402628 <__sfvwrite_r+0xd8>
  4025da:	059a      	lsls	r2, r3, #22
  4025dc:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4025e0:	f140 8083 	bpl.w	4026ea <__sfvwrite_r+0x19a>
  4025e4:	4547      	cmp	r7, r8
  4025e6:	46c3      	mov	fp, r8
  4025e8:	f0c0 80ab 	bcc.w	402742 <__sfvwrite_r+0x1f2>
  4025ec:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4025f0:	f040 80ac 	bne.w	40274c <__sfvwrite_r+0x1fc>
  4025f4:	6820      	ldr	r0, [r4, #0]
  4025f6:	46ba      	mov	sl, r7
  4025f8:	465a      	mov	r2, fp
  4025fa:	4649      	mov	r1, r9
  4025fc:	f000 fd92 	bl	403124 <memmove>
  402600:	68a2      	ldr	r2, [r4, #8]
  402602:	6823      	ldr	r3, [r4, #0]
  402604:	eba2 0208 	sub.w	r2, r2, r8
  402608:	445b      	add	r3, fp
  40260a:	60a2      	str	r2, [r4, #8]
  40260c:	6023      	str	r3, [r4, #0]
  40260e:	9a01      	ldr	r2, [sp, #4]
  402610:	6893      	ldr	r3, [r2, #8]
  402612:	eba3 030a 	sub.w	r3, r3, sl
  402616:	44d1      	add	r9, sl
  402618:	eba7 070a 	sub.w	r7, r7, sl
  40261c:	6093      	str	r3, [r2, #8]
  40261e:	2b00      	cmp	r3, #0
  402620:	d0c5      	beq.n	4025ae <__sfvwrite_r+0x5e>
  402622:	89a3      	ldrh	r3, [r4, #12]
  402624:	2f00      	cmp	r7, #0
  402626:	d1d8      	bne.n	4025da <__sfvwrite_r+0x8a>
  402628:	f8d5 9000 	ldr.w	r9, [r5]
  40262c:	686f      	ldr	r7, [r5, #4]
  40262e:	3508      	adds	r5, #8
  402630:	e7d2      	b.n	4025d8 <__sfvwrite_r+0x88>
  402632:	f8d5 9000 	ldr.w	r9, [r5]
  402636:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40263a:	3508      	adds	r5, #8
  40263c:	e79f      	b.n	40257e <__sfvwrite_r+0x2e>
  40263e:	2000      	movs	r0, #0
  402640:	4770      	bx	lr
  402642:	4621      	mov	r1, r4
  402644:	9800      	ldr	r0, [sp, #0]
  402646:	f7ff fd1f 	bl	402088 <_fflush_r>
  40264a:	b370      	cbz	r0, 4026aa <__sfvwrite_r+0x15a>
  40264c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402654:	f04f 30ff 	mov.w	r0, #4294967295
  402658:	81a3      	strh	r3, [r4, #12]
  40265a:	b003      	add	sp, #12
  40265c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402660:	4681      	mov	r9, r0
  402662:	4633      	mov	r3, r6
  402664:	464e      	mov	r6, r9
  402666:	46a8      	mov	r8, r5
  402668:	469a      	mov	sl, r3
  40266a:	464d      	mov	r5, r9
  40266c:	b34e      	cbz	r6, 4026c2 <__sfvwrite_r+0x172>
  40266e:	b380      	cbz	r0, 4026d2 <__sfvwrite_r+0x182>
  402670:	6820      	ldr	r0, [r4, #0]
  402672:	6923      	ldr	r3, [r4, #16]
  402674:	6962      	ldr	r2, [r4, #20]
  402676:	45b1      	cmp	r9, r6
  402678:	46cb      	mov	fp, r9
  40267a:	bf28      	it	cs
  40267c:	46b3      	movcs	fp, r6
  40267e:	4298      	cmp	r0, r3
  402680:	465f      	mov	r7, fp
  402682:	d904      	bls.n	40268e <__sfvwrite_r+0x13e>
  402684:	68a3      	ldr	r3, [r4, #8]
  402686:	4413      	add	r3, r2
  402688:	459b      	cmp	fp, r3
  40268a:	f300 80a6 	bgt.w	4027da <__sfvwrite_r+0x28a>
  40268e:	4593      	cmp	fp, r2
  402690:	db4b      	blt.n	40272a <__sfvwrite_r+0x1da>
  402692:	4613      	mov	r3, r2
  402694:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402696:	69e1      	ldr	r1, [r4, #28]
  402698:	9800      	ldr	r0, [sp, #0]
  40269a:	462a      	mov	r2, r5
  40269c:	47b8      	blx	r7
  40269e:	1e07      	subs	r7, r0, #0
  4026a0:	ddd4      	ble.n	40264c <__sfvwrite_r+0xfc>
  4026a2:	ebb9 0907 	subs.w	r9, r9, r7
  4026a6:	d0cc      	beq.n	402642 <__sfvwrite_r+0xf2>
  4026a8:	2001      	movs	r0, #1
  4026aa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4026ae:	1bdb      	subs	r3, r3, r7
  4026b0:	443d      	add	r5, r7
  4026b2:	1bf6      	subs	r6, r6, r7
  4026b4:	f8ca 3008 	str.w	r3, [sl, #8]
  4026b8:	2b00      	cmp	r3, #0
  4026ba:	f43f af78 	beq.w	4025ae <__sfvwrite_r+0x5e>
  4026be:	2e00      	cmp	r6, #0
  4026c0:	d1d5      	bne.n	40266e <__sfvwrite_r+0x11e>
  4026c2:	f108 0308 	add.w	r3, r8, #8
  4026c6:	e913 0060 	ldmdb	r3, {r5, r6}
  4026ca:	4698      	mov	r8, r3
  4026cc:	3308      	adds	r3, #8
  4026ce:	2e00      	cmp	r6, #0
  4026d0:	d0f9      	beq.n	4026c6 <__sfvwrite_r+0x176>
  4026d2:	4632      	mov	r2, r6
  4026d4:	210a      	movs	r1, #10
  4026d6:	4628      	mov	r0, r5
  4026d8:	f000 fc3a 	bl	402f50 <memchr>
  4026dc:	2800      	cmp	r0, #0
  4026de:	f000 80a1 	beq.w	402824 <__sfvwrite_r+0x2d4>
  4026e2:	3001      	adds	r0, #1
  4026e4:	eba0 0905 	sub.w	r9, r0, r5
  4026e8:	e7c2      	b.n	402670 <__sfvwrite_r+0x120>
  4026ea:	6820      	ldr	r0, [r4, #0]
  4026ec:	6923      	ldr	r3, [r4, #16]
  4026ee:	4298      	cmp	r0, r3
  4026f0:	d802      	bhi.n	4026f8 <__sfvwrite_r+0x1a8>
  4026f2:	6963      	ldr	r3, [r4, #20]
  4026f4:	429f      	cmp	r7, r3
  4026f6:	d25d      	bcs.n	4027b4 <__sfvwrite_r+0x264>
  4026f8:	45b8      	cmp	r8, r7
  4026fa:	bf28      	it	cs
  4026fc:	46b8      	movcs	r8, r7
  4026fe:	4642      	mov	r2, r8
  402700:	4649      	mov	r1, r9
  402702:	f000 fd0f 	bl	403124 <memmove>
  402706:	68a3      	ldr	r3, [r4, #8]
  402708:	6822      	ldr	r2, [r4, #0]
  40270a:	eba3 0308 	sub.w	r3, r3, r8
  40270e:	4442      	add	r2, r8
  402710:	60a3      	str	r3, [r4, #8]
  402712:	6022      	str	r2, [r4, #0]
  402714:	b10b      	cbz	r3, 40271a <__sfvwrite_r+0x1ca>
  402716:	46c2      	mov	sl, r8
  402718:	e779      	b.n	40260e <__sfvwrite_r+0xbe>
  40271a:	4621      	mov	r1, r4
  40271c:	9800      	ldr	r0, [sp, #0]
  40271e:	f7ff fcb3 	bl	402088 <_fflush_r>
  402722:	2800      	cmp	r0, #0
  402724:	d192      	bne.n	40264c <__sfvwrite_r+0xfc>
  402726:	46c2      	mov	sl, r8
  402728:	e771      	b.n	40260e <__sfvwrite_r+0xbe>
  40272a:	465a      	mov	r2, fp
  40272c:	4629      	mov	r1, r5
  40272e:	f000 fcf9 	bl	403124 <memmove>
  402732:	68a2      	ldr	r2, [r4, #8]
  402734:	6823      	ldr	r3, [r4, #0]
  402736:	eba2 020b 	sub.w	r2, r2, fp
  40273a:	445b      	add	r3, fp
  40273c:	60a2      	str	r2, [r4, #8]
  40273e:	6023      	str	r3, [r4, #0]
  402740:	e7af      	b.n	4026a2 <__sfvwrite_r+0x152>
  402742:	6820      	ldr	r0, [r4, #0]
  402744:	46b8      	mov	r8, r7
  402746:	46ba      	mov	sl, r7
  402748:	46bb      	mov	fp, r7
  40274a:	e755      	b.n	4025f8 <__sfvwrite_r+0xa8>
  40274c:	6962      	ldr	r2, [r4, #20]
  40274e:	6820      	ldr	r0, [r4, #0]
  402750:	6921      	ldr	r1, [r4, #16]
  402752:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402756:	eba0 0a01 	sub.w	sl, r0, r1
  40275a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40275e:	f10a 0001 	add.w	r0, sl, #1
  402762:	ea4f 0868 	mov.w	r8, r8, asr #1
  402766:	4438      	add	r0, r7
  402768:	4540      	cmp	r0, r8
  40276a:	4642      	mov	r2, r8
  40276c:	bf84      	itt	hi
  40276e:	4680      	movhi	r8, r0
  402770:	4642      	movhi	r2, r8
  402772:	055b      	lsls	r3, r3, #21
  402774:	d544      	bpl.n	402800 <__sfvwrite_r+0x2b0>
  402776:	4611      	mov	r1, r2
  402778:	9800      	ldr	r0, [sp, #0]
  40277a:	f000 f921 	bl	4029c0 <_malloc_r>
  40277e:	4683      	mov	fp, r0
  402780:	2800      	cmp	r0, #0
  402782:	d055      	beq.n	402830 <__sfvwrite_r+0x2e0>
  402784:	4652      	mov	r2, sl
  402786:	6921      	ldr	r1, [r4, #16]
  402788:	f000 fc32 	bl	402ff0 <memcpy>
  40278c:	89a3      	ldrh	r3, [r4, #12]
  40278e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402796:	81a3      	strh	r3, [r4, #12]
  402798:	eb0b 000a 	add.w	r0, fp, sl
  40279c:	eba8 030a 	sub.w	r3, r8, sl
  4027a0:	f8c4 b010 	str.w	fp, [r4, #16]
  4027a4:	f8c4 8014 	str.w	r8, [r4, #20]
  4027a8:	6020      	str	r0, [r4, #0]
  4027aa:	60a3      	str	r3, [r4, #8]
  4027ac:	46b8      	mov	r8, r7
  4027ae:	46ba      	mov	sl, r7
  4027b0:	46bb      	mov	fp, r7
  4027b2:	e721      	b.n	4025f8 <__sfvwrite_r+0xa8>
  4027b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4027b8:	42b9      	cmp	r1, r7
  4027ba:	bf28      	it	cs
  4027bc:	4639      	movcs	r1, r7
  4027be:	464a      	mov	r2, r9
  4027c0:	fb91 f1f3 	sdiv	r1, r1, r3
  4027c4:	9800      	ldr	r0, [sp, #0]
  4027c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4027c8:	fb03 f301 	mul.w	r3, r3, r1
  4027cc:	69e1      	ldr	r1, [r4, #28]
  4027ce:	47b0      	blx	r6
  4027d0:	f1b0 0a00 	subs.w	sl, r0, #0
  4027d4:	f73f af1b 	bgt.w	40260e <__sfvwrite_r+0xbe>
  4027d8:	e738      	b.n	40264c <__sfvwrite_r+0xfc>
  4027da:	461a      	mov	r2, r3
  4027dc:	4629      	mov	r1, r5
  4027de:	9301      	str	r3, [sp, #4]
  4027e0:	f000 fca0 	bl	403124 <memmove>
  4027e4:	6822      	ldr	r2, [r4, #0]
  4027e6:	9b01      	ldr	r3, [sp, #4]
  4027e8:	9800      	ldr	r0, [sp, #0]
  4027ea:	441a      	add	r2, r3
  4027ec:	6022      	str	r2, [r4, #0]
  4027ee:	4621      	mov	r1, r4
  4027f0:	f7ff fc4a 	bl	402088 <_fflush_r>
  4027f4:	9b01      	ldr	r3, [sp, #4]
  4027f6:	2800      	cmp	r0, #0
  4027f8:	f47f af28 	bne.w	40264c <__sfvwrite_r+0xfc>
  4027fc:	461f      	mov	r7, r3
  4027fe:	e750      	b.n	4026a2 <__sfvwrite_r+0x152>
  402800:	9800      	ldr	r0, [sp, #0]
  402802:	f000 fcff 	bl	403204 <_realloc_r>
  402806:	4683      	mov	fp, r0
  402808:	2800      	cmp	r0, #0
  40280a:	d1c5      	bne.n	402798 <__sfvwrite_r+0x248>
  40280c:	9d00      	ldr	r5, [sp, #0]
  40280e:	6921      	ldr	r1, [r4, #16]
  402810:	4628      	mov	r0, r5
  402812:	f7ff fdb7 	bl	402384 <_free_r>
  402816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40281a:	220c      	movs	r2, #12
  40281c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402820:	602a      	str	r2, [r5, #0]
  402822:	e715      	b.n	402650 <__sfvwrite_r+0x100>
  402824:	f106 0901 	add.w	r9, r6, #1
  402828:	e722      	b.n	402670 <__sfvwrite_r+0x120>
  40282a:	f04f 30ff 	mov.w	r0, #4294967295
  40282e:	e6bf      	b.n	4025b0 <__sfvwrite_r+0x60>
  402830:	9a00      	ldr	r2, [sp, #0]
  402832:	230c      	movs	r3, #12
  402834:	6013      	str	r3, [r2, #0]
  402836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40283a:	e709      	b.n	402650 <__sfvwrite_r+0x100>
  40283c:	7ffffc00 	.word	0x7ffffc00

00402840 <_fwalk_reent>:
  402840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402844:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402848:	d01f      	beq.n	40288a <_fwalk_reent+0x4a>
  40284a:	4688      	mov	r8, r1
  40284c:	4606      	mov	r6, r0
  40284e:	f04f 0900 	mov.w	r9, #0
  402852:	687d      	ldr	r5, [r7, #4]
  402854:	68bc      	ldr	r4, [r7, #8]
  402856:	3d01      	subs	r5, #1
  402858:	d411      	bmi.n	40287e <_fwalk_reent+0x3e>
  40285a:	89a3      	ldrh	r3, [r4, #12]
  40285c:	2b01      	cmp	r3, #1
  40285e:	f105 35ff 	add.w	r5, r5, #4294967295
  402862:	d908      	bls.n	402876 <_fwalk_reent+0x36>
  402864:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402868:	3301      	adds	r3, #1
  40286a:	4621      	mov	r1, r4
  40286c:	4630      	mov	r0, r6
  40286e:	d002      	beq.n	402876 <_fwalk_reent+0x36>
  402870:	47c0      	blx	r8
  402872:	ea49 0900 	orr.w	r9, r9, r0
  402876:	1c6b      	adds	r3, r5, #1
  402878:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40287c:	d1ed      	bne.n	40285a <_fwalk_reent+0x1a>
  40287e:	683f      	ldr	r7, [r7, #0]
  402880:	2f00      	cmp	r7, #0
  402882:	d1e6      	bne.n	402852 <_fwalk_reent+0x12>
  402884:	4648      	mov	r0, r9
  402886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40288a:	46b9      	mov	r9, r7
  40288c:	4648      	mov	r0, r9
  40288e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402892:	bf00      	nop

00402894 <__locale_mb_cur_max>:
  402894:	4b04      	ldr	r3, [pc, #16]	; (4028a8 <__locale_mb_cur_max+0x14>)
  402896:	4a05      	ldr	r2, [pc, #20]	; (4028ac <__locale_mb_cur_max+0x18>)
  402898:	681b      	ldr	r3, [r3, #0]
  40289a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40289c:	2b00      	cmp	r3, #0
  40289e:	bf08      	it	eq
  4028a0:	4613      	moveq	r3, r2
  4028a2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4028a6:	4770      	bx	lr
  4028a8:	20000010 	.word	0x20000010
  4028ac:	20000444 	.word	0x20000444

004028b0 <__retarget_lock_init_recursive>:
  4028b0:	4770      	bx	lr
  4028b2:	bf00      	nop

004028b4 <__retarget_lock_close_recursive>:
  4028b4:	4770      	bx	lr
  4028b6:	bf00      	nop

004028b8 <__retarget_lock_acquire_recursive>:
  4028b8:	4770      	bx	lr
  4028ba:	bf00      	nop

004028bc <__retarget_lock_release_recursive>:
  4028bc:	4770      	bx	lr
  4028be:	bf00      	nop

004028c0 <__swhatbuf_r>:
  4028c0:	b570      	push	{r4, r5, r6, lr}
  4028c2:	460c      	mov	r4, r1
  4028c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4028c8:	2900      	cmp	r1, #0
  4028ca:	b090      	sub	sp, #64	; 0x40
  4028cc:	4615      	mov	r5, r2
  4028ce:	461e      	mov	r6, r3
  4028d0:	db14      	blt.n	4028fc <__swhatbuf_r+0x3c>
  4028d2:	aa01      	add	r2, sp, #4
  4028d4:	f001 f87e 	bl	4039d4 <_fstat_r>
  4028d8:	2800      	cmp	r0, #0
  4028da:	db0f      	blt.n	4028fc <__swhatbuf_r+0x3c>
  4028dc:	9a02      	ldr	r2, [sp, #8]
  4028de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4028e2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4028e6:	fab2 f282 	clz	r2, r2
  4028ea:	0952      	lsrs	r2, r2, #5
  4028ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4028f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4028f4:	6032      	str	r2, [r6, #0]
  4028f6:	602b      	str	r3, [r5, #0]
  4028f8:	b010      	add	sp, #64	; 0x40
  4028fa:	bd70      	pop	{r4, r5, r6, pc}
  4028fc:	89a2      	ldrh	r2, [r4, #12]
  4028fe:	2300      	movs	r3, #0
  402900:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402904:	6033      	str	r3, [r6, #0]
  402906:	d004      	beq.n	402912 <__swhatbuf_r+0x52>
  402908:	2240      	movs	r2, #64	; 0x40
  40290a:	4618      	mov	r0, r3
  40290c:	602a      	str	r2, [r5, #0]
  40290e:	b010      	add	sp, #64	; 0x40
  402910:	bd70      	pop	{r4, r5, r6, pc}
  402912:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402916:	602b      	str	r3, [r5, #0]
  402918:	b010      	add	sp, #64	; 0x40
  40291a:	bd70      	pop	{r4, r5, r6, pc}

0040291c <__smakebuf_r>:
  40291c:	898a      	ldrh	r2, [r1, #12]
  40291e:	0792      	lsls	r2, r2, #30
  402920:	460b      	mov	r3, r1
  402922:	d506      	bpl.n	402932 <__smakebuf_r+0x16>
  402924:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402928:	2101      	movs	r1, #1
  40292a:	601a      	str	r2, [r3, #0]
  40292c:	611a      	str	r2, [r3, #16]
  40292e:	6159      	str	r1, [r3, #20]
  402930:	4770      	bx	lr
  402932:	b5f0      	push	{r4, r5, r6, r7, lr}
  402934:	b083      	sub	sp, #12
  402936:	ab01      	add	r3, sp, #4
  402938:	466a      	mov	r2, sp
  40293a:	460c      	mov	r4, r1
  40293c:	4606      	mov	r6, r0
  40293e:	f7ff ffbf 	bl	4028c0 <__swhatbuf_r>
  402942:	9900      	ldr	r1, [sp, #0]
  402944:	4605      	mov	r5, r0
  402946:	4630      	mov	r0, r6
  402948:	f000 f83a 	bl	4029c0 <_malloc_r>
  40294c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402950:	b1d8      	cbz	r0, 40298a <__smakebuf_r+0x6e>
  402952:	9a01      	ldr	r2, [sp, #4]
  402954:	4f15      	ldr	r7, [pc, #84]	; (4029ac <__smakebuf_r+0x90>)
  402956:	9900      	ldr	r1, [sp, #0]
  402958:	63f7      	str	r7, [r6, #60]	; 0x3c
  40295a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40295e:	81a3      	strh	r3, [r4, #12]
  402960:	6020      	str	r0, [r4, #0]
  402962:	6120      	str	r0, [r4, #16]
  402964:	6161      	str	r1, [r4, #20]
  402966:	b91a      	cbnz	r2, 402970 <__smakebuf_r+0x54>
  402968:	432b      	orrs	r3, r5
  40296a:	81a3      	strh	r3, [r4, #12]
  40296c:	b003      	add	sp, #12
  40296e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402970:	4630      	mov	r0, r6
  402972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402976:	f001 f841 	bl	4039fc <_isatty_r>
  40297a:	b1a0      	cbz	r0, 4029a6 <__smakebuf_r+0x8a>
  40297c:	89a3      	ldrh	r3, [r4, #12]
  40297e:	f023 0303 	bic.w	r3, r3, #3
  402982:	f043 0301 	orr.w	r3, r3, #1
  402986:	b21b      	sxth	r3, r3
  402988:	e7ee      	b.n	402968 <__smakebuf_r+0x4c>
  40298a:	059a      	lsls	r2, r3, #22
  40298c:	d4ee      	bmi.n	40296c <__smakebuf_r+0x50>
  40298e:	f023 0303 	bic.w	r3, r3, #3
  402992:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402996:	f043 0302 	orr.w	r3, r3, #2
  40299a:	2101      	movs	r1, #1
  40299c:	81a3      	strh	r3, [r4, #12]
  40299e:	6022      	str	r2, [r4, #0]
  4029a0:	6122      	str	r2, [r4, #16]
  4029a2:	6161      	str	r1, [r4, #20]
  4029a4:	e7e2      	b.n	40296c <__smakebuf_r+0x50>
  4029a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4029aa:	e7dd      	b.n	402968 <__smakebuf_r+0x4c>
  4029ac:	004020dd 	.word	0x004020dd

004029b0 <malloc>:
  4029b0:	4b02      	ldr	r3, [pc, #8]	; (4029bc <malloc+0xc>)
  4029b2:	4601      	mov	r1, r0
  4029b4:	6818      	ldr	r0, [r3, #0]
  4029b6:	f000 b803 	b.w	4029c0 <_malloc_r>
  4029ba:	bf00      	nop
  4029bc:	20000010 	.word	0x20000010

004029c0 <_malloc_r>:
  4029c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4029c4:	f101 060b 	add.w	r6, r1, #11
  4029c8:	2e16      	cmp	r6, #22
  4029ca:	b083      	sub	sp, #12
  4029cc:	4605      	mov	r5, r0
  4029ce:	f240 809e 	bls.w	402b0e <_malloc_r+0x14e>
  4029d2:	f036 0607 	bics.w	r6, r6, #7
  4029d6:	f100 80bd 	bmi.w	402b54 <_malloc_r+0x194>
  4029da:	42b1      	cmp	r1, r6
  4029dc:	f200 80ba 	bhi.w	402b54 <_malloc_r+0x194>
  4029e0:	f000 fc04 	bl	4031ec <__malloc_lock>
  4029e4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4029e8:	f0c0 8293 	bcc.w	402f12 <_malloc_r+0x552>
  4029ec:	0a73      	lsrs	r3, r6, #9
  4029ee:	f000 80b8 	beq.w	402b62 <_malloc_r+0x1a2>
  4029f2:	2b04      	cmp	r3, #4
  4029f4:	f200 8179 	bhi.w	402cea <_malloc_r+0x32a>
  4029f8:	09b3      	lsrs	r3, r6, #6
  4029fa:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4029fe:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402a02:	00c3      	lsls	r3, r0, #3
  402a04:	4fbf      	ldr	r7, [pc, #764]	; (402d04 <_malloc_r+0x344>)
  402a06:	443b      	add	r3, r7
  402a08:	f1a3 0108 	sub.w	r1, r3, #8
  402a0c:	685c      	ldr	r4, [r3, #4]
  402a0e:	42a1      	cmp	r1, r4
  402a10:	d106      	bne.n	402a20 <_malloc_r+0x60>
  402a12:	e00c      	b.n	402a2e <_malloc_r+0x6e>
  402a14:	2a00      	cmp	r2, #0
  402a16:	f280 80aa 	bge.w	402b6e <_malloc_r+0x1ae>
  402a1a:	68e4      	ldr	r4, [r4, #12]
  402a1c:	42a1      	cmp	r1, r4
  402a1e:	d006      	beq.n	402a2e <_malloc_r+0x6e>
  402a20:	6863      	ldr	r3, [r4, #4]
  402a22:	f023 0303 	bic.w	r3, r3, #3
  402a26:	1b9a      	subs	r2, r3, r6
  402a28:	2a0f      	cmp	r2, #15
  402a2a:	ddf3      	ble.n	402a14 <_malloc_r+0x54>
  402a2c:	4670      	mov	r0, lr
  402a2e:	693c      	ldr	r4, [r7, #16]
  402a30:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402d18 <_malloc_r+0x358>
  402a34:	4574      	cmp	r4, lr
  402a36:	f000 81ab 	beq.w	402d90 <_malloc_r+0x3d0>
  402a3a:	6863      	ldr	r3, [r4, #4]
  402a3c:	f023 0303 	bic.w	r3, r3, #3
  402a40:	1b9a      	subs	r2, r3, r6
  402a42:	2a0f      	cmp	r2, #15
  402a44:	f300 8190 	bgt.w	402d68 <_malloc_r+0x3a8>
  402a48:	2a00      	cmp	r2, #0
  402a4a:	f8c7 e014 	str.w	lr, [r7, #20]
  402a4e:	f8c7 e010 	str.w	lr, [r7, #16]
  402a52:	f280 809d 	bge.w	402b90 <_malloc_r+0x1d0>
  402a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402a5a:	f080 8161 	bcs.w	402d20 <_malloc_r+0x360>
  402a5e:	08db      	lsrs	r3, r3, #3
  402a60:	f103 0c01 	add.w	ip, r3, #1
  402a64:	1099      	asrs	r1, r3, #2
  402a66:	687a      	ldr	r2, [r7, #4]
  402a68:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402a6c:	f8c4 8008 	str.w	r8, [r4, #8]
  402a70:	2301      	movs	r3, #1
  402a72:	408b      	lsls	r3, r1
  402a74:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402a78:	4313      	orrs	r3, r2
  402a7a:	3908      	subs	r1, #8
  402a7c:	60e1      	str	r1, [r4, #12]
  402a7e:	607b      	str	r3, [r7, #4]
  402a80:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402a84:	f8c8 400c 	str.w	r4, [r8, #12]
  402a88:	1082      	asrs	r2, r0, #2
  402a8a:	2401      	movs	r4, #1
  402a8c:	4094      	lsls	r4, r2
  402a8e:	429c      	cmp	r4, r3
  402a90:	f200 808b 	bhi.w	402baa <_malloc_r+0x1ea>
  402a94:	421c      	tst	r4, r3
  402a96:	d106      	bne.n	402aa6 <_malloc_r+0xe6>
  402a98:	f020 0003 	bic.w	r0, r0, #3
  402a9c:	0064      	lsls	r4, r4, #1
  402a9e:	421c      	tst	r4, r3
  402aa0:	f100 0004 	add.w	r0, r0, #4
  402aa4:	d0fa      	beq.n	402a9c <_malloc_r+0xdc>
  402aa6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402aaa:	46cc      	mov	ip, r9
  402aac:	4680      	mov	r8, r0
  402aae:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402ab2:	459c      	cmp	ip, r3
  402ab4:	d107      	bne.n	402ac6 <_malloc_r+0x106>
  402ab6:	e16d      	b.n	402d94 <_malloc_r+0x3d4>
  402ab8:	2a00      	cmp	r2, #0
  402aba:	f280 817b 	bge.w	402db4 <_malloc_r+0x3f4>
  402abe:	68db      	ldr	r3, [r3, #12]
  402ac0:	459c      	cmp	ip, r3
  402ac2:	f000 8167 	beq.w	402d94 <_malloc_r+0x3d4>
  402ac6:	6859      	ldr	r1, [r3, #4]
  402ac8:	f021 0103 	bic.w	r1, r1, #3
  402acc:	1b8a      	subs	r2, r1, r6
  402ace:	2a0f      	cmp	r2, #15
  402ad0:	ddf2      	ble.n	402ab8 <_malloc_r+0xf8>
  402ad2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402ad6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402ada:	9300      	str	r3, [sp, #0]
  402adc:	199c      	adds	r4, r3, r6
  402ade:	4628      	mov	r0, r5
  402ae0:	f046 0601 	orr.w	r6, r6, #1
  402ae4:	f042 0501 	orr.w	r5, r2, #1
  402ae8:	605e      	str	r6, [r3, #4]
  402aea:	f8c8 c00c 	str.w	ip, [r8, #12]
  402aee:	f8cc 8008 	str.w	r8, [ip, #8]
  402af2:	617c      	str	r4, [r7, #20]
  402af4:	613c      	str	r4, [r7, #16]
  402af6:	f8c4 e00c 	str.w	lr, [r4, #12]
  402afa:	f8c4 e008 	str.w	lr, [r4, #8]
  402afe:	6065      	str	r5, [r4, #4]
  402b00:	505a      	str	r2, [r3, r1]
  402b02:	f000 fb79 	bl	4031f8 <__malloc_unlock>
  402b06:	9b00      	ldr	r3, [sp, #0]
  402b08:	f103 0408 	add.w	r4, r3, #8
  402b0c:	e01e      	b.n	402b4c <_malloc_r+0x18c>
  402b0e:	2910      	cmp	r1, #16
  402b10:	d820      	bhi.n	402b54 <_malloc_r+0x194>
  402b12:	f000 fb6b 	bl	4031ec <__malloc_lock>
  402b16:	2610      	movs	r6, #16
  402b18:	2318      	movs	r3, #24
  402b1a:	2002      	movs	r0, #2
  402b1c:	4f79      	ldr	r7, [pc, #484]	; (402d04 <_malloc_r+0x344>)
  402b1e:	443b      	add	r3, r7
  402b20:	f1a3 0208 	sub.w	r2, r3, #8
  402b24:	685c      	ldr	r4, [r3, #4]
  402b26:	4294      	cmp	r4, r2
  402b28:	f000 813d 	beq.w	402da6 <_malloc_r+0x3e6>
  402b2c:	6863      	ldr	r3, [r4, #4]
  402b2e:	68e1      	ldr	r1, [r4, #12]
  402b30:	68a6      	ldr	r6, [r4, #8]
  402b32:	f023 0303 	bic.w	r3, r3, #3
  402b36:	4423      	add	r3, r4
  402b38:	4628      	mov	r0, r5
  402b3a:	685a      	ldr	r2, [r3, #4]
  402b3c:	60f1      	str	r1, [r6, #12]
  402b3e:	f042 0201 	orr.w	r2, r2, #1
  402b42:	608e      	str	r6, [r1, #8]
  402b44:	605a      	str	r2, [r3, #4]
  402b46:	f000 fb57 	bl	4031f8 <__malloc_unlock>
  402b4a:	3408      	adds	r4, #8
  402b4c:	4620      	mov	r0, r4
  402b4e:	b003      	add	sp, #12
  402b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b54:	2400      	movs	r4, #0
  402b56:	230c      	movs	r3, #12
  402b58:	4620      	mov	r0, r4
  402b5a:	602b      	str	r3, [r5, #0]
  402b5c:	b003      	add	sp, #12
  402b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b62:	2040      	movs	r0, #64	; 0x40
  402b64:	f44f 7300 	mov.w	r3, #512	; 0x200
  402b68:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402b6c:	e74a      	b.n	402a04 <_malloc_r+0x44>
  402b6e:	4423      	add	r3, r4
  402b70:	68e1      	ldr	r1, [r4, #12]
  402b72:	685a      	ldr	r2, [r3, #4]
  402b74:	68a6      	ldr	r6, [r4, #8]
  402b76:	f042 0201 	orr.w	r2, r2, #1
  402b7a:	60f1      	str	r1, [r6, #12]
  402b7c:	4628      	mov	r0, r5
  402b7e:	608e      	str	r6, [r1, #8]
  402b80:	605a      	str	r2, [r3, #4]
  402b82:	f000 fb39 	bl	4031f8 <__malloc_unlock>
  402b86:	3408      	adds	r4, #8
  402b88:	4620      	mov	r0, r4
  402b8a:	b003      	add	sp, #12
  402b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b90:	4423      	add	r3, r4
  402b92:	4628      	mov	r0, r5
  402b94:	685a      	ldr	r2, [r3, #4]
  402b96:	f042 0201 	orr.w	r2, r2, #1
  402b9a:	605a      	str	r2, [r3, #4]
  402b9c:	f000 fb2c 	bl	4031f8 <__malloc_unlock>
  402ba0:	3408      	adds	r4, #8
  402ba2:	4620      	mov	r0, r4
  402ba4:	b003      	add	sp, #12
  402ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402baa:	68bc      	ldr	r4, [r7, #8]
  402bac:	6863      	ldr	r3, [r4, #4]
  402bae:	f023 0803 	bic.w	r8, r3, #3
  402bb2:	45b0      	cmp	r8, r6
  402bb4:	d304      	bcc.n	402bc0 <_malloc_r+0x200>
  402bb6:	eba8 0306 	sub.w	r3, r8, r6
  402bba:	2b0f      	cmp	r3, #15
  402bbc:	f300 8085 	bgt.w	402cca <_malloc_r+0x30a>
  402bc0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402d1c <_malloc_r+0x35c>
  402bc4:	4b50      	ldr	r3, [pc, #320]	; (402d08 <_malloc_r+0x348>)
  402bc6:	f8d9 2000 	ldr.w	r2, [r9]
  402bca:	681b      	ldr	r3, [r3, #0]
  402bcc:	3201      	adds	r2, #1
  402bce:	4433      	add	r3, r6
  402bd0:	eb04 0a08 	add.w	sl, r4, r8
  402bd4:	f000 8155 	beq.w	402e82 <_malloc_r+0x4c2>
  402bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402bdc:	330f      	adds	r3, #15
  402bde:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402be2:	f02b 0b0f 	bic.w	fp, fp, #15
  402be6:	4659      	mov	r1, fp
  402be8:	4628      	mov	r0, r5
  402bea:	f000 fcb1 	bl	403550 <_sbrk_r>
  402bee:	1c41      	adds	r1, r0, #1
  402bf0:	4602      	mov	r2, r0
  402bf2:	f000 80fc 	beq.w	402dee <_malloc_r+0x42e>
  402bf6:	4582      	cmp	sl, r0
  402bf8:	f200 80f7 	bhi.w	402dea <_malloc_r+0x42a>
  402bfc:	4b43      	ldr	r3, [pc, #268]	; (402d0c <_malloc_r+0x34c>)
  402bfe:	6819      	ldr	r1, [r3, #0]
  402c00:	4459      	add	r1, fp
  402c02:	6019      	str	r1, [r3, #0]
  402c04:	f000 814d 	beq.w	402ea2 <_malloc_r+0x4e2>
  402c08:	f8d9 0000 	ldr.w	r0, [r9]
  402c0c:	3001      	adds	r0, #1
  402c0e:	bf1b      	ittet	ne
  402c10:	eba2 0a0a 	subne.w	sl, r2, sl
  402c14:	4451      	addne	r1, sl
  402c16:	f8c9 2000 	streq.w	r2, [r9]
  402c1a:	6019      	strne	r1, [r3, #0]
  402c1c:	f012 0107 	ands.w	r1, r2, #7
  402c20:	f000 8115 	beq.w	402e4e <_malloc_r+0x48e>
  402c24:	f1c1 0008 	rsb	r0, r1, #8
  402c28:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402c2c:	4402      	add	r2, r0
  402c2e:	3108      	adds	r1, #8
  402c30:	eb02 090b 	add.w	r9, r2, fp
  402c34:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402c38:	eba1 0909 	sub.w	r9, r1, r9
  402c3c:	4649      	mov	r1, r9
  402c3e:	4628      	mov	r0, r5
  402c40:	9301      	str	r3, [sp, #4]
  402c42:	9200      	str	r2, [sp, #0]
  402c44:	f000 fc84 	bl	403550 <_sbrk_r>
  402c48:	1c43      	adds	r3, r0, #1
  402c4a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402c4e:	f000 8143 	beq.w	402ed8 <_malloc_r+0x518>
  402c52:	1a80      	subs	r0, r0, r2
  402c54:	4448      	add	r0, r9
  402c56:	f040 0001 	orr.w	r0, r0, #1
  402c5a:	6819      	ldr	r1, [r3, #0]
  402c5c:	60ba      	str	r2, [r7, #8]
  402c5e:	4449      	add	r1, r9
  402c60:	42bc      	cmp	r4, r7
  402c62:	6050      	str	r0, [r2, #4]
  402c64:	6019      	str	r1, [r3, #0]
  402c66:	d017      	beq.n	402c98 <_malloc_r+0x2d8>
  402c68:	f1b8 0f0f 	cmp.w	r8, #15
  402c6c:	f240 80fb 	bls.w	402e66 <_malloc_r+0x4a6>
  402c70:	6860      	ldr	r0, [r4, #4]
  402c72:	f1a8 020c 	sub.w	r2, r8, #12
  402c76:	f022 0207 	bic.w	r2, r2, #7
  402c7a:	eb04 0e02 	add.w	lr, r4, r2
  402c7e:	f000 0001 	and.w	r0, r0, #1
  402c82:	f04f 0c05 	mov.w	ip, #5
  402c86:	4310      	orrs	r0, r2
  402c88:	2a0f      	cmp	r2, #15
  402c8a:	6060      	str	r0, [r4, #4]
  402c8c:	f8ce c004 	str.w	ip, [lr, #4]
  402c90:	f8ce c008 	str.w	ip, [lr, #8]
  402c94:	f200 8117 	bhi.w	402ec6 <_malloc_r+0x506>
  402c98:	4b1d      	ldr	r3, [pc, #116]	; (402d10 <_malloc_r+0x350>)
  402c9a:	68bc      	ldr	r4, [r7, #8]
  402c9c:	681a      	ldr	r2, [r3, #0]
  402c9e:	4291      	cmp	r1, r2
  402ca0:	bf88      	it	hi
  402ca2:	6019      	strhi	r1, [r3, #0]
  402ca4:	4b1b      	ldr	r3, [pc, #108]	; (402d14 <_malloc_r+0x354>)
  402ca6:	681a      	ldr	r2, [r3, #0]
  402ca8:	4291      	cmp	r1, r2
  402caa:	6862      	ldr	r2, [r4, #4]
  402cac:	bf88      	it	hi
  402cae:	6019      	strhi	r1, [r3, #0]
  402cb0:	f022 0203 	bic.w	r2, r2, #3
  402cb4:	4296      	cmp	r6, r2
  402cb6:	eba2 0306 	sub.w	r3, r2, r6
  402cba:	d801      	bhi.n	402cc0 <_malloc_r+0x300>
  402cbc:	2b0f      	cmp	r3, #15
  402cbe:	dc04      	bgt.n	402cca <_malloc_r+0x30a>
  402cc0:	4628      	mov	r0, r5
  402cc2:	f000 fa99 	bl	4031f8 <__malloc_unlock>
  402cc6:	2400      	movs	r4, #0
  402cc8:	e740      	b.n	402b4c <_malloc_r+0x18c>
  402cca:	19a2      	adds	r2, r4, r6
  402ccc:	f043 0301 	orr.w	r3, r3, #1
  402cd0:	f046 0601 	orr.w	r6, r6, #1
  402cd4:	6066      	str	r6, [r4, #4]
  402cd6:	4628      	mov	r0, r5
  402cd8:	60ba      	str	r2, [r7, #8]
  402cda:	6053      	str	r3, [r2, #4]
  402cdc:	f000 fa8c 	bl	4031f8 <__malloc_unlock>
  402ce0:	3408      	adds	r4, #8
  402ce2:	4620      	mov	r0, r4
  402ce4:	b003      	add	sp, #12
  402ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cea:	2b14      	cmp	r3, #20
  402cec:	d971      	bls.n	402dd2 <_malloc_r+0x412>
  402cee:	2b54      	cmp	r3, #84	; 0x54
  402cf0:	f200 80a3 	bhi.w	402e3a <_malloc_r+0x47a>
  402cf4:	0b33      	lsrs	r3, r6, #12
  402cf6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402cfa:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402cfe:	00c3      	lsls	r3, r0, #3
  402d00:	e680      	b.n	402a04 <_malloc_r+0x44>
  402d02:	bf00      	nop
  402d04:	200005b0 	.word	0x200005b0
  402d08:	20000b78 	.word	0x20000b78
  402d0c:	20000b48 	.word	0x20000b48
  402d10:	20000b70 	.word	0x20000b70
  402d14:	20000b74 	.word	0x20000b74
  402d18:	200005b8 	.word	0x200005b8
  402d1c:	200009b8 	.word	0x200009b8
  402d20:	0a5a      	lsrs	r2, r3, #9
  402d22:	2a04      	cmp	r2, #4
  402d24:	d95b      	bls.n	402dde <_malloc_r+0x41e>
  402d26:	2a14      	cmp	r2, #20
  402d28:	f200 80ae 	bhi.w	402e88 <_malloc_r+0x4c8>
  402d2c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402d30:	00c9      	lsls	r1, r1, #3
  402d32:	325b      	adds	r2, #91	; 0x5b
  402d34:	eb07 0c01 	add.w	ip, r7, r1
  402d38:	5879      	ldr	r1, [r7, r1]
  402d3a:	f1ac 0c08 	sub.w	ip, ip, #8
  402d3e:	458c      	cmp	ip, r1
  402d40:	f000 8088 	beq.w	402e54 <_malloc_r+0x494>
  402d44:	684a      	ldr	r2, [r1, #4]
  402d46:	f022 0203 	bic.w	r2, r2, #3
  402d4a:	4293      	cmp	r3, r2
  402d4c:	d273      	bcs.n	402e36 <_malloc_r+0x476>
  402d4e:	6889      	ldr	r1, [r1, #8]
  402d50:	458c      	cmp	ip, r1
  402d52:	d1f7      	bne.n	402d44 <_malloc_r+0x384>
  402d54:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402d58:	687b      	ldr	r3, [r7, #4]
  402d5a:	60e2      	str	r2, [r4, #12]
  402d5c:	f8c4 c008 	str.w	ip, [r4, #8]
  402d60:	6094      	str	r4, [r2, #8]
  402d62:	f8cc 400c 	str.w	r4, [ip, #12]
  402d66:	e68f      	b.n	402a88 <_malloc_r+0xc8>
  402d68:	19a1      	adds	r1, r4, r6
  402d6a:	f046 0c01 	orr.w	ip, r6, #1
  402d6e:	f042 0601 	orr.w	r6, r2, #1
  402d72:	f8c4 c004 	str.w	ip, [r4, #4]
  402d76:	4628      	mov	r0, r5
  402d78:	6179      	str	r1, [r7, #20]
  402d7a:	6139      	str	r1, [r7, #16]
  402d7c:	f8c1 e00c 	str.w	lr, [r1, #12]
  402d80:	f8c1 e008 	str.w	lr, [r1, #8]
  402d84:	604e      	str	r6, [r1, #4]
  402d86:	50e2      	str	r2, [r4, r3]
  402d88:	f000 fa36 	bl	4031f8 <__malloc_unlock>
  402d8c:	3408      	adds	r4, #8
  402d8e:	e6dd      	b.n	402b4c <_malloc_r+0x18c>
  402d90:	687b      	ldr	r3, [r7, #4]
  402d92:	e679      	b.n	402a88 <_malloc_r+0xc8>
  402d94:	f108 0801 	add.w	r8, r8, #1
  402d98:	f018 0f03 	tst.w	r8, #3
  402d9c:	f10c 0c08 	add.w	ip, ip, #8
  402da0:	f47f ae85 	bne.w	402aae <_malloc_r+0xee>
  402da4:	e02d      	b.n	402e02 <_malloc_r+0x442>
  402da6:	68dc      	ldr	r4, [r3, #12]
  402da8:	42a3      	cmp	r3, r4
  402daa:	bf08      	it	eq
  402dac:	3002      	addeq	r0, #2
  402dae:	f43f ae3e 	beq.w	402a2e <_malloc_r+0x6e>
  402db2:	e6bb      	b.n	402b2c <_malloc_r+0x16c>
  402db4:	4419      	add	r1, r3
  402db6:	461c      	mov	r4, r3
  402db8:	684a      	ldr	r2, [r1, #4]
  402dba:	68db      	ldr	r3, [r3, #12]
  402dbc:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402dc0:	f042 0201 	orr.w	r2, r2, #1
  402dc4:	604a      	str	r2, [r1, #4]
  402dc6:	4628      	mov	r0, r5
  402dc8:	60f3      	str	r3, [r6, #12]
  402dca:	609e      	str	r6, [r3, #8]
  402dcc:	f000 fa14 	bl	4031f8 <__malloc_unlock>
  402dd0:	e6bc      	b.n	402b4c <_malloc_r+0x18c>
  402dd2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402dd6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402dda:	00c3      	lsls	r3, r0, #3
  402ddc:	e612      	b.n	402a04 <_malloc_r+0x44>
  402dde:	099a      	lsrs	r2, r3, #6
  402de0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402de4:	00c9      	lsls	r1, r1, #3
  402de6:	3238      	adds	r2, #56	; 0x38
  402de8:	e7a4      	b.n	402d34 <_malloc_r+0x374>
  402dea:	42bc      	cmp	r4, r7
  402dec:	d054      	beq.n	402e98 <_malloc_r+0x4d8>
  402dee:	68bc      	ldr	r4, [r7, #8]
  402df0:	6862      	ldr	r2, [r4, #4]
  402df2:	f022 0203 	bic.w	r2, r2, #3
  402df6:	e75d      	b.n	402cb4 <_malloc_r+0x2f4>
  402df8:	f859 3908 	ldr.w	r3, [r9], #-8
  402dfc:	4599      	cmp	r9, r3
  402dfe:	f040 8086 	bne.w	402f0e <_malloc_r+0x54e>
  402e02:	f010 0f03 	tst.w	r0, #3
  402e06:	f100 30ff 	add.w	r0, r0, #4294967295
  402e0a:	d1f5      	bne.n	402df8 <_malloc_r+0x438>
  402e0c:	687b      	ldr	r3, [r7, #4]
  402e0e:	ea23 0304 	bic.w	r3, r3, r4
  402e12:	607b      	str	r3, [r7, #4]
  402e14:	0064      	lsls	r4, r4, #1
  402e16:	429c      	cmp	r4, r3
  402e18:	f63f aec7 	bhi.w	402baa <_malloc_r+0x1ea>
  402e1c:	2c00      	cmp	r4, #0
  402e1e:	f43f aec4 	beq.w	402baa <_malloc_r+0x1ea>
  402e22:	421c      	tst	r4, r3
  402e24:	4640      	mov	r0, r8
  402e26:	f47f ae3e 	bne.w	402aa6 <_malloc_r+0xe6>
  402e2a:	0064      	lsls	r4, r4, #1
  402e2c:	421c      	tst	r4, r3
  402e2e:	f100 0004 	add.w	r0, r0, #4
  402e32:	d0fa      	beq.n	402e2a <_malloc_r+0x46a>
  402e34:	e637      	b.n	402aa6 <_malloc_r+0xe6>
  402e36:	468c      	mov	ip, r1
  402e38:	e78c      	b.n	402d54 <_malloc_r+0x394>
  402e3a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402e3e:	d815      	bhi.n	402e6c <_malloc_r+0x4ac>
  402e40:	0bf3      	lsrs	r3, r6, #15
  402e42:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402e46:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  402e4a:	00c3      	lsls	r3, r0, #3
  402e4c:	e5da      	b.n	402a04 <_malloc_r+0x44>
  402e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402e52:	e6ed      	b.n	402c30 <_malloc_r+0x270>
  402e54:	687b      	ldr	r3, [r7, #4]
  402e56:	1092      	asrs	r2, r2, #2
  402e58:	2101      	movs	r1, #1
  402e5a:	fa01 f202 	lsl.w	r2, r1, r2
  402e5e:	4313      	orrs	r3, r2
  402e60:	607b      	str	r3, [r7, #4]
  402e62:	4662      	mov	r2, ip
  402e64:	e779      	b.n	402d5a <_malloc_r+0x39a>
  402e66:	2301      	movs	r3, #1
  402e68:	6053      	str	r3, [r2, #4]
  402e6a:	e729      	b.n	402cc0 <_malloc_r+0x300>
  402e6c:	f240 5254 	movw	r2, #1364	; 0x554
  402e70:	4293      	cmp	r3, r2
  402e72:	d822      	bhi.n	402eba <_malloc_r+0x4fa>
  402e74:	0cb3      	lsrs	r3, r6, #18
  402e76:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  402e7a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  402e7e:	00c3      	lsls	r3, r0, #3
  402e80:	e5c0      	b.n	402a04 <_malloc_r+0x44>
  402e82:	f103 0b10 	add.w	fp, r3, #16
  402e86:	e6ae      	b.n	402be6 <_malloc_r+0x226>
  402e88:	2a54      	cmp	r2, #84	; 0x54
  402e8a:	d829      	bhi.n	402ee0 <_malloc_r+0x520>
  402e8c:	0b1a      	lsrs	r2, r3, #12
  402e8e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402e92:	00c9      	lsls	r1, r1, #3
  402e94:	326e      	adds	r2, #110	; 0x6e
  402e96:	e74d      	b.n	402d34 <_malloc_r+0x374>
  402e98:	4b20      	ldr	r3, [pc, #128]	; (402f1c <_malloc_r+0x55c>)
  402e9a:	6819      	ldr	r1, [r3, #0]
  402e9c:	4459      	add	r1, fp
  402e9e:	6019      	str	r1, [r3, #0]
  402ea0:	e6b2      	b.n	402c08 <_malloc_r+0x248>
  402ea2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402ea6:	2800      	cmp	r0, #0
  402ea8:	f47f aeae 	bne.w	402c08 <_malloc_r+0x248>
  402eac:	eb08 030b 	add.w	r3, r8, fp
  402eb0:	68ba      	ldr	r2, [r7, #8]
  402eb2:	f043 0301 	orr.w	r3, r3, #1
  402eb6:	6053      	str	r3, [r2, #4]
  402eb8:	e6ee      	b.n	402c98 <_malloc_r+0x2d8>
  402eba:	207f      	movs	r0, #127	; 0x7f
  402ebc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  402ec0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  402ec4:	e59e      	b.n	402a04 <_malloc_r+0x44>
  402ec6:	f104 0108 	add.w	r1, r4, #8
  402eca:	4628      	mov	r0, r5
  402ecc:	9300      	str	r3, [sp, #0]
  402ece:	f7ff fa59 	bl	402384 <_free_r>
  402ed2:	9b00      	ldr	r3, [sp, #0]
  402ed4:	6819      	ldr	r1, [r3, #0]
  402ed6:	e6df      	b.n	402c98 <_malloc_r+0x2d8>
  402ed8:	2001      	movs	r0, #1
  402eda:	f04f 0900 	mov.w	r9, #0
  402ede:	e6bc      	b.n	402c5a <_malloc_r+0x29a>
  402ee0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402ee4:	d805      	bhi.n	402ef2 <_malloc_r+0x532>
  402ee6:	0bda      	lsrs	r2, r3, #15
  402ee8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402eec:	00c9      	lsls	r1, r1, #3
  402eee:	3277      	adds	r2, #119	; 0x77
  402ef0:	e720      	b.n	402d34 <_malloc_r+0x374>
  402ef2:	f240 5154 	movw	r1, #1364	; 0x554
  402ef6:	428a      	cmp	r2, r1
  402ef8:	d805      	bhi.n	402f06 <_malloc_r+0x546>
  402efa:	0c9a      	lsrs	r2, r3, #18
  402efc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402f00:	00c9      	lsls	r1, r1, #3
  402f02:	327c      	adds	r2, #124	; 0x7c
  402f04:	e716      	b.n	402d34 <_malloc_r+0x374>
  402f06:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402f0a:	227e      	movs	r2, #126	; 0x7e
  402f0c:	e712      	b.n	402d34 <_malloc_r+0x374>
  402f0e:	687b      	ldr	r3, [r7, #4]
  402f10:	e780      	b.n	402e14 <_malloc_r+0x454>
  402f12:	08f0      	lsrs	r0, r6, #3
  402f14:	f106 0308 	add.w	r3, r6, #8
  402f18:	e600      	b.n	402b1c <_malloc_r+0x15c>
  402f1a:	bf00      	nop
  402f1c:	20000b48 	.word	0x20000b48

00402f20 <__ascii_mbtowc>:
  402f20:	b082      	sub	sp, #8
  402f22:	b149      	cbz	r1, 402f38 <__ascii_mbtowc+0x18>
  402f24:	b15a      	cbz	r2, 402f3e <__ascii_mbtowc+0x1e>
  402f26:	b16b      	cbz	r3, 402f44 <__ascii_mbtowc+0x24>
  402f28:	7813      	ldrb	r3, [r2, #0]
  402f2a:	600b      	str	r3, [r1, #0]
  402f2c:	7812      	ldrb	r2, [r2, #0]
  402f2e:	1c10      	adds	r0, r2, #0
  402f30:	bf18      	it	ne
  402f32:	2001      	movne	r0, #1
  402f34:	b002      	add	sp, #8
  402f36:	4770      	bx	lr
  402f38:	a901      	add	r1, sp, #4
  402f3a:	2a00      	cmp	r2, #0
  402f3c:	d1f3      	bne.n	402f26 <__ascii_mbtowc+0x6>
  402f3e:	4610      	mov	r0, r2
  402f40:	b002      	add	sp, #8
  402f42:	4770      	bx	lr
  402f44:	f06f 0001 	mvn.w	r0, #1
  402f48:	e7f4      	b.n	402f34 <__ascii_mbtowc+0x14>
  402f4a:	bf00      	nop
  402f4c:	0000      	movs	r0, r0
	...

00402f50 <memchr>:
  402f50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402f54:	2a10      	cmp	r2, #16
  402f56:	db2b      	blt.n	402fb0 <memchr+0x60>
  402f58:	f010 0f07 	tst.w	r0, #7
  402f5c:	d008      	beq.n	402f70 <memchr+0x20>
  402f5e:	f810 3b01 	ldrb.w	r3, [r0], #1
  402f62:	3a01      	subs	r2, #1
  402f64:	428b      	cmp	r3, r1
  402f66:	d02d      	beq.n	402fc4 <memchr+0x74>
  402f68:	f010 0f07 	tst.w	r0, #7
  402f6c:	b342      	cbz	r2, 402fc0 <memchr+0x70>
  402f6e:	d1f6      	bne.n	402f5e <memchr+0xe>
  402f70:	b4f0      	push	{r4, r5, r6, r7}
  402f72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402f76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  402f7a:	f022 0407 	bic.w	r4, r2, #7
  402f7e:	f07f 0700 	mvns.w	r7, #0
  402f82:	2300      	movs	r3, #0
  402f84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402f88:	3c08      	subs	r4, #8
  402f8a:	ea85 0501 	eor.w	r5, r5, r1
  402f8e:	ea86 0601 	eor.w	r6, r6, r1
  402f92:	fa85 f547 	uadd8	r5, r5, r7
  402f96:	faa3 f587 	sel	r5, r3, r7
  402f9a:	fa86 f647 	uadd8	r6, r6, r7
  402f9e:	faa5 f687 	sel	r6, r5, r7
  402fa2:	b98e      	cbnz	r6, 402fc8 <memchr+0x78>
  402fa4:	d1ee      	bne.n	402f84 <memchr+0x34>
  402fa6:	bcf0      	pop	{r4, r5, r6, r7}
  402fa8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402fac:	f002 0207 	and.w	r2, r2, #7
  402fb0:	b132      	cbz	r2, 402fc0 <memchr+0x70>
  402fb2:	f810 3b01 	ldrb.w	r3, [r0], #1
  402fb6:	3a01      	subs	r2, #1
  402fb8:	ea83 0301 	eor.w	r3, r3, r1
  402fbc:	b113      	cbz	r3, 402fc4 <memchr+0x74>
  402fbe:	d1f8      	bne.n	402fb2 <memchr+0x62>
  402fc0:	2000      	movs	r0, #0
  402fc2:	4770      	bx	lr
  402fc4:	3801      	subs	r0, #1
  402fc6:	4770      	bx	lr
  402fc8:	2d00      	cmp	r5, #0
  402fca:	bf06      	itte	eq
  402fcc:	4635      	moveq	r5, r6
  402fce:	3803      	subeq	r0, #3
  402fd0:	3807      	subne	r0, #7
  402fd2:	f015 0f01 	tst.w	r5, #1
  402fd6:	d107      	bne.n	402fe8 <memchr+0x98>
  402fd8:	3001      	adds	r0, #1
  402fda:	f415 7f80 	tst.w	r5, #256	; 0x100
  402fde:	bf02      	ittt	eq
  402fe0:	3001      	addeq	r0, #1
  402fe2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402fe6:	3001      	addeq	r0, #1
  402fe8:	bcf0      	pop	{r4, r5, r6, r7}
  402fea:	3801      	subs	r0, #1
  402fec:	4770      	bx	lr
  402fee:	bf00      	nop

00402ff0 <memcpy>:
  402ff0:	4684      	mov	ip, r0
  402ff2:	ea41 0300 	orr.w	r3, r1, r0
  402ff6:	f013 0303 	ands.w	r3, r3, #3
  402ffa:	d16d      	bne.n	4030d8 <memcpy+0xe8>
  402ffc:	3a40      	subs	r2, #64	; 0x40
  402ffe:	d341      	bcc.n	403084 <memcpy+0x94>
  403000:	f851 3b04 	ldr.w	r3, [r1], #4
  403004:	f840 3b04 	str.w	r3, [r0], #4
  403008:	f851 3b04 	ldr.w	r3, [r1], #4
  40300c:	f840 3b04 	str.w	r3, [r0], #4
  403010:	f851 3b04 	ldr.w	r3, [r1], #4
  403014:	f840 3b04 	str.w	r3, [r0], #4
  403018:	f851 3b04 	ldr.w	r3, [r1], #4
  40301c:	f840 3b04 	str.w	r3, [r0], #4
  403020:	f851 3b04 	ldr.w	r3, [r1], #4
  403024:	f840 3b04 	str.w	r3, [r0], #4
  403028:	f851 3b04 	ldr.w	r3, [r1], #4
  40302c:	f840 3b04 	str.w	r3, [r0], #4
  403030:	f851 3b04 	ldr.w	r3, [r1], #4
  403034:	f840 3b04 	str.w	r3, [r0], #4
  403038:	f851 3b04 	ldr.w	r3, [r1], #4
  40303c:	f840 3b04 	str.w	r3, [r0], #4
  403040:	f851 3b04 	ldr.w	r3, [r1], #4
  403044:	f840 3b04 	str.w	r3, [r0], #4
  403048:	f851 3b04 	ldr.w	r3, [r1], #4
  40304c:	f840 3b04 	str.w	r3, [r0], #4
  403050:	f851 3b04 	ldr.w	r3, [r1], #4
  403054:	f840 3b04 	str.w	r3, [r0], #4
  403058:	f851 3b04 	ldr.w	r3, [r1], #4
  40305c:	f840 3b04 	str.w	r3, [r0], #4
  403060:	f851 3b04 	ldr.w	r3, [r1], #4
  403064:	f840 3b04 	str.w	r3, [r0], #4
  403068:	f851 3b04 	ldr.w	r3, [r1], #4
  40306c:	f840 3b04 	str.w	r3, [r0], #4
  403070:	f851 3b04 	ldr.w	r3, [r1], #4
  403074:	f840 3b04 	str.w	r3, [r0], #4
  403078:	f851 3b04 	ldr.w	r3, [r1], #4
  40307c:	f840 3b04 	str.w	r3, [r0], #4
  403080:	3a40      	subs	r2, #64	; 0x40
  403082:	d2bd      	bcs.n	403000 <memcpy+0x10>
  403084:	3230      	adds	r2, #48	; 0x30
  403086:	d311      	bcc.n	4030ac <memcpy+0xbc>
  403088:	f851 3b04 	ldr.w	r3, [r1], #4
  40308c:	f840 3b04 	str.w	r3, [r0], #4
  403090:	f851 3b04 	ldr.w	r3, [r1], #4
  403094:	f840 3b04 	str.w	r3, [r0], #4
  403098:	f851 3b04 	ldr.w	r3, [r1], #4
  40309c:	f840 3b04 	str.w	r3, [r0], #4
  4030a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4030a4:	f840 3b04 	str.w	r3, [r0], #4
  4030a8:	3a10      	subs	r2, #16
  4030aa:	d2ed      	bcs.n	403088 <memcpy+0x98>
  4030ac:	320c      	adds	r2, #12
  4030ae:	d305      	bcc.n	4030bc <memcpy+0xcc>
  4030b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4030b4:	f840 3b04 	str.w	r3, [r0], #4
  4030b8:	3a04      	subs	r2, #4
  4030ba:	d2f9      	bcs.n	4030b0 <memcpy+0xc0>
  4030bc:	3204      	adds	r2, #4
  4030be:	d008      	beq.n	4030d2 <memcpy+0xe2>
  4030c0:	07d2      	lsls	r2, r2, #31
  4030c2:	bf1c      	itt	ne
  4030c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4030c8:	f800 3b01 	strbne.w	r3, [r0], #1
  4030cc:	d301      	bcc.n	4030d2 <memcpy+0xe2>
  4030ce:	880b      	ldrh	r3, [r1, #0]
  4030d0:	8003      	strh	r3, [r0, #0]
  4030d2:	4660      	mov	r0, ip
  4030d4:	4770      	bx	lr
  4030d6:	bf00      	nop
  4030d8:	2a08      	cmp	r2, #8
  4030da:	d313      	bcc.n	403104 <memcpy+0x114>
  4030dc:	078b      	lsls	r3, r1, #30
  4030de:	d08d      	beq.n	402ffc <memcpy+0xc>
  4030e0:	f010 0303 	ands.w	r3, r0, #3
  4030e4:	d08a      	beq.n	402ffc <memcpy+0xc>
  4030e6:	f1c3 0304 	rsb	r3, r3, #4
  4030ea:	1ad2      	subs	r2, r2, r3
  4030ec:	07db      	lsls	r3, r3, #31
  4030ee:	bf1c      	itt	ne
  4030f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4030f4:	f800 3b01 	strbne.w	r3, [r0], #1
  4030f8:	d380      	bcc.n	402ffc <memcpy+0xc>
  4030fa:	f831 3b02 	ldrh.w	r3, [r1], #2
  4030fe:	f820 3b02 	strh.w	r3, [r0], #2
  403102:	e77b      	b.n	402ffc <memcpy+0xc>
  403104:	3a04      	subs	r2, #4
  403106:	d3d9      	bcc.n	4030bc <memcpy+0xcc>
  403108:	3a01      	subs	r2, #1
  40310a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40310e:	f800 3b01 	strb.w	r3, [r0], #1
  403112:	d2f9      	bcs.n	403108 <memcpy+0x118>
  403114:	780b      	ldrb	r3, [r1, #0]
  403116:	7003      	strb	r3, [r0, #0]
  403118:	784b      	ldrb	r3, [r1, #1]
  40311a:	7043      	strb	r3, [r0, #1]
  40311c:	788b      	ldrb	r3, [r1, #2]
  40311e:	7083      	strb	r3, [r0, #2]
  403120:	4660      	mov	r0, ip
  403122:	4770      	bx	lr

00403124 <memmove>:
  403124:	4288      	cmp	r0, r1
  403126:	b5f0      	push	{r4, r5, r6, r7, lr}
  403128:	d90d      	bls.n	403146 <memmove+0x22>
  40312a:	188b      	adds	r3, r1, r2
  40312c:	4298      	cmp	r0, r3
  40312e:	d20a      	bcs.n	403146 <memmove+0x22>
  403130:	1884      	adds	r4, r0, r2
  403132:	2a00      	cmp	r2, #0
  403134:	d051      	beq.n	4031da <memmove+0xb6>
  403136:	4622      	mov	r2, r4
  403138:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40313c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403140:	4299      	cmp	r1, r3
  403142:	d1f9      	bne.n	403138 <memmove+0x14>
  403144:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403146:	2a0f      	cmp	r2, #15
  403148:	d948      	bls.n	4031dc <memmove+0xb8>
  40314a:	ea41 0300 	orr.w	r3, r1, r0
  40314e:	079b      	lsls	r3, r3, #30
  403150:	d146      	bne.n	4031e0 <memmove+0xbc>
  403152:	f100 0410 	add.w	r4, r0, #16
  403156:	f101 0310 	add.w	r3, r1, #16
  40315a:	4615      	mov	r5, r2
  40315c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403160:	f844 6c10 	str.w	r6, [r4, #-16]
  403164:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403168:	f844 6c0c 	str.w	r6, [r4, #-12]
  40316c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403170:	f844 6c08 	str.w	r6, [r4, #-8]
  403174:	3d10      	subs	r5, #16
  403176:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40317a:	f844 6c04 	str.w	r6, [r4, #-4]
  40317e:	2d0f      	cmp	r5, #15
  403180:	f103 0310 	add.w	r3, r3, #16
  403184:	f104 0410 	add.w	r4, r4, #16
  403188:	d8e8      	bhi.n	40315c <memmove+0x38>
  40318a:	f1a2 0310 	sub.w	r3, r2, #16
  40318e:	f023 030f 	bic.w	r3, r3, #15
  403192:	f002 0e0f 	and.w	lr, r2, #15
  403196:	3310      	adds	r3, #16
  403198:	f1be 0f03 	cmp.w	lr, #3
  40319c:	4419      	add	r1, r3
  40319e:	4403      	add	r3, r0
  4031a0:	d921      	bls.n	4031e6 <memmove+0xc2>
  4031a2:	1f1e      	subs	r6, r3, #4
  4031a4:	460d      	mov	r5, r1
  4031a6:	4674      	mov	r4, lr
  4031a8:	3c04      	subs	r4, #4
  4031aa:	f855 7b04 	ldr.w	r7, [r5], #4
  4031ae:	f846 7f04 	str.w	r7, [r6, #4]!
  4031b2:	2c03      	cmp	r4, #3
  4031b4:	d8f8      	bhi.n	4031a8 <memmove+0x84>
  4031b6:	f1ae 0404 	sub.w	r4, lr, #4
  4031ba:	f024 0403 	bic.w	r4, r4, #3
  4031be:	3404      	adds	r4, #4
  4031c0:	4421      	add	r1, r4
  4031c2:	4423      	add	r3, r4
  4031c4:	f002 0203 	and.w	r2, r2, #3
  4031c8:	b162      	cbz	r2, 4031e4 <memmove+0xc0>
  4031ca:	3b01      	subs	r3, #1
  4031cc:	440a      	add	r2, r1
  4031ce:	f811 4b01 	ldrb.w	r4, [r1], #1
  4031d2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4031d6:	428a      	cmp	r2, r1
  4031d8:	d1f9      	bne.n	4031ce <memmove+0xaa>
  4031da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4031dc:	4603      	mov	r3, r0
  4031de:	e7f3      	b.n	4031c8 <memmove+0xa4>
  4031e0:	4603      	mov	r3, r0
  4031e2:	e7f2      	b.n	4031ca <memmove+0xa6>
  4031e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4031e6:	4672      	mov	r2, lr
  4031e8:	e7ee      	b.n	4031c8 <memmove+0xa4>
  4031ea:	bf00      	nop

004031ec <__malloc_lock>:
  4031ec:	4801      	ldr	r0, [pc, #4]	; (4031f4 <__malloc_lock+0x8>)
  4031ee:	f7ff bb63 	b.w	4028b8 <__retarget_lock_acquire_recursive>
  4031f2:	bf00      	nop
  4031f4:	20000b9c 	.word	0x20000b9c

004031f8 <__malloc_unlock>:
  4031f8:	4801      	ldr	r0, [pc, #4]	; (403200 <__malloc_unlock+0x8>)
  4031fa:	f7ff bb5f 	b.w	4028bc <__retarget_lock_release_recursive>
  4031fe:	bf00      	nop
  403200:	20000b9c 	.word	0x20000b9c

00403204 <_realloc_r>:
  403204:	2900      	cmp	r1, #0
  403206:	f000 8095 	beq.w	403334 <_realloc_r+0x130>
  40320a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40320e:	460d      	mov	r5, r1
  403210:	4616      	mov	r6, r2
  403212:	b083      	sub	sp, #12
  403214:	4680      	mov	r8, r0
  403216:	f106 070b 	add.w	r7, r6, #11
  40321a:	f7ff ffe7 	bl	4031ec <__malloc_lock>
  40321e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403222:	2f16      	cmp	r7, #22
  403224:	f02e 0403 	bic.w	r4, lr, #3
  403228:	f1a5 0908 	sub.w	r9, r5, #8
  40322c:	d83c      	bhi.n	4032a8 <_realloc_r+0xa4>
  40322e:	2210      	movs	r2, #16
  403230:	4617      	mov	r7, r2
  403232:	42be      	cmp	r6, r7
  403234:	d83d      	bhi.n	4032b2 <_realloc_r+0xae>
  403236:	4294      	cmp	r4, r2
  403238:	da43      	bge.n	4032c2 <_realloc_r+0xbe>
  40323a:	4bc4      	ldr	r3, [pc, #784]	; (40354c <_realloc_r+0x348>)
  40323c:	6899      	ldr	r1, [r3, #8]
  40323e:	eb09 0004 	add.w	r0, r9, r4
  403242:	4288      	cmp	r0, r1
  403244:	f000 80b4 	beq.w	4033b0 <_realloc_r+0x1ac>
  403248:	6843      	ldr	r3, [r0, #4]
  40324a:	f023 0101 	bic.w	r1, r3, #1
  40324e:	4401      	add	r1, r0
  403250:	6849      	ldr	r1, [r1, #4]
  403252:	07c9      	lsls	r1, r1, #31
  403254:	d54c      	bpl.n	4032f0 <_realloc_r+0xec>
  403256:	f01e 0f01 	tst.w	lr, #1
  40325a:	f000 809b 	beq.w	403394 <_realloc_r+0x190>
  40325e:	4631      	mov	r1, r6
  403260:	4640      	mov	r0, r8
  403262:	f7ff fbad 	bl	4029c0 <_malloc_r>
  403266:	4606      	mov	r6, r0
  403268:	2800      	cmp	r0, #0
  40326a:	d03a      	beq.n	4032e2 <_realloc_r+0xde>
  40326c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403270:	f023 0301 	bic.w	r3, r3, #1
  403274:	444b      	add	r3, r9
  403276:	f1a0 0208 	sub.w	r2, r0, #8
  40327a:	429a      	cmp	r2, r3
  40327c:	f000 8121 	beq.w	4034c2 <_realloc_r+0x2be>
  403280:	1f22      	subs	r2, r4, #4
  403282:	2a24      	cmp	r2, #36	; 0x24
  403284:	f200 8107 	bhi.w	403496 <_realloc_r+0x292>
  403288:	2a13      	cmp	r2, #19
  40328a:	f200 80db 	bhi.w	403444 <_realloc_r+0x240>
  40328e:	4603      	mov	r3, r0
  403290:	462a      	mov	r2, r5
  403292:	6811      	ldr	r1, [r2, #0]
  403294:	6019      	str	r1, [r3, #0]
  403296:	6851      	ldr	r1, [r2, #4]
  403298:	6059      	str	r1, [r3, #4]
  40329a:	6892      	ldr	r2, [r2, #8]
  40329c:	609a      	str	r2, [r3, #8]
  40329e:	4629      	mov	r1, r5
  4032a0:	4640      	mov	r0, r8
  4032a2:	f7ff f86f 	bl	402384 <_free_r>
  4032a6:	e01c      	b.n	4032e2 <_realloc_r+0xde>
  4032a8:	f027 0707 	bic.w	r7, r7, #7
  4032ac:	2f00      	cmp	r7, #0
  4032ae:	463a      	mov	r2, r7
  4032b0:	dabf      	bge.n	403232 <_realloc_r+0x2e>
  4032b2:	2600      	movs	r6, #0
  4032b4:	230c      	movs	r3, #12
  4032b6:	4630      	mov	r0, r6
  4032b8:	f8c8 3000 	str.w	r3, [r8]
  4032bc:	b003      	add	sp, #12
  4032be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032c2:	462e      	mov	r6, r5
  4032c4:	1be3      	subs	r3, r4, r7
  4032c6:	2b0f      	cmp	r3, #15
  4032c8:	d81e      	bhi.n	403308 <_realloc_r+0x104>
  4032ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4032ce:	f003 0301 	and.w	r3, r3, #1
  4032d2:	4323      	orrs	r3, r4
  4032d4:	444c      	add	r4, r9
  4032d6:	f8c9 3004 	str.w	r3, [r9, #4]
  4032da:	6863      	ldr	r3, [r4, #4]
  4032dc:	f043 0301 	orr.w	r3, r3, #1
  4032e0:	6063      	str	r3, [r4, #4]
  4032e2:	4640      	mov	r0, r8
  4032e4:	f7ff ff88 	bl	4031f8 <__malloc_unlock>
  4032e8:	4630      	mov	r0, r6
  4032ea:	b003      	add	sp, #12
  4032ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032f0:	f023 0303 	bic.w	r3, r3, #3
  4032f4:	18e1      	adds	r1, r4, r3
  4032f6:	4291      	cmp	r1, r2
  4032f8:	db1f      	blt.n	40333a <_realloc_r+0x136>
  4032fa:	68c3      	ldr	r3, [r0, #12]
  4032fc:	6882      	ldr	r2, [r0, #8]
  4032fe:	462e      	mov	r6, r5
  403300:	60d3      	str	r3, [r2, #12]
  403302:	460c      	mov	r4, r1
  403304:	609a      	str	r2, [r3, #8]
  403306:	e7dd      	b.n	4032c4 <_realloc_r+0xc0>
  403308:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40330c:	eb09 0107 	add.w	r1, r9, r7
  403310:	f002 0201 	and.w	r2, r2, #1
  403314:	444c      	add	r4, r9
  403316:	f043 0301 	orr.w	r3, r3, #1
  40331a:	4317      	orrs	r7, r2
  40331c:	f8c9 7004 	str.w	r7, [r9, #4]
  403320:	604b      	str	r3, [r1, #4]
  403322:	6863      	ldr	r3, [r4, #4]
  403324:	f043 0301 	orr.w	r3, r3, #1
  403328:	3108      	adds	r1, #8
  40332a:	6063      	str	r3, [r4, #4]
  40332c:	4640      	mov	r0, r8
  40332e:	f7ff f829 	bl	402384 <_free_r>
  403332:	e7d6      	b.n	4032e2 <_realloc_r+0xde>
  403334:	4611      	mov	r1, r2
  403336:	f7ff bb43 	b.w	4029c0 <_malloc_r>
  40333a:	f01e 0f01 	tst.w	lr, #1
  40333e:	d18e      	bne.n	40325e <_realloc_r+0x5a>
  403340:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403344:	eba9 0a01 	sub.w	sl, r9, r1
  403348:	f8da 1004 	ldr.w	r1, [sl, #4]
  40334c:	f021 0103 	bic.w	r1, r1, #3
  403350:	440b      	add	r3, r1
  403352:	4423      	add	r3, r4
  403354:	4293      	cmp	r3, r2
  403356:	db25      	blt.n	4033a4 <_realloc_r+0x1a0>
  403358:	68c2      	ldr	r2, [r0, #12]
  40335a:	6881      	ldr	r1, [r0, #8]
  40335c:	4656      	mov	r6, sl
  40335e:	60ca      	str	r2, [r1, #12]
  403360:	6091      	str	r1, [r2, #8]
  403362:	f8da 100c 	ldr.w	r1, [sl, #12]
  403366:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40336a:	1f22      	subs	r2, r4, #4
  40336c:	2a24      	cmp	r2, #36	; 0x24
  40336e:	60c1      	str	r1, [r0, #12]
  403370:	6088      	str	r0, [r1, #8]
  403372:	f200 8094 	bhi.w	40349e <_realloc_r+0x29a>
  403376:	2a13      	cmp	r2, #19
  403378:	d96f      	bls.n	40345a <_realloc_r+0x256>
  40337a:	6829      	ldr	r1, [r5, #0]
  40337c:	f8ca 1008 	str.w	r1, [sl, #8]
  403380:	6869      	ldr	r1, [r5, #4]
  403382:	f8ca 100c 	str.w	r1, [sl, #12]
  403386:	2a1b      	cmp	r2, #27
  403388:	f200 80a2 	bhi.w	4034d0 <_realloc_r+0x2cc>
  40338c:	3508      	adds	r5, #8
  40338e:	f10a 0210 	add.w	r2, sl, #16
  403392:	e063      	b.n	40345c <_realloc_r+0x258>
  403394:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403398:	eba9 0a03 	sub.w	sl, r9, r3
  40339c:	f8da 1004 	ldr.w	r1, [sl, #4]
  4033a0:	f021 0103 	bic.w	r1, r1, #3
  4033a4:	1863      	adds	r3, r4, r1
  4033a6:	4293      	cmp	r3, r2
  4033a8:	f6ff af59 	blt.w	40325e <_realloc_r+0x5a>
  4033ac:	4656      	mov	r6, sl
  4033ae:	e7d8      	b.n	403362 <_realloc_r+0x15e>
  4033b0:	6841      	ldr	r1, [r0, #4]
  4033b2:	f021 0b03 	bic.w	fp, r1, #3
  4033b6:	44a3      	add	fp, r4
  4033b8:	f107 0010 	add.w	r0, r7, #16
  4033bc:	4583      	cmp	fp, r0
  4033be:	da56      	bge.n	40346e <_realloc_r+0x26a>
  4033c0:	f01e 0f01 	tst.w	lr, #1
  4033c4:	f47f af4b 	bne.w	40325e <_realloc_r+0x5a>
  4033c8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4033cc:	eba9 0a01 	sub.w	sl, r9, r1
  4033d0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4033d4:	f021 0103 	bic.w	r1, r1, #3
  4033d8:	448b      	add	fp, r1
  4033da:	4558      	cmp	r0, fp
  4033dc:	dce2      	bgt.n	4033a4 <_realloc_r+0x1a0>
  4033de:	4656      	mov	r6, sl
  4033e0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4033e4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4033e8:	1f22      	subs	r2, r4, #4
  4033ea:	2a24      	cmp	r2, #36	; 0x24
  4033ec:	60c1      	str	r1, [r0, #12]
  4033ee:	6088      	str	r0, [r1, #8]
  4033f0:	f200 808f 	bhi.w	403512 <_realloc_r+0x30e>
  4033f4:	2a13      	cmp	r2, #19
  4033f6:	f240 808a 	bls.w	40350e <_realloc_r+0x30a>
  4033fa:	6829      	ldr	r1, [r5, #0]
  4033fc:	f8ca 1008 	str.w	r1, [sl, #8]
  403400:	6869      	ldr	r1, [r5, #4]
  403402:	f8ca 100c 	str.w	r1, [sl, #12]
  403406:	2a1b      	cmp	r2, #27
  403408:	f200 808a 	bhi.w	403520 <_realloc_r+0x31c>
  40340c:	3508      	adds	r5, #8
  40340e:	f10a 0210 	add.w	r2, sl, #16
  403412:	6829      	ldr	r1, [r5, #0]
  403414:	6011      	str	r1, [r2, #0]
  403416:	6869      	ldr	r1, [r5, #4]
  403418:	6051      	str	r1, [r2, #4]
  40341a:	68a9      	ldr	r1, [r5, #8]
  40341c:	6091      	str	r1, [r2, #8]
  40341e:	eb0a 0107 	add.w	r1, sl, r7
  403422:	ebab 0207 	sub.w	r2, fp, r7
  403426:	f042 0201 	orr.w	r2, r2, #1
  40342a:	6099      	str	r1, [r3, #8]
  40342c:	604a      	str	r2, [r1, #4]
  40342e:	f8da 3004 	ldr.w	r3, [sl, #4]
  403432:	f003 0301 	and.w	r3, r3, #1
  403436:	431f      	orrs	r7, r3
  403438:	4640      	mov	r0, r8
  40343a:	f8ca 7004 	str.w	r7, [sl, #4]
  40343e:	f7ff fedb 	bl	4031f8 <__malloc_unlock>
  403442:	e751      	b.n	4032e8 <_realloc_r+0xe4>
  403444:	682b      	ldr	r3, [r5, #0]
  403446:	6003      	str	r3, [r0, #0]
  403448:	686b      	ldr	r3, [r5, #4]
  40344a:	6043      	str	r3, [r0, #4]
  40344c:	2a1b      	cmp	r2, #27
  40344e:	d82d      	bhi.n	4034ac <_realloc_r+0x2a8>
  403450:	f100 0308 	add.w	r3, r0, #8
  403454:	f105 0208 	add.w	r2, r5, #8
  403458:	e71b      	b.n	403292 <_realloc_r+0x8e>
  40345a:	4632      	mov	r2, r6
  40345c:	6829      	ldr	r1, [r5, #0]
  40345e:	6011      	str	r1, [r2, #0]
  403460:	6869      	ldr	r1, [r5, #4]
  403462:	6051      	str	r1, [r2, #4]
  403464:	68a9      	ldr	r1, [r5, #8]
  403466:	6091      	str	r1, [r2, #8]
  403468:	461c      	mov	r4, r3
  40346a:	46d1      	mov	r9, sl
  40346c:	e72a      	b.n	4032c4 <_realloc_r+0xc0>
  40346e:	eb09 0107 	add.w	r1, r9, r7
  403472:	ebab 0b07 	sub.w	fp, fp, r7
  403476:	f04b 0201 	orr.w	r2, fp, #1
  40347a:	6099      	str	r1, [r3, #8]
  40347c:	604a      	str	r2, [r1, #4]
  40347e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403482:	f003 0301 	and.w	r3, r3, #1
  403486:	431f      	orrs	r7, r3
  403488:	4640      	mov	r0, r8
  40348a:	f845 7c04 	str.w	r7, [r5, #-4]
  40348e:	f7ff feb3 	bl	4031f8 <__malloc_unlock>
  403492:	462e      	mov	r6, r5
  403494:	e728      	b.n	4032e8 <_realloc_r+0xe4>
  403496:	4629      	mov	r1, r5
  403498:	f7ff fe44 	bl	403124 <memmove>
  40349c:	e6ff      	b.n	40329e <_realloc_r+0x9a>
  40349e:	4629      	mov	r1, r5
  4034a0:	4630      	mov	r0, r6
  4034a2:	461c      	mov	r4, r3
  4034a4:	46d1      	mov	r9, sl
  4034a6:	f7ff fe3d 	bl	403124 <memmove>
  4034aa:	e70b      	b.n	4032c4 <_realloc_r+0xc0>
  4034ac:	68ab      	ldr	r3, [r5, #8]
  4034ae:	6083      	str	r3, [r0, #8]
  4034b0:	68eb      	ldr	r3, [r5, #12]
  4034b2:	60c3      	str	r3, [r0, #12]
  4034b4:	2a24      	cmp	r2, #36	; 0x24
  4034b6:	d017      	beq.n	4034e8 <_realloc_r+0x2e4>
  4034b8:	f100 0310 	add.w	r3, r0, #16
  4034bc:	f105 0210 	add.w	r2, r5, #16
  4034c0:	e6e7      	b.n	403292 <_realloc_r+0x8e>
  4034c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4034c6:	f023 0303 	bic.w	r3, r3, #3
  4034ca:	441c      	add	r4, r3
  4034cc:	462e      	mov	r6, r5
  4034ce:	e6f9      	b.n	4032c4 <_realloc_r+0xc0>
  4034d0:	68a9      	ldr	r1, [r5, #8]
  4034d2:	f8ca 1010 	str.w	r1, [sl, #16]
  4034d6:	68e9      	ldr	r1, [r5, #12]
  4034d8:	f8ca 1014 	str.w	r1, [sl, #20]
  4034dc:	2a24      	cmp	r2, #36	; 0x24
  4034de:	d00c      	beq.n	4034fa <_realloc_r+0x2f6>
  4034e0:	3510      	adds	r5, #16
  4034e2:	f10a 0218 	add.w	r2, sl, #24
  4034e6:	e7b9      	b.n	40345c <_realloc_r+0x258>
  4034e8:	692b      	ldr	r3, [r5, #16]
  4034ea:	6103      	str	r3, [r0, #16]
  4034ec:	696b      	ldr	r3, [r5, #20]
  4034ee:	6143      	str	r3, [r0, #20]
  4034f0:	f105 0218 	add.w	r2, r5, #24
  4034f4:	f100 0318 	add.w	r3, r0, #24
  4034f8:	e6cb      	b.n	403292 <_realloc_r+0x8e>
  4034fa:	692a      	ldr	r2, [r5, #16]
  4034fc:	f8ca 2018 	str.w	r2, [sl, #24]
  403500:	696a      	ldr	r2, [r5, #20]
  403502:	f8ca 201c 	str.w	r2, [sl, #28]
  403506:	3518      	adds	r5, #24
  403508:	f10a 0220 	add.w	r2, sl, #32
  40350c:	e7a6      	b.n	40345c <_realloc_r+0x258>
  40350e:	4632      	mov	r2, r6
  403510:	e77f      	b.n	403412 <_realloc_r+0x20e>
  403512:	4629      	mov	r1, r5
  403514:	4630      	mov	r0, r6
  403516:	9301      	str	r3, [sp, #4]
  403518:	f7ff fe04 	bl	403124 <memmove>
  40351c:	9b01      	ldr	r3, [sp, #4]
  40351e:	e77e      	b.n	40341e <_realloc_r+0x21a>
  403520:	68a9      	ldr	r1, [r5, #8]
  403522:	f8ca 1010 	str.w	r1, [sl, #16]
  403526:	68e9      	ldr	r1, [r5, #12]
  403528:	f8ca 1014 	str.w	r1, [sl, #20]
  40352c:	2a24      	cmp	r2, #36	; 0x24
  40352e:	d003      	beq.n	403538 <_realloc_r+0x334>
  403530:	3510      	adds	r5, #16
  403532:	f10a 0218 	add.w	r2, sl, #24
  403536:	e76c      	b.n	403412 <_realloc_r+0x20e>
  403538:	692a      	ldr	r2, [r5, #16]
  40353a:	f8ca 2018 	str.w	r2, [sl, #24]
  40353e:	696a      	ldr	r2, [r5, #20]
  403540:	f8ca 201c 	str.w	r2, [sl, #28]
  403544:	3518      	adds	r5, #24
  403546:	f10a 0220 	add.w	r2, sl, #32
  40354a:	e762      	b.n	403412 <_realloc_r+0x20e>
  40354c:	200005b0 	.word	0x200005b0

00403550 <_sbrk_r>:
  403550:	b538      	push	{r3, r4, r5, lr}
  403552:	4c07      	ldr	r4, [pc, #28]	; (403570 <_sbrk_r+0x20>)
  403554:	2300      	movs	r3, #0
  403556:	4605      	mov	r5, r0
  403558:	4608      	mov	r0, r1
  40355a:	6023      	str	r3, [r4, #0]
  40355c:	f7fd fb46 	bl	400bec <_sbrk>
  403560:	1c43      	adds	r3, r0, #1
  403562:	d000      	beq.n	403566 <_sbrk_r+0x16>
  403564:	bd38      	pop	{r3, r4, r5, pc}
  403566:	6823      	ldr	r3, [r4, #0]
  403568:	2b00      	cmp	r3, #0
  40356a:	d0fb      	beq.n	403564 <_sbrk_r+0x14>
  40356c:	602b      	str	r3, [r5, #0]
  40356e:	bd38      	pop	{r3, r4, r5, pc}
  403570:	20000bb0 	.word	0x20000bb0

00403574 <__sread>:
  403574:	b510      	push	{r4, lr}
  403576:	460c      	mov	r4, r1
  403578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40357c:	f000 fa66 	bl	403a4c <_read_r>
  403580:	2800      	cmp	r0, #0
  403582:	db03      	blt.n	40358c <__sread+0x18>
  403584:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403586:	4403      	add	r3, r0
  403588:	6523      	str	r3, [r4, #80]	; 0x50
  40358a:	bd10      	pop	{r4, pc}
  40358c:	89a3      	ldrh	r3, [r4, #12]
  40358e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403592:	81a3      	strh	r3, [r4, #12]
  403594:	bd10      	pop	{r4, pc}
  403596:	bf00      	nop

00403598 <__swrite>:
  403598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40359c:	4616      	mov	r6, r2
  40359e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4035a2:	461f      	mov	r7, r3
  4035a4:	05d3      	lsls	r3, r2, #23
  4035a6:	460c      	mov	r4, r1
  4035a8:	4605      	mov	r5, r0
  4035aa:	d507      	bpl.n	4035bc <__swrite+0x24>
  4035ac:	2200      	movs	r2, #0
  4035ae:	2302      	movs	r3, #2
  4035b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4035b4:	f000 fa34 	bl	403a20 <_lseek_r>
  4035b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4035bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4035c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4035c4:	81a2      	strh	r2, [r4, #12]
  4035c6:	463b      	mov	r3, r7
  4035c8:	4632      	mov	r2, r6
  4035ca:	4628      	mov	r0, r5
  4035cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4035d0:	f000 b914 	b.w	4037fc <_write_r>

004035d4 <__sseek>:
  4035d4:	b510      	push	{r4, lr}
  4035d6:	460c      	mov	r4, r1
  4035d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4035dc:	f000 fa20 	bl	403a20 <_lseek_r>
  4035e0:	89a3      	ldrh	r3, [r4, #12]
  4035e2:	1c42      	adds	r2, r0, #1
  4035e4:	bf0e      	itee	eq
  4035e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4035ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4035ee:	6520      	strne	r0, [r4, #80]	; 0x50
  4035f0:	81a3      	strh	r3, [r4, #12]
  4035f2:	bd10      	pop	{r4, pc}

004035f4 <__sclose>:
  4035f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4035f8:	f000 b978 	b.w	4038ec <_close_r>
  4035fc:	0000      	movs	r0, r0
	...

00403600 <strlen>:
  403600:	f890 f000 	pld	[r0]
  403604:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403608:	f020 0107 	bic.w	r1, r0, #7
  40360c:	f06f 0c00 	mvn.w	ip, #0
  403610:	f010 0407 	ands.w	r4, r0, #7
  403614:	f891 f020 	pld	[r1, #32]
  403618:	f040 8049 	bne.w	4036ae <strlen+0xae>
  40361c:	f04f 0400 	mov.w	r4, #0
  403620:	f06f 0007 	mvn.w	r0, #7
  403624:	e9d1 2300 	ldrd	r2, r3, [r1]
  403628:	f891 f040 	pld	[r1, #64]	; 0x40
  40362c:	f100 0008 	add.w	r0, r0, #8
  403630:	fa82 f24c 	uadd8	r2, r2, ip
  403634:	faa4 f28c 	sel	r2, r4, ip
  403638:	fa83 f34c 	uadd8	r3, r3, ip
  40363c:	faa2 f38c 	sel	r3, r2, ip
  403640:	bb4b      	cbnz	r3, 403696 <strlen+0x96>
  403642:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403646:	fa82 f24c 	uadd8	r2, r2, ip
  40364a:	f100 0008 	add.w	r0, r0, #8
  40364e:	faa4 f28c 	sel	r2, r4, ip
  403652:	fa83 f34c 	uadd8	r3, r3, ip
  403656:	faa2 f38c 	sel	r3, r2, ip
  40365a:	b9e3      	cbnz	r3, 403696 <strlen+0x96>
  40365c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403660:	fa82 f24c 	uadd8	r2, r2, ip
  403664:	f100 0008 	add.w	r0, r0, #8
  403668:	faa4 f28c 	sel	r2, r4, ip
  40366c:	fa83 f34c 	uadd8	r3, r3, ip
  403670:	faa2 f38c 	sel	r3, r2, ip
  403674:	b97b      	cbnz	r3, 403696 <strlen+0x96>
  403676:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40367a:	f101 0120 	add.w	r1, r1, #32
  40367e:	fa82 f24c 	uadd8	r2, r2, ip
  403682:	f100 0008 	add.w	r0, r0, #8
  403686:	faa4 f28c 	sel	r2, r4, ip
  40368a:	fa83 f34c 	uadd8	r3, r3, ip
  40368e:	faa2 f38c 	sel	r3, r2, ip
  403692:	2b00      	cmp	r3, #0
  403694:	d0c6      	beq.n	403624 <strlen+0x24>
  403696:	2a00      	cmp	r2, #0
  403698:	bf04      	itt	eq
  40369a:	3004      	addeq	r0, #4
  40369c:	461a      	moveq	r2, r3
  40369e:	ba12      	rev	r2, r2
  4036a0:	fab2 f282 	clz	r2, r2
  4036a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4036a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4036ac:	4770      	bx	lr
  4036ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4036b2:	f004 0503 	and.w	r5, r4, #3
  4036b6:	f1c4 0000 	rsb	r0, r4, #0
  4036ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4036be:	f014 0f04 	tst.w	r4, #4
  4036c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4036c6:	fa0c f505 	lsl.w	r5, ip, r5
  4036ca:	ea62 0205 	orn	r2, r2, r5
  4036ce:	bf1c      	itt	ne
  4036d0:	ea63 0305 	ornne	r3, r3, r5
  4036d4:	4662      	movne	r2, ip
  4036d6:	f04f 0400 	mov.w	r4, #0
  4036da:	e7a9      	b.n	403630 <strlen+0x30>

004036dc <__swbuf_r>:
  4036dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4036de:	460d      	mov	r5, r1
  4036e0:	4614      	mov	r4, r2
  4036e2:	4606      	mov	r6, r0
  4036e4:	b110      	cbz	r0, 4036ec <__swbuf_r+0x10>
  4036e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4036e8:	2b00      	cmp	r3, #0
  4036ea:	d04b      	beq.n	403784 <__swbuf_r+0xa8>
  4036ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4036f0:	69a3      	ldr	r3, [r4, #24]
  4036f2:	60a3      	str	r3, [r4, #8]
  4036f4:	b291      	uxth	r1, r2
  4036f6:	0708      	lsls	r0, r1, #28
  4036f8:	d539      	bpl.n	40376e <__swbuf_r+0x92>
  4036fa:	6923      	ldr	r3, [r4, #16]
  4036fc:	2b00      	cmp	r3, #0
  4036fe:	d036      	beq.n	40376e <__swbuf_r+0x92>
  403700:	b2ed      	uxtb	r5, r5
  403702:	0489      	lsls	r1, r1, #18
  403704:	462f      	mov	r7, r5
  403706:	d515      	bpl.n	403734 <__swbuf_r+0x58>
  403708:	6822      	ldr	r2, [r4, #0]
  40370a:	6961      	ldr	r1, [r4, #20]
  40370c:	1ad3      	subs	r3, r2, r3
  40370e:	428b      	cmp	r3, r1
  403710:	da1c      	bge.n	40374c <__swbuf_r+0x70>
  403712:	3301      	adds	r3, #1
  403714:	68a1      	ldr	r1, [r4, #8]
  403716:	1c50      	adds	r0, r2, #1
  403718:	3901      	subs	r1, #1
  40371a:	60a1      	str	r1, [r4, #8]
  40371c:	6020      	str	r0, [r4, #0]
  40371e:	7015      	strb	r5, [r2, #0]
  403720:	6962      	ldr	r2, [r4, #20]
  403722:	429a      	cmp	r2, r3
  403724:	d01a      	beq.n	40375c <__swbuf_r+0x80>
  403726:	89a3      	ldrh	r3, [r4, #12]
  403728:	07db      	lsls	r3, r3, #31
  40372a:	d501      	bpl.n	403730 <__swbuf_r+0x54>
  40372c:	2d0a      	cmp	r5, #10
  40372e:	d015      	beq.n	40375c <__swbuf_r+0x80>
  403730:	4638      	mov	r0, r7
  403732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403734:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403736:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40373a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40373e:	81a2      	strh	r2, [r4, #12]
  403740:	6822      	ldr	r2, [r4, #0]
  403742:	6661      	str	r1, [r4, #100]	; 0x64
  403744:	6961      	ldr	r1, [r4, #20]
  403746:	1ad3      	subs	r3, r2, r3
  403748:	428b      	cmp	r3, r1
  40374a:	dbe2      	blt.n	403712 <__swbuf_r+0x36>
  40374c:	4621      	mov	r1, r4
  40374e:	4630      	mov	r0, r6
  403750:	f7fe fc9a 	bl	402088 <_fflush_r>
  403754:	b940      	cbnz	r0, 403768 <__swbuf_r+0x8c>
  403756:	6822      	ldr	r2, [r4, #0]
  403758:	2301      	movs	r3, #1
  40375a:	e7db      	b.n	403714 <__swbuf_r+0x38>
  40375c:	4621      	mov	r1, r4
  40375e:	4630      	mov	r0, r6
  403760:	f7fe fc92 	bl	402088 <_fflush_r>
  403764:	2800      	cmp	r0, #0
  403766:	d0e3      	beq.n	403730 <__swbuf_r+0x54>
  403768:	f04f 37ff 	mov.w	r7, #4294967295
  40376c:	e7e0      	b.n	403730 <__swbuf_r+0x54>
  40376e:	4621      	mov	r1, r4
  403770:	4630      	mov	r0, r6
  403772:	f7fe fb75 	bl	401e60 <__swsetup_r>
  403776:	2800      	cmp	r0, #0
  403778:	d1f6      	bne.n	403768 <__swbuf_r+0x8c>
  40377a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40377e:	6923      	ldr	r3, [r4, #16]
  403780:	b291      	uxth	r1, r2
  403782:	e7bd      	b.n	403700 <__swbuf_r+0x24>
  403784:	f7fe fcd8 	bl	402138 <__sinit>
  403788:	e7b0      	b.n	4036ec <__swbuf_r+0x10>
  40378a:	bf00      	nop

0040378c <_wcrtomb_r>:
  40378c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40378e:	4606      	mov	r6, r0
  403790:	b085      	sub	sp, #20
  403792:	461f      	mov	r7, r3
  403794:	b189      	cbz	r1, 4037ba <_wcrtomb_r+0x2e>
  403796:	4c10      	ldr	r4, [pc, #64]	; (4037d8 <_wcrtomb_r+0x4c>)
  403798:	4d10      	ldr	r5, [pc, #64]	; (4037dc <_wcrtomb_r+0x50>)
  40379a:	6824      	ldr	r4, [r4, #0]
  40379c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40379e:	2c00      	cmp	r4, #0
  4037a0:	bf08      	it	eq
  4037a2:	462c      	moveq	r4, r5
  4037a4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4037a8:	47a0      	blx	r4
  4037aa:	1c43      	adds	r3, r0, #1
  4037ac:	d103      	bne.n	4037b6 <_wcrtomb_r+0x2a>
  4037ae:	2200      	movs	r2, #0
  4037b0:	238a      	movs	r3, #138	; 0x8a
  4037b2:	603a      	str	r2, [r7, #0]
  4037b4:	6033      	str	r3, [r6, #0]
  4037b6:	b005      	add	sp, #20
  4037b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4037ba:	460c      	mov	r4, r1
  4037bc:	4906      	ldr	r1, [pc, #24]	; (4037d8 <_wcrtomb_r+0x4c>)
  4037be:	4a07      	ldr	r2, [pc, #28]	; (4037dc <_wcrtomb_r+0x50>)
  4037c0:	6809      	ldr	r1, [r1, #0]
  4037c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4037c4:	2900      	cmp	r1, #0
  4037c6:	bf08      	it	eq
  4037c8:	4611      	moveq	r1, r2
  4037ca:	4622      	mov	r2, r4
  4037cc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4037d0:	a901      	add	r1, sp, #4
  4037d2:	47a0      	blx	r4
  4037d4:	e7e9      	b.n	4037aa <_wcrtomb_r+0x1e>
  4037d6:	bf00      	nop
  4037d8:	20000010 	.word	0x20000010
  4037dc:	20000444 	.word	0x20000444

004037e0 <__ascii_wctomb>:
  4037e0:	b121      	cbz	r1, 4037ec <__ascii_wctomb+0xc>
  4037e2:	2aff      	cmp	r2, #255	; 0xff
  4037e4:	d804      	bhi.n	4037f0 <__ascii_wctomb+0x10>
  4037e6:	700a      	strb	r2, [r1, #0]
  4037e8:	2001      	movs	r0, #1
  4037ea:	4770      	bx	lr
  4037ec:	4608      	mov	r0, r1
  4037ee:	4770      	bx	lr
  4037f0:	238a      	movs	r3, #138	; 0x8a
  4037f2:	6003      	str	r3, [r0, #0]
  4037f4:	f04f 30ff 	mov.w	r0, #4294967295
  4037f8:	4770      	bx	lr
  4037fa:	bf00      	nop

004037fc <_write_r>:
  4037fc:	b570      	push	{r4, r5, r6, lr}
  4037fe:	460d      	mov	r5, r1
  403800:	4c08      	ldr	r4, [pc, #32]	; (403824 <_write_r+0x28>)
  403802:	4611      	mov	r1, r2
  403804:	4606      	mov	r6, r0
  403806:	461a      	mov	r2, r3
  403808:	4628      	mov	r0, r5
  40380a:	2300      	movs	r3, #0
  40380c:	6023      	str	r3, [r4, #0]
  40380e:	f7fc fe59 	bl	4004c4 <_write>
  403812:	1c43      	adds	r3, r0, #1
  403814:	d000      	beq.n	403818 <_write_r+0x1c>
  403816:	bd70      	pop	{r4, r5, r6, pc}
  403818:	6823      	ldr	r3, [r4, #0]
  40381a:	2b00      	cmp	r3, #0
  40381c:	d0fb      	beq.n	403816 <_write_r+0x1a>
  40381e:	6033      	str	r3, [r6, #0]
  403820:	bd70      	pop	{r4, r5, r6, pc}
  403822:	bf00      	nop
  403824:	20000bb0 	.word	0x20000bb0

00403828 <__register_exitproc>:
  403828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40382c:	4d2c      	ldr	r5, [pc, #176]	; (4038e0 <__register_exitproc+0xb8>)
  40382e:	4606      	mov	r6, r0
  403830:	6828      	ldr	r0, [r5, #0]
  403832:	4698      	mov	r8, r3
  403834:	460f      	mov	r7, r1
  403836:	4691      	mov	r9, r2
  403838:	f7ff f83e 	bl	4028b8 <__retarget_lock_acquire_recursive>
  40383c:	4b29      	ldr	r3, [pc, #164]	; (4038e4 <__register_exitproc+0xbc>)
  40383e:	681c      	ldr	r4, [r3, #0]
  403840:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403844:	2b00      	cmp	r3, #0
  403846:	d03e      	beq.n	4038c6 <__register_exitproc+0x9e>
  403848:	685a      	ldr	r2, [r3, #4]
  40384a:	2a1f      	cmp	r2, #31
  40384c:	dc1c      	bgt.n	403888 <__register_exitproc+0x60>
  40384e:	f102 0e01 	add.w	lr, r2, #1
  403852:	b176      	cbz	r6, 403872 <__register_exitproc+0x4a>
  403854:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403858:	2401      	movs	r4, #1
  40385a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40385e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403862:	4094      	lsls	r4, r2
  403864:	4320      	orrs	r0, r4
  403866:	2e02      	cmp	r6, #2
  403868:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40386c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403870:	d023      	beq.n	4038ba <__register_exitproc+0x92>
  403872:	3202      	adds	r2, #2
  403874:	f8c3 e004 	str.w	lr, [r3, #4]
  403878:	6828      	ldr	r0, [r5, #0]
  40387a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40387e:	f7ff f81d 	bl	4028bc <__retarget_lock_release_recursive>
  403882:	2000      	movs	r0, #0
  403884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403888:	4b17      	ldr	r3, [pc, #92]	; (4038e8 <__register_exitproc+0xc0>)
  40388a:	b30b      	cbz	r3, 4038d0 <__register_exitproc+0xa8>
  40388c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403890:	f7ff f88e 	bl	4029b0 <malloc>
  403894:	4603      	mov	r3, r0
  403896:	b1d8      	cbz	r0, 4038d0 <__register_exitproc+0xa8>
  403898:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40389c:	6002      	str	r2, [r0, #0]
  40389e:	2100      	movs	r1, #0
  4038a0:	6041      	str	r1, [r0, #4]
  4038a2:	460a      	mov	r2, r1
  4038a4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4038a8:	f04f 0e01 	mov.w	lr, #1
  4038ac:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4038b0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4038b4:	2e00      	cmp	r6, #0
  4038b6:	d0dc      	beq.n	403872 <__register_exitproc+0x4a>
  4038b8:	e7cc      	b.n	403854 <__register_exitproc+0x2c>
  4038ba:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4038be:	430c      	orrs	r4, r1
  4038c0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4038c4:	e7d5      	b.n	403872 <__register_exitproc+0x4a>
  4038c6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4038ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4038ce:	e7bb      	b.n	403848 <__register_exitproc+0x20>
  4038d0:	6828      	ldr	r0, [r5, #0]
  4038d2:	f7fe fff3 	bl	4028bc <__retarget_lock_release_recursive>
  4038d6:	f04f 30ff 	mov.w	r0, #4294967295
  4038da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4038de:	bf00      	nop
  4038e0:	20000440 	.word	0x20000440
  4038e4:	00403d9c 	.word	0x00403d9c
  4038e8:	004029b1 	.word	0x004029b1

004038ec <_close_r>:
  4038ec:	b538      	push	{r3, r4, r5, lr}
  4038ee:	4c07      	ldr	r4, [pc, #28]	; (40390c <_close_r+0x20>)
  4038f0:	2300      	movs	r3, #0
  4038f2:	4605      	mov	r5, r0
  4038f4:	4608      	mov	r0, r1
  4038f6:	6023      	str	r3, [r4, #0]
  4038f8:	f7fd f994 	bl	400c24 <_close>
  4038fc:	1c43      	adds	r3, r0, #1
  4038fe:	d000      	beq.n	403902 <_close_r+0x16>
  403900:	bd38      	pop	{r3, r4, r5, pc}
  403902:	6823      	ldr	r3, [r4, #0]
  403904:	2b00      	cmp	r3, #0
  403906:	d0fb      	beq.n	403900 <_close_r+0x14>
  403908:	602b      	str	r3, [r5, #0]
  40390a:	bd38      	pop	{r3, r4, r5, pc}
  40390c:	20000bb0 	.word	0x20000bb0

00403910 <_fclose_r>:
  403910:	b570      	push	{r4, r5, r6, lr}
  403912:	b159      	cbz	r1, 40392c <_fclose_r+0x1c>
  403914:	4605      	mov	r5, r0
  403916:	460c      	mov	r4, r1
  403918:	b110      	cbz	r0, 403920 <_fclose_r+0x10>
  40391a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40391c:	2b00      	cmp	r3, #0
  40391e:	d03c      	beq.n	40399a <_fclose_r+0x8a>
  403920:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403922:	07d8      	lsls	r0, r3, #31
  403924:	d505      	bpl.n	403932 <_fclose_r+0x22>
  403926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40392a:	b92b      	cbnz	r3, 403938 <_fclose_r+0x28>
  40392c:	2600      	movs	r6, #0
  40392e:	4630      	mov	r0, r6
  403930:	bd70      	pop	{r4, r5, r6, pc}
  403932:	89a3      	ldrh	r3, [r4, #12]
  403934:	0599      	lsls	r1, r3, #22
  403936:	d53c      	bpl.n	4039b2 <_fclose_r+0xa2>
  403938:	4621      	mov	r1, r4
  40393a:	4628      	mov	r0, r5
  40393c:	f7fe fb04 	bl	401f48 <__sflush_r>
  403940:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403942:	4606      	mov	r6, r0
  403944:	b133      	cbz	r3, 403954 <_fclose_r+0x44>
  403946:	69e1      	ldr	r1, [r4, #28]
  403948:	4628      	mov	r0, r5
  40394a:	4798      	blx	r3
  40394c:	2800      	cmp	r0, #0
  40394e:	bfb8      	it	lt
  403950:	f04f 36ff 	movlt.w	r6, #4294967295
  403954:	89a3      	ldrh	r3, [r4, #12]
  403956:	061a      	lsls	r2, r3, #24
  403958:	d422      	bmi.n	4039a0 <_fclose_r+0x90>
  40395a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40395c:	b141      	cbz	r1, 403970 <_fclose_r+0x60>
  40395e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403962:	4299      	cmp	r1, r3
  403964:	d002      	beq.n	40396c <_fclose_r+0x5c>
  403966:	4628      	mov	r0, r5
  403968:	f7fe fd0c 	bl	402384 <_free_r>
  40396c:	2300      	movs	r3, #0
  40396e:	6323      	str	r3, [r4, #48]	; 0x30
  403970:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403972:	b121      	cbz	r1, 40397e <_fclose_r+0x6e>
  403974:	4628      	mov	r0, r5
  403976:	f7fe fd05 	bl	402384 <_free_r>
  40397a:	2300      	movs	r3, #0
  40397c:	6463      	str	r3, [r4, #68]	; 0x44
  40397e:	f7fe fc07 	bl	402190 <__sfp_lock_acquire>
  403982:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403984:	2200      	movs	r2, #0
  403986:	07db      	lsls	r3, r3, #31
  403988:	81a2      	strh	r2, [r4, #12]
  40398a:	d50e      	bpl.n	4039aa <_fclose_r+0x9a>
  40398c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40398e:	f7fe ff91 	bl	4028b4 <__retarget_lock_close_recursive>
  403992:	f7fe fc03 	bl	40219c <__sfp_lock_release>
  403996:	4630      	mov	r0, r6
  403998:	bd70      	pop	{r4, r5, r6, pc}
  40399a:	f7fe fbcd 	bl	402138 <__sinit>
  40399e:	e7bf      	b.n	403920 <_fclose_r+0x10>
  4039a0:	6921      	ldr	r1, [r4, #16]
  4039a2:	4628      	mov	r0, r5
  4039a4:	f7fe fcee 	bl	402384 <_free_r>
  4039a8:	e7d7      	b.n	40395a <_fclose_r+0x4a>
  4039aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4039ac:	f7fe ff86 	bl	4028bc <__retarget_lock_release_recursive>
  4039b0:	e7ec      	b.n	40398c <_fclose_r+0x7c>
  4039b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4039b4:	f7fe ff80 	bl	4028b8 <__retarget_lock_acquire_recursive>
  4039b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4039bc:	2b00      	cmp	r3, #0
  4039be:	d1bb      	bne.n	403938 <_fclose_r+0x28>
  4039c0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4039c2:	f016 0601 	ands.w	r6, r6, #1
  4039c6:	d1b1      	bne.n	40392c <_fclose_r+0x1c>
  4039c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4039ca:	f7fe ff77 	bl	4028bc <__retarget_lock_release_recursive>
  4039ce:	4630      	mov	r0, r6
  4039d0:	bd70      	pop	{r4, r5, r6, pc}
  4039d2:	bf00      	nop

004039d4 <_fstat_r>:
  4039d4:	b538      	push	{r3, r4, r5, lr}
  4039d6:	460b      	mov	r3, r1
  4039d8:	4c07      	ldr	r4, [pc, #28]	; (4039f8 <_fstat_r+0x24>)
  4039da:	4605      	mov	r5, r0
  4039dc:	4611      	mov	r1, r2
  4039de:	4618      	mov	r0, r3
  4039e0:	2300      	movs	r3, #0
  4039e2:	6023      	str	r3, [r4, #0]
  4039e4:	f7fd f921 	bl	400c2a <_fstat>
  4039e8:	1c43      	adds	r3, r0, #1
  4039ea:	d000      	beq.n	4039ee <_fstat_r+0x1a>
  4039ec:	bd38      	pop	{r3, r4, r5, pc}
  4039ee:	6823      	ldr	r3, [r4, #0]
  4039f0:	2b00      	cmp	r3, #0
  4039f2:	d0fb      	beq.n	4039ec <_fstat_r+0x18>
  4039f4:	602b      	str	r3, [r5, #0]
  4039f6:	bd38      	pop	{r3, r4, r5, pc}
  4039f8:	20000bb0 	.word	0x20000bb0

004039fc <_isatty_r>:
  4039fc:	b538      	push	{r3, r4, r5, lr}
  4039fe:	4c07      	ldr	r4, [pc, #28]	; (403a1c <_isatty_r+0x20>)
  403a00:	2300      	movs	r3, #0
  403a02:	4605      	mov	r5, r0
  403a04:	4608      	mov	r0, r1
  403a06:	6023      	str	r3, [r4, #0]
  403a08:	f7fd f914 	bl	400c34 <_isatty>
  403a0c:	1c43      	adds	r3, r0, #1
  403a0e:	d000      	beq.n	403a12 <_isatty_r+0x16>
  403a10:	bd38      	pop	{r3, r4, r5, pc}
  403a12:	6823      	ldr	r3, [r4, #0]
  403a14:	2b00      	cmp	r3, #0
  403a16:	d0fb      	beq.n	403a10 <_isatty_r+0x14>
  403a18:	602b      	str	r3, [r5, #0]
  403a1a:	bd38      	pop	{r3, r4, r5, pc}
  403a1c:	20000bb0 	.word	0x20000bb0

00403a20 <_lseek_r>:
  403a20:	b570      	push	{r4, r5, r6, lr}
  403a22:	460d      	mov	r5, r1
  403a24:	4c08      	ldr	r4, [pc, #32]	; (403a48 <_lseek_r+0x28>)
  403a26:	4611      	mov	r1, r2
  403a28:	4606      	mov	r6, r0
  403a2a:	461a      	mov	r2, r3
  403a2c:	4628      	mov	r0, r5
  403a2e:	2300      	movs	r3, #0
  403a30:	6023      	str	r3, [r4, #0]
  403a32:	f7fd f901 	bl	400c38 <_lseek>
  403a36:	1c43      	adds	r3, r0, #1
  403a38:	d000      	beq.n	403a3c <_lseek_r+0x1c>
  403a3a:	bd70      	pop	{r4, r5, r6, pc}
  403a3c:	6823      	ldr	r3, [r4, #0]
  403a3e:	2b00      	cmp	r3, #0
  403a40:	d0fb      	beq.n	403a3a <_lseek_r+0x1a>
  403a42:	6033      	str	r3, [r6, #0]
  403a44:	bd70      	pop	{r4, r5, r6, pc}
  403a46:	bf00      	nop
  403a48:	20000bb0 	.word	0x20000bb0

00403a4c <_read_r>:
  403a4c:	b570      	push	{r4, r5, r6, lr}
  403a4e:	460d      	mov	r5, r1
  403a50:	4c08      	ldr	r4, [pc, #32]	; (403a74 <_read_r+0x28>)
  403a52:	4611      	mov	r1, r2
  403a54:	4606      	mov	r6, r0
  403a56:	461a      	mov	r2, r3
  403a58:	4628      	mov	r0, r5
  403a5a:	2300      	movs	r3, #0
  403a5c:	6023      	str	r3, [r4, #0]
  403a5e:	f7fc fc77 	bl	400350 <_read>
  403a62:	1c43      	adds	r3, r0, #1
  403a64:	d000      	beq.n	403a68 <_read_r+0x1c>
  403a66:	bd70      	pop	{r4, r5, r6, pc}
  403a68:	6823      	ldr	r3, [r4, #0]
  403a6a:	2b00      	cmp	r3, #0
  403a6c:	d0fb      	beq.n	403a66 <_read_r+0x1a>
  403a6e:	6033      	str	r3, [r6, #0]
  403a70:	bd70      	pop	{r4, r5, r6, pc}
  403a72:	bf00      	nop
  403a74:	20000bb0 	.word	0x20000bb0

00403a78 <__aeabi_uldivmod>:
  403a78:	b953      	cbnz	r3, 403a90 <__aeabi_uldivmod+0x18>
  403a7a:	b94a      	cbnz	r2, 403a90 <__aeabi_uldivmod+0x18>
  403a7c:	2900      	cmp	r1, #0
  403a7e:	bf08      	it	eq
  403a80:	2800      	cmpeq	r0, #0
  403a82:	bf1c      	itt	ne
  403a84:	f04f 31ff 	movne.w	r1, #4294967295
  403a88:	f04f 30ff 	movne.w	r0, #4294967295
  403a8c:	f000 b97a 	b.w	403d84 <__aeabi_idiv0>
  403a90:	f1ad 0c08 	sub.w	ip, sp, #8
  403a94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403a98:	f000 f806 	bl	403aa8 <__udivmoddi4>
  403a9c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403aa4:	b004      	add	sp, #16
  403aa6:	4770      	bx	lr

00403aa8 <__udivmoddi4>:
  403aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403aac:	468c      	mov	ip, r1
  403aae:	460d      	mov	r5, r1
  403ab0:	4604      	mov	r4, r0
  403ab2:	9e08      	ldr	r6, [sp, #32]
  403ab4:	2b00      	cmp	r3, #0
  403ab6:	d151      	bne.n	403b5c <__udivmoddi4+0xb4>
  403ab8:	428a      	cmp	r2, r1
  403aba:	4617      	mov	r7, r2
  403abc:	d96d      	bls.n	403b9a <__udivmoddi4+0xf2>
  403abe:	fab2 fe82 	clz	lr, r2
  403ac2:	f1be 0f00 	cmp.w	lr, #0
  403ac6:	d00b      	beq.n	403ae0 <__udivmoddi4+0x38>
  403ac8:	f1ce 0c20 	rsb	ip, lr, #32
  403acc:	fa01 f50e 	lsl.w	r5, r1, lr
  403ad0:	fa20 fc0c 	lsr.w	ip, r0, ip
  403ad4:	fa02 f70e 	lsl.w	r7, r2, lr
  403ad8:	ea4c 0c05 	orr.w	ip, ip, r5
  403adc:	fa00 f40e 	lsl.w	r4, r0, lr
  403ae0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403ae4:	0c25      	lsrs	r5, r4, #16
  403ae6:	fbbc f8fa 	udiv	r8, ip, sl
  403aea:	fa1f f987 	uxth.w	r9, r7
  403aee:	fb0a cc18 	mls	ip, sl, r8, ip
  403af2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403af6:	fb08 f309 	mul.w	r3, r8, r9
  403afa:	42ab      	cmp	r3, r5
  403afc:	d90a      	bls.n	403b14 <__udivmoddi4+0x6c>
  403afe:	19ed      	adds	r5, r5, r7
  403b00:	f108 32ff 	add.w	r2, r8, #4294967295
  403b04:	f080 8123 	bcs.w	403d4e <__udivmoddi4+0x2a6>
  403b08:	42ab      	cmp	r3, r5
  403b0a:	f240 8120 	bls.w	403d4e <__udivmoddi4+0x2a6>
  403b0e:	f1a8 0802 	sub.w	r8, r8, #2
  403b12:	443d      	add	r5, r7
  403b14:	1aed      	subs	r5, r5, r3
  403b16:	b2a4      	uxth	r4, r4
  403b18:	fbb5 f0fa 	udiv	r0, r5, sl
  403b1c:	fb0a 5510 	mls	r5, sl, r0, r5
  403b20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403b24:	fb00 f909 	mul.w	r9, r0, r9
  403b28:	45a1      	cmp	r9, r4
  403b2a:	d909      	bls.n	403b40 <__udivmoddi4+0x98>
  403b2c:	19e4      	adds	r4, r4, r7
  403b2e:	f100 33ff 	add.w	r3, r0, #4294967295
  403b32:	f080 810a 	bcs.w	403d4a <__udivmoddi4+0x2a2>
  403b36:	45a1      	cmp	r9, r4
  403b38:	f240 8107 	bls.w	403d4a <__udivmoddi4+0x2a2>
  403b3c:	3802      	subs	r0, #2
  403b3e:	443c      	add	r4, r7
  403b40:	eba4 0409 	sub.w	r4, r4, r9
  403b44:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403b48:	2100      	movs	r1, #0
  403b4a:	2e00      	cmp	r6, #0
  403b4c:	d061      	beq.n	403c12 <__udivmoddi4+0x16a>
  403b4e:	fa24 f40e 	lsr.w	r4, r4, lr
  403b52:	2300      	movs	r3, #0
  403b54:	6034      	str	r4, [r6, #0]
  403b56:	6073      	str	r3, [r6, #4]
  403b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b5c:	428b      	cmp	r3, r1
  403b5e:	d907      	bls.n	403b70 <__udivmoddi4+0xc8>
  403b60:	2e00      	cmp	r6, #0
  403b62:	d054      	beq.n	403c0e <__udivmoddi4+0x166>
  403b64:	2100      	movs	r1, #0
  403b66:	e886 0021 	stmia.w	r6, {r0, r5}
  403b6a:	4608      	mov	r0, r1
  403b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b70:	fab3 f183 	clz	r1, r3
  403b74:	2900      	cmp	r1, #0
  403b76:	f040 808e 	bne.w	403c96 <__udivmoddi4+0x1ee>
  403b7a:	42ab      	cmp	r3, r5
  403b7c:	d302      	bcc.n	403b84 <__udivmoddi4+0xdc>
  403b7e:	4282      	cmp	r2, r0
  403b80:	f200 80fa 	bhi.w	403d78 <__udivmoddi4+0x2d0>
  403b84:	1a84      	subs	r4, r0, r2
  403b86:	eb65 0503 	sbc.w	r5, r5, r3
  403b8a:	2001      	movs	r0, #1
  403b8c:	46ac      	mov	ip, r5
  403b8e:	2e00      	cmp	r6, #0
  403b90:	d03f      	beq.n	403c12 <__udivmoddi4+0x16a>
  403b92:	e886 1010 	stmia.w	r6, {r4, ip}
  403b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b9a:	b912      	cbnz	r2, 403ba2 <__udivmoddi4+0xfa>
  403b9c:	2701      	movs	r7, #1
  403b9e:	fbb7 f7f2 	udiv	r7, r7, r2
  403ba2:	fab7 fe87 	clz	lr, r7
  403ba6:	f1be 0f00 	cmp.w	lr, #0
  403baa:	d134      	bne.n	403c16 <__udivmoddi4+0x16e>
  403bac:	1beb      	subs	r3, r5, r7
  403bae:	0c3a      	lsrs	r2, r7, #16
  403bb0:	fa1f fc87 	uxth.w	ip, r7
  403bb4:	2101      	movs	r1, #1
  403bb6:	fbb3 f8f2 	udiv	r8, r3, r2
  403bba:	0c25      	lsrs	r5, r4, #16
  403bbc:	fb02 3318 	mls	r3, r2, r8, r3
  403bc0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403bc4:	fb0c f308 	mul.w	r3, ip, r8
  403bc8:	42ab      	cmp	r3, r5
  403bca:	d907      	bls.n	403bdc <__udivmoddi4+0x134>
  403bcc:	19ed      	adds	r5, r5, r7
  403bce:	f108 30ff 	add.w	r0, r8, #4294967295
  403bd2:	d202      	bcs.n	403bda <__udivmoddi4+0x132>
  403bd4:	42ab      	cmp	r3, r5
  403bd6:	f200 80d1 	bhi.w	403d7c <__udivmoddi4+0x2d4>
  403bda:	4680      	mov	r8, r0
  403bdc:	1aed      	subs	r5, r5, r3
  403bde:	b2a3      	uxth	r3, r4
  403be0:	fbb5 f0f2 	udiv	r0, r5, r2
  403be4:	fb02 5510 	mls	r5, r2, r0, r5
  403be8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403bec:	fb0c fc00 	mul.w	ip, ip, r0
  403bf0:	45a4      	cmp	ip, r4
  403bf2:	d907      	bls.n	403c04 <__udivmoddi4+0x15c>
  403bf4:	19e4      	adds	r4, r4, r7
  403bf6:	f100 33ff 	add.w	r3, r0, #4294967295
  403bfa:	d202      	bcs.n	403c02 <__udivmoddi4+0x15a>
  403bfc:	45a4      	cmp	ip, r4
  403bfe:	f200 80b8 	bhi.w	403d72 <__udivmoddi4+0x2ca>
  403c02:	4618      	mov	r0, r3
  403c04:	eba4 040c 	sub.w	r4, r4, ip
  403c08:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403c0c:	e79d      	b.n	403b4a <__udivmoddi4+0xa2>
  403c0e:	4631      	mov	r1, r6
  403c10:	4630      	mov	r0, r6
  403c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c16:	f1ce 0420 	rsb	r4, lr, #32
  403c1a:	fa05 f30e 	lsl.w	r3, r5, lr
  403c1e:	fa07 f70e 	lsl.w	r7, r7, lr
  403c22:	fa20 f804 	lsr.w	r8, r0, r4
  403c26:	0c3a      	lsrs	r2, r7, #16
  403c28:	fa25 f404 	lsr.w	r4, r5, r4
  403c2c:	ea48 0803 	orr.w	r8, r8, r3
  403c30:	fbb4 f1f2 	udiv	r1, r4, r2
  403c34:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403c38:	fb02 4411 	mls	r4, r2, r1, r4
  403c3c:	fa1f fc87 	uxth.w	ip, r7
  403c40:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403c44:	fb01 f30c 	mul.w	r3, r1, ip
  403c48:	42ab      	cmp	r3, r5
  403c4a:	fa00 f40e 	lsl.w	r4, r0, lr
  403c4e:	d909      	bls.n	403c64 <__udivmoddi4+0x1bc>
  403c50:	19ed      	adds	r5, r5, r7
  403c52:	f101 30ff 	add.w	r0, r1, #4294967295
  403c56:	f080 808a 	bcs.w	403d6e <__udivmoddi4+0x2c6>
  403c5a:	42ab      	cmp	r3, r5
  403c5c:	f240 8087 	bls.w	403d6e <__udivmoddi4+0x2c6>
  403c60:	3902      	subs	r1, #2
  403c62:	443d      	add	r5, r7
  403c64:	1aeb      	subs	r3, r5, r3
  403c66:	fa1f f588 	uxth.w	r5, r8
  403c6a:	fbb3 f0f2 	udiv	r0, r3, r2
  403c6e:	fb02 3310 	mls	r3, r2, r0, r3
  403c72:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403c76:	fb00 f30c 	mul.w	r3, r0, ip
  403c7a:	42ab      	cmp	r3, r5
  403c7c:	d907      	bls.n	403c8e <__udivmoddi4+0x1e6>
  403c7e:	19ed      	adds	r5, r5, r7
  403c80:	f100 38ff 	add.w	r8, r0, #4294967295
  403c84:	d26f      	bcs.n	403d66 <__udivmoddi4+0x2be>
  403c86:	42ab      	cmp	r3, r5
  403c88:	d96d      	bls.n	403d66 <__udivmoddi4+0x2be>
  403c8a:	3802      	subs	r0, #2
  403c8c:	443d      	add	r5, r7
  403c8e:	1aeb      	subs	r3, r5, r3
  403c90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403c94:	e78f      	b.n	403bb6 <__udivmoddi4+0x10e>
  403c96:	f1c1 0720 	rsb	r7, r1, #32
  403c9a:	fa22 f807 	lsr.w	r8, r2, r7
  403c9e:	408b      	lsls	r3, r1
  403ca0:	fa05 f401 	lsl.w	r4, r5, r1
  403ca4:	ea48 0303 	orr.w	r3, r8, r3
  403ca8:	fa20 fe07 	lsr.w	lr, r0, r7
  403cac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403cb0:	40fd      	lsrs	r5, r7
  403cb2:	ea4e 0e04 	orr.w	lr, lr, r4
  403cb6:	fbb5 f9fc 	udiv	r9, r5, ip
  403cba:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403cbe:	fb0c 5519 	mls	r5, ip, r9, r5
  403cc2:	fa1f f883 	uxth.w	r8, r3
  403cc6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403cca:	fb09 f408 	mul.w	r4, r9, r8
  403cce:	42ac      	cmp	r4, r5
  403cd0:	fa02 f201 	lsl.w	r2, r2, r1
  403cd4:	fa00 fa01 	lsl.w	sl, r0, r1
  403cd8:	d908      	bls.n	403cec <__udivmoddi4+0x244>
  403cda:	18ed      	adds	r5, r5, r3
  403cdc:	f109 30ff 	add.w	r0, r9, #4294967295
  403ce0:	d243      	bcs.n	403d6a <__udivmoddi4+0x2c2>
  403ce2:	42ac      	cmp	r4, r5
  403ce4:	d941      	bls.n	403d6a <__udivmoddi4+0x2c2>
  403ce6:	f1a9 0902 	sub.w	r9, r9, #2
  403cea:	441d      	add	r5, r3
  403cec:	1b2d      	subs	r5, r5, r4
  403cee:	fa1f fe8e 	uxth.w	lr, lr
  403cf2:	fbb5 f0fc 	udiv	r0, r5, ip
  403cf6:	fb0c 5510 	mls	r5, ip, r0, r5
  403cfa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403cfe:	fb00 f808 	mul.w	r8, r0, r8
  403d02:	45a0      	cmp	r8, r4
  403d04:	d907      	bls.n	403d16 <__udivmoddi4+0x26e>
  403d06:	18e4      	adds	r4, r4, r3
  403d08:	f100 35ff 	add.w	r5, r0, #4294967295
  403d0c:	d229      	bcs.n	403d62 <__udivmoddi4+0x2ba>
  403d0e:	45a0      	cmp	r8, r4
  403d10:	d927      	bls.n	403d62 <__udivmoddi4+0x2ba>
  403d12:	3802      	subs	r0, #2
  403d14:	441c      	add	r4, r3
  403d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403d1a:	eba4 0408 	sub.w	r4, r4, r8
  403d1e:	fba0 8902 	umull	r8, r9, r0, r2
  403d22:	454c      	cmp	r4, r9
  403d24:	46c6      	mov	lr, r8
  403d26:	464d      	mov	r5, r9
  403d28:	d315      	bcc.n	403d56 <__udivmoddi4+0x2ae>
  403d2a:	d012      	beq.n	403d52 <__udivmoddi4+0x2aa>
  403d2c:	b156      	cbz	r6, 403d44 <__udivmoddi4+0x29c>
  403d2e:	ebba 030e 	subs.w	r3, sl, lr
  403d32:	eb64 0405 	sbc.w	r4, r4, r5
  403d36:	fa04 f707 	lsl.w	r7, r4, r7
  403d3a:	40cb      	lsrs	r3, r1
  403d3c:	431f      	orrs	r7, r3
  403d3e:	40cc      	lsrs	r4, r1
  403d40:	6037      	str	r7, [r6, #0]
  403d42:	6074      	str	r4, [r6, #4]
  403d44:	2100      	movs	r1, #0
  403d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d4a:	4618      	mov	r0, r3
  403d4c:	e6f8      	b.n	403b40 <__udivmoddi4+0x98>
  403d4e:	4690      	mov	r8, r2
  403d50:	e6e0      	b.n	403b14 <__udivmoddi4+0x6c>
  403d52:	45c2      	cmp	sl, r8
  403d54:	d2ea      	bcs.n	403d2c <__udivmoddi4+0x284>
  403d56:	ebb8 0e02 	subs.w	lr, r8, r2
  403d5a:	eb69 0503 	sbc.w	r5, r9, r3
  403d5e:	3801      	subs	r0, #1
  403d60:	e7e4      	b.n	403d2c <__udivmoddi4+0x284>
  403d62:	4628      	mov	r0, r5
  403d64:	e7d7      	b.n	403d16 <__udivmoddi4+0x26e>
  403d66:	4640      	mov	r0, r8
  403d68:	e791      	b.n	403c8e <__udivmoddi4+0x1e6>
  403d6a:	4681      	mov	r9, r0
  403d6c:	e7be      	b.n	403cec <__udivmoddi4+0x244>
  403d6e:	4601      	mov	r1, r0
  403d70:	e778      	b.n	403c64 <__udivmoddi4+0x1bc>
  403d72:	3802      	subs	r0, #2
  403d74:	443c      	add	r4, r7
  403d76:	e745      	b.n	403c04 <__udivmoddi4+0x15c>
  403d78:	4608      	mov	r0, r1
  403d7a:	e708      	b.n	403b8e <__udivmoddi4+0xe6>
  403d7c:	f1a8 0802 	sub.w	r8, r8, #2
  403d80:	443d      	add	r5, r7
  403d82:	e72b      	b.n	403bdc <__udivmoddi4+0x134>

00403d84 <__aeabi_idiv0>:
  403d84:	4770      	bx	lr
  403d86:	bf00      	nop
  403d88:	31534441 	.word	0x31534441
  403d8c:	5f383932 	.word	0x5f383932
  403d90:	74736554 	.word	0x74736554
  403d94:	20642520 	.word	0x20642520
  403d98:	00000a0d 	.word	0x00000a0d

00403d9c <_global_impure_ptr>:
  403d9c:	20000018 33323130 37363534 42413938     ... 0123456789AB
  403dac:	46454443 00000000 33323130 37363534     CDEF....01234567
  403dbc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  403dcc:	0000296c                                l)..

00403dd0 <blanks.7217>:
  403dd0:	20202020 20202020 20202020 20202020                     

00403de0 <zeroes.7218>:
  403de0:	30303030 30303030 30303030 30303030     0000000000000000
  403df0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00403e00 <_ctype_>:
  403e00:	20202000 20202020 28282020 20282828     .         ((((( 
  403e10:	20202020 20202020 20202020 20202020                     
  403e20:	10108820 10101010 10101010 10101010      ...............
  403e30:	04040410 04040404 10040404 10101010     ................
  403e40:	41411010 41414141 01010101 01010101     ..AAAAAA........
  403e50:	01010101 01010101 01010101 10101010     ................
  403e60:	42421010 42424242 02020202 02020202     ..BBBBBB........
  403e70:	02020202 02020202 02020202 10101010     ................
  403e80:	00000020 00000000 00000000 00000000      ...............
	...

00403f04 <_init>:
  403f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403f06:	bf00      	nop
  403f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403f0a:	bc08      	pop	{r3}
  403f0c:	469e      	mov	lr, r3
  403f0e:	4770      	bx	lr

00403f10 <__init_array_start>:
  403f10:	00401f29 	.word	0x00401f29

00403f14 <__frame_dummy_init_array_entry>:
  403f14:	004000f1                                ..@.

00403f18 <_fini>:
  403f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403f1a:	bf00      	nop
  403f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403f1e:	bc08      	pop	{r3}
  403f20:	469e      	mov	lr, r3
  403f22:	4770      	bx	lr

00403f24 <__fini_array_start>:
  403f24:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <g_interrupt_enabled>:
2000000a:	0001                                        ..

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__atexit_recursive_mutex>:
20000440:	0b8c 2000                                   ... 

20000444 <__global_locale>:
20000444:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000464:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000484:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000504:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000524:	37e1 0040 2f21 0040 0000 0000 3e00 0040     .7@.!/@......>@.
20000534:	3dfc 0040 3db0 0040 3db0 0040 3db0 0040     .=@..=@..=@..=@.
20000544:	3db0 0040 3db0 0040 3db0 0040 3db0 0040     .=@..=@..=@..=@.
20000554:	3db0 0040 3db0 0040 ffff ffff ffff ffff     .=@..=@.........
20000564:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2000058c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

200005b0 <__malloc_av_>:
	...
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 
20000878:	0870 2000 0870 2000 0878 2000 0878 2000     p.. p.. x.. x.. 
20000888:	0880 2000 0880 2000 0888 2000 0888 2000     ... ... ... ... 
20000898:	0890 2000 0890 2000 0898 2000 0898 2000     ... ... ... ... 
200008a8:	08a0 2000 08a0 2000 08a8 2000 08a8 2000     ... ... ... ... 
200008b8:	08b0 2000 08b0 2000 08b8 2000 08b8 2000     ... ... ... ... 
200008c8:	08c0 2000 08c0 2000 08c8 2000 08c8 2000     ... ... ... ... 
200008d8:	08d0 2000 08d0 2000 08d8 2000 08d8 2000     ... ... ... ... 
200008e8:	08e0 2000 08e0 2000 08e8 2000 08e8 2000     ... ... ... ... 
200008f8:	08f0 2000 08f0 2000 08f8 2000 08f8 2000     ... ... ... ... 
20000908:	0900 2000 0900 2000 0908 2000 0908 2000     ... ... ... ... 
20000918:	0910 2000 0910 2000 0918 2000 0918 2000     ... ... ... ... 
20000928:	0920 2000 0920 2000 0928 2000 0928 2000      ..  .. (.. (.. 
20000938:	0930 2000 0930 2000 0938 2000 0938 2000     0.. 0.. 8.. 8.. 
20000948:	0940 2000 0940 2000 0948 2000 0948 2000     @.. @.. H.. H.. 
20000958:	0950 2000 0950 2000 0958 2000 0958 2000     P.. P.. X.. X.. 
20000968:	0960 2000 0960 2000 0968 2000 0968 2000     `.. `.. h.. h.. 
20000978:	0970 2000 0970 2000 0978 2000 0978 2000     p.. p.. x.. x.. 
20000988:	0980 2000 0980 2000 0988 2000 0988 2000     ... ... ... ... 
20000998:	0990 2000 0990 2000 0998 2000 0998 2000     ... ... ... ... 
200009a8:	09a0 2000 09a0 2000 09a8 2000 09a8 2000     ... ... ... ... 

200009b8 <__malloc_sbrk_base>:
200009b8:	ffff ffff                                   ....

200009bc <__malloc_trim_threshold>:
200009bc:	0000 0002                                   ....
