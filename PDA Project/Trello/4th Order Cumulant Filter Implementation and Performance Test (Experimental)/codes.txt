 def func_conv(u, v):
    m = len(u)
    n = len(v)
    Cum_conv = np.zeros(n)
    for k in range(n):
        F = 0
        for j in range(max(0, k - n + 1), min(k + 1, m)):
            F += u[j] * v[k - j]
        Cum_conv[k] = F / min(k + 1, m)
    return Cum_conv



def func_cum4uni_vertical(x):
    x = x - np.mean(x)
    N = len(x)
    C4xx = np.zeros(N)
    Rxx = np.zeros(N)
    for m in range(N):
        F = 0
        F1 = 0
        for k in range(N - m):
            F += x[k] * x[k] * x[k] * x[k + m]
            F1 += x[k] * x[k + m]
        C4xx[m] = F / (N - m)
        Rxx[m] = F1 / (N - m)
    C4x_uv = C4xx - 3 * Rxx * Rxx[0]
    return C4x_uv



def func_conv(u, v):
    """
    Vectorized version of func_conv.
    """
    m = len(u)
    n = len(v)
    conv_uv = np.convolve(u, v)  # length = m+n-1
    # We only need the first n points.
    # Original code divides by min(k+1, m) for each k.
    idxs = np.arange(n)
    denominator = np.where(idxs < m, idxs + 1, m)
    Cum_conv = conv_uv[:n] / denominator
    return Cum_conv

def func_cum4uni_vertical(x):
    """
    Vectorized version of func_cum4uni_vertical.
    Uses cross-correlation and autocorrelation via np.correlate.
    """
    x = x - np.mean(x)
    N = len(x)
    # Autocorrelation of x
    Rxx_full = np.correlate(x, x, mode='full')
    # Cross-correlation of x^3 with x
    C4xx_full = np.correlate(x**3, x, mode='full')

    # For m in [0, N-1], we want Rxx(m) = Rxx_full[N-1+m] / (N-m)
    # and C4xx(m) = C4xx_full[N-1+m] / (N-m)
    m_idx = np.arange(N) + (N - 1)
    denom = N - np.arange(N)  # (N-m)

    Rxx = Rxx_full[m_idx] / denom
    C4xx = C4xx_full[m_idx] / denom

    C4x_uv = C4xx - 3 * Rxx * Rxx[0]
    return C4x_uv




b = remez(55, [0, 0.1, 0.3, 1], [1, 0], fs=2)



bin_file_reader.readFil(join(dirname(abspath(__file__)), '04_00_20241022043555.dat'))