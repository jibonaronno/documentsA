<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="distribution" content="global" />
<meta name="robots" content="follow, all" />
<meta name="language" content="en, sv" />

<title>  Anatomy of a Program in Memory : Gustavo Duarte</title>
<meta name="generator" content="WordPress 3.5.1" />
<!-- leave this for stats please -->
<!-- ukey="24FE583D" -->
<link rel="Shortcut Icon" href="http://duartes.org/gustavo/blog/wp-content/themes/dropshadow-2column/images/favicon.ico" type="image/x-icon" />
<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://duartes.org/gustavo/blog/feed" />
<link rel="alternate" type="text/xml" title="RSS .92" href="http://duartes.org/gustavo/blog/feed/rss" />
<link rel="alternate" type="application/atom+xml" title="Atom 0.3" href="http://duartes.org/gustavo/blog/feed/atom" />
<link rel="pingback" href="http://duartes.org/gustavo/blog/xmlrpc.php" />
	<link rel='archives' title='December 2010' href='http://duartes.org/gustavo/blog/post/2010/12' />
	<link rel='archives' title='February 2009' href='http://duartes.org/gustavo/blog/post/2009/02' />
	<link rel='archives' title='January 2009' href='http://duartes.org/gustavo/blog/post/2009/01' />
	<link rel='archives' title='December 2008' href='http://duartes.org/gustavo/blog/post/2008/12' />
	<link rel='archives' title='November 2008' href='http://duartes.org/gustavo/blog/post/2008/11' />
	<link rel='archives' title='October 2008' href='http://duartes.org/gustavo/blog/post/2008/10' />
	<link rel='archives' title='August 2008' href='http://duartes.org/gustavo/blog/post/2008/08' />
	<link rel='archives' title='July 2008' href='http://duartes.org/gustavo/blog/post/2008/07' />
	<link rel='archives' title='June 2008' href='http://duartes.org/gustavo/blog/post/2008/06' />
	<link rel='archives' title='May 2008' href='http://duartes.org/gustavo/blog/post/2008/05' />
	<link rel='archives' title='April 2008' href='http://duartes.org/gustavo/blog/post/2008/04' />
	<link rel='archives' title='March 2008' href='http://duartes.org/gustavo/blog/post/2008/03' />
	<link rel='archives' title='February 2008' href='http://duartes.org/gustavo/blog/post/2008/02' />
<link rel="alternate" type="application/rss+xml" title="Gustavo Duarte &raquo; Anatomy of a Program in Memory Comments Feed" href="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/feed" />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://duartes.org/gustavo/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://duartes.org/gustavo/blog/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='Getting Physical With Memory' href='http://duartes.org/gustavo/blog/post/getting-physical-with-memory' />
<link rel='next' title='Quick Note on Diagrams and the Blog' href='http://duartes.org/gustavo/blog/post/quick-note-on-diagrams-and-the-blog' />
<meta name="generator" content="WordPress 3.5.1" />
<link rel='canonical' href='http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory' />
<link rel='shortlink' href='http://duartes.org/gustavo/blog/?p=318' />
<style type="text/css" media="screen">
<!-- @import url( http://duartes.org/gustavo/blog/wp-content/themes/Cangaco/style.css ); -->
</style>
</head>

<body>

<div id="header">

<div class="headerleft">
	<a href="http://duartes.org/gustavo/blog/">Gustavo Duarte</a><br />
	<b>Software, computers, and business.</b>
	</div>

<div class="headerright">
	<ul>
		<li><a href="http://duartes.org/gustavo/blog">Home</a></li>
		<li><a href="http://duartes.org/gustavo/blog/about">About</a></li>
		<li><a href="http://duartes.org/gustavo/blog/articles">Articles</a></li>
		<li><a href="http://feeds.feedburner.com/GustavoDuarte">Subscribe</a></li>
	</ul>
</div>

</div>

<div id="content">

	<div id="contentleft">
	
		
		<!-- begin write_post -->
		<h1><a href="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory" rel="bookmark">Anatomy of a Program in Memory</a></h1>
		<p>Memory management is the heart of operating systems; it is crucial for both programming and system administration. In the next few posts I&#8217;ll cover memory with an eye towards practical aspects, but without shying away from internals. While the concepts are generic, examples are mostly from Linux and Windows on 32-bit x86. This first post describes how programs are laid out in memory.</p>
<p>Each process in a multi-tasking OS runs in its own memory sandbox. This sandbox is the <strong>virtual address space</strong>, which in 32-bit mode is <strong>always a 4GB block of memory addresses</strong>. These virtual addresses are mapped to physical memory by <strong>page tables</strong>, which are maintained by the operating system kernel and consulted by the processor. Each process has its own set of page tables, but there is a catch. Once virtual addresses are enabled, they apply to <em>all software</em> running in the machine, <em>including the kernel itself</em>. Thus a portion of the virtual address space must be reserved to the kernel:</p>
<p align="center"><img src="http://static.duartes.org/img/blogPosts/kernelUserMemorySplit.png" alt="Kernel/User Memory Split"/></p>
<p>This does <strong>not</strong> mean the kernel uses that much physical memory, only that it has that portion of address space available to map whatever physical memory it wishes. Kernel space is flagged in the page tables as exclusive to <a href="http://duartes.org/gustavo/blog/post/cpu-rings-privilege-and-protection">privileged code</a> (ring 2 or lower), hence a page fault is triggered if user-mode programs try to touch it. In Linux, kernel space is constantly present and maps the same physical memory in all processes. Kernel code and data are always addressable, ready to handle interrupts or system calls at any time. By contrast, the mapping for the user-mode portion of the address space changes whenever a process switch happens:</p>
<p align="center"><img src="http://static.duartes.org/img/blogPosts/virtualMemoryInProcessSwitch.png" alt="Process Switch Effects on Virtual Memory"/></p>
<p>Blue regions represent virtual addresses that are mapped to physical memory, whereas white regions are unmapped. In the example above, Firefox has used far more of its virtual address space due to its legendary memory hunger. The distinct bands in the address space correspond to <strong>memory segments</strong> like the heap, stack, and so on. Keep in mind these segments are simply a range of memory addresses and <em>have nothing to do</em> with <a href="http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation">Intel-style segments</a>. Anyway, here is the standard segment layout in a Linux process:</p>
<p align="center"><img src="http://static.duartes.org/img/blogPosts/linuxFlexibleAddressSpaceLayout.png" alt="Flexible Process Address Space Layout In Linux"/></p>
<p>When computing was happy and safe and cuddly, the starting virtual addresses for the segments shown above were <strong>exactly the same</strong> for nearly every process in a machine. This made it easy to exploit security vulnerabilities remotely. An exploit often needs to reference absolute memory locations: an address on the stack, the address for a library function, etc. Remote attackers must choose this location blindly, counting on the fact that address spaces are all the same. When they are, people get pwned. Thus address space randomization has become popular. Linux randomizes the <a href="http://lxr.linux.no/linux+v2.6.28.1/fs/binfmt_elf.c#L542">stack</a>,  <a href="http://lxr.linux.no/linux+v2.6.28.1/arch/x86/mm/mmap.c#L84">memory mapping segment</a>, and <a href="http://lxr.linux.no/linux+v2.6.28.1/arch/x86/kernel/process_32.c#L729">heap</a> by adding offsets to their starting addresses. Unfortunately the 32-bit address space is pretty tight, leaving little room for randomization and <a href="http://www.stanford.edu/~blp/papers/asrandom.pdf">hampering its effectiveness</a>.</p>
<p>The topmost segment in the process address space is the stack, which stores local variables and function parameters in most programming languages. Calling a method or function pushes a new <strong>stack frame</strong> onto the stack. The stack frame is destroyed when the function returns. This simple design, possible because the data obeys strict <a href="http://en.wikipedia.org/wiki/Lifo">LIFO</a> order, means that no complex data structure is needed to track stack contents &#8211; a simple pointer to the top of the stack will do. Pushing and popping are thus very fast and deterministic. Also, the constant reuse of stack regions tends to keep active stack memory in the <a href="http://duartes.org/gustavo/blog/post/intel-cpu-caches">cpu caches</a>, speeding up access. Each thread in a process gets its own stack.</p>
<p>It is possible to exhaust the area mapping the stack by pushing more data than it can fit. This triggers a page fault that is handled in Linux by <a href="http://lxr.linux.no/linux+v2.6.28/mm/mmap.c#L1716">expand_stack()</a>, which in turn calls <a href="http://lxr.linux.no/linux+v2.6.28/mm/mmap.c#L1544">acct_stack_growth()</a> to check whether it&#8217;s appropriate to grow the stack. If the stack size is below <tt>RLIMIT_STACK</tt> (usually 8MB), then normally the stack grows and the program continues merrily, unaware of what just happened. This is the normal mechanism whereby stack size adjusts to demand. However, if the maximum stack size has been reached, we have a <strong>stack overflow</strong> and the program receives a Segmentation Fault. While the mapped stack area expands to meet demand, it does not shrink back when the stack gets smaller. Like the federal budget, it only expands.</p>
<p>Dynamic stack growth is the <a href="http://lxr.linux.no/linux+v2.6.28.1/arch/x86/mm/fault.c#L692">only situation</a> in which access to an unmapped memory region, shown in white above, might be valid. Any other access to unmapped memory triggers a page fault that results in a Segmentation Fault. Some mapped areas are read-only, hence write attempts to these areas also lead to segfaults.</p>
<p>Below the stack, we have the memory mapping segment. Here the kernel maps contents of files directly to memory. Any application can ask for such a mapping via the Linux <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mmap.2.html">mmap()</a> system call (<a href="http://lxr.linux.no/linux+v2.6.28.1/arch/x86/kernel/sys_i386_32.c#L27">implementation</a>) or <a href="http://msdn.microsoft.com/en-us/library/aa366537(VS.85).aspx">CreateFileMapping()</a> / <a href="http://msdn.microsoft.com/en-us/library/aa366761(VS.85).aspx">MapViewOfFile()</a> in Windows. Memory mapping is a convenient and high-performance way to do file I/O, so it is used for loading dynamic libraries. It is also possible to create an <strong>anonymous memory mapping</strong> that does not correspond to any files, being used instead for program data. In Linux, if you request a large block of memory via <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/malloc.3.html">malloc()</a>, the C library will create such an anonymous mapping instead of using heap memory. &#8216;Large&#8217; means larger than <tt>MMAP_THRESHOLD</tt> bytes, 128 kB by default and adjustable via <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/undocumented.3.html">mallopt()</a>.</p>
<p>Speaking of the heap, it comes next in our plunge into address space. The heap provides runtime memory allocation, like the stack, meant for data that must outlive the function doing the allocation, unlike the stack. Most languages provide heap management to programs. Satisfying memory requests is thus a joint affair between the language runtime and the kernel. In C, the interface to heap allocation is <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/malloc.3.html">malloc()</a> and friends, whereas in a garbage-collected language like C# the interface is the <tt>new</tt> keyword.</p>
<p>If there is enough space in the heap to satisfy a memory request, it can be handled by the language runtime without kernel involvement. Otherwise the heap is enlarged via the <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/brk.2.html">brk()</a> system call (<a href="http://lxr.linux.no/linux+v2.6.28.1/mm/mmap.c#L248">implementation</a>) to make room for the requested block. Heap management is <a href="http://g.oswego.edu/dl/html/malloc.html">complex</a>, requiring sophisticated algorithms that strive for speed and efficient memory usage in the face of our programs&#8217; chaotic allocation patterns. The time needed to service a heap request can vary substantially. Real-time systems have <a href="http://rtportal.upv.es/rtmalloc/">special-purpose allocators</a> to deal with this problem. Heaps also become <em>fragmented</em>, shown below:</p>
<p align="center"><img src="http://static.duartes.org/img/blogPosts/fragmentedHeap.png" alt="Fragmented Heap"/></p>
<p>Finally, we get to the lowest segments of memory: BSS, data, and program text. Both BSS and data store contents for static (global) variables in C. The difference is that BSS stores the contents of <em>uninitialized</em> static variables, whose values are not set by the programmer in source code. The BSS memory area is anonymous: it does not map any file. If you say <tt>static int cntActiveUsers</tt>, the contents of <tt>cntActiveUsers</tt> live in the BSS.</p>
<p>The data segment, on the other hand, holds the contents for static variables initialized in source code. This memory area <strong>is not anonymous</strong>. It maps the part of the program&#8217;s binary image that contains the initial static values given in source code. So if you say <tt>static int cntWorkerBees = 10</tt>, the contents of cntWorkerBees live in the data segment and start out as 10. Even though the data segment maps a file, it is a <strong>private memory mapping</strong>, which means that updates to memory are not reflected in the underlying file. This must be the case, otherwise assignments to global variables would change your on-disk binary image. Inconceivable!</p>
<p>The data example in the diagram is trickier because it uses a pointer. In that case, the <em>contents</em> of pointer <tt>gonzo</tt> &#8211; a 4-byte memory address &#8211; live in the data segment. The actual string it points to does not, however. The string lives in the <strong>text</strong> segment, which is read-only and stores all of your code in addition to tidbits like string literals. The text segment also maps your binary file in memory, but writes to this area earn your program a Segmentation Fault. This helps prevent pointer bugs, though not as effectively as avoiding C in the first place. Here&#8217;s a diagram showing these segments and our example variables:</p>
<p align="center"><img src="http://static.duartes.org/img/blogPosts/mappingBinaryImage.png" alt="ELF Binary Image Mapped Into Memory"/></p>
<p>You can examine the memory areas in a Linux process by reading the file <tt>/proc/pid_of_process/maps</tt>. Keep in mind that a segment may contain many areas. For example, each memory mapped file normally has its own area in the mmap segment, and dynamic libraries have extra areas similar to BSS and data. The next post will clarify what &#8216;area&#8217; really means. Also, sometimes people say &#8220;data segment&#8221; meaning all of data + bss + heap.</p>
<p>You can examine binary images using the <a href="http://manpages.ubuntu.com/manpages/intrepid/en/man1/nm.1.html">nm</a> and <a href="http://manpages.ubuntu.com/manpages/intrepid/en/man1/objdump.1.html">objdump</a> commands to display symbols, their addresses, segments, and so on. Finally, the virtual address layout described above is the &#8220;flexible&#8221; layout in Linux, which has been the default for a few years. It assumes that we have a value for <tt>RLIMIT_STACK</tt>. When that&#8217;s not the case, Linux reverts back to the &#8220;classic&#8221; layout shown below:</p>
<p align="center"><img src="http://static.duartes.org/img/blogPosts/linuxClassicAddressSpaceLayout.png" alt="Classic Process Address Space Layout In Linux"/></p>
<p>That&#8217;s it for virtual address space layout. The next post discusses how the kernel keeps track of these memory areas. Coming up we&#8217;ll look at memory mapping, how file reading and writing ties into all this and what memory usage figures mean.</p>
<div style="clear:both;"></div>
	 	
		<div class="postmeta">
		
			<div class="postmetaleft">
				<p>January 27, 2009 at 12:34 am | Filed Under <a href="http://duartes.org/gustavo/blog/category/internals" title="View all posts in Internals" rel="category tag">Internals</a>, <a href="http://duartes.org/gustavo/blog/category/linux" title="View all posts in Linux" rel="category tag">Linux</a>, <a href="http://duartes.org/gustavo/blog/category/software-illustrated" title="View all posts in Software Illustrated" rel="category tag">Software Illustrated</a>				<br /><a class="withImage" href="http://feeds.feedburner.com/GustavoDuarte">
					<img src="http://duartes.org/gustavo/blog/wp-content/themes/Cangaco/images/feed16px.png" alt="Feed Icon" /> 
					<span>Subscribe to blog</span>
				</a></p>
			</div>
			
			<div class="postmetaright">
				<a href="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory#comments" title="Comment on Anatomy of a Program in Memory">179 Comments</a>&nbsp;			</div>
			
		</div>
			
		<!--
		<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
		<rdf:Description rdf:about="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory"
    dc:identifier="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory"
    dc:title="Anatomy of a Program in Memory"
    trackback:ping="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/trackback" />
</rdf:RDF>		-->
<!-- end write_post -->
		
		<h1>Comments</h1>
		
<!-- You can start editing here. -->

<div id="commentblock">
	<p id="comments"><b>179 Responses to &#8220;Anatomy of a Program in Memory&#8221;</b></p>

	<ol class="commentlist">

	
		<li class="alt" id="comment-13222">
			JP on
						January 27th, 2009 12:53 am 
			<div class="commenttext">
			<p>Thank you!</p>
<p>Your posts are some of the most informative I&#8217;ve ever found on the internet.</p>
<p>I&#8217;m just researching this subject right now and your timing couldn&#8217;t have been better!</p>
<p>Thanks!</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13224">
			<a href='http://duartes.org/gustavo/blog' rel='external nofollow' class='url'>Gustavo Duarte</a> on
						January 27th, 2009 12:55 am 
			<div class="commenttext">
			<p>@JP: sweet, glad it came at a good time. You&#8217;re welcome!</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13225">
			michele alberti on
						January 27th, 2009 1:13 am 
			<div class="commenttext">
			<p>First of all: great job! Your written are very good!<br />
I have a question. I&#8217;m studying some code and I need documentation on Linux internals, specifically on memory management about processes. Can you suggest me any books or other documentation?</p>
<p>Thanks!</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13227">
			<a href='http://duartes.org/gustavo/blog' rel='external nofollow' class='url'>Gustavo Duarte</a> on
						January 27th, 2009 1:22 am 
			<div class="commenttext">
			<p>@michele: Take a look at the end of <a href="http://duartes.org/gustavo/blog/post/kernel-boot-process" rel="nofollow">this post</a>. It has a list of Linux kernel books.</p>
<p>My favorite book is still &#8220;Understanding the Linux Kernel&#8221; because it explains _everything_ in painstaking detail. It is dry, but the authors put monumental effort into going through everything.</p>
<p>The Intel manuals are free and also excellent.</p>
<p>These books are the best resource I know of. I hope to write more material for this blog and eventually maybe have a short &#8216;Intro to the Linux Kernel&#8217; document online. However this is subject to my work schedule and so on.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13228">
			michele alberti on
						January 27th, 2009 1:32 am 
			<div class="commenttext">
			<p>@Gustavo:</p>
<p>thanks very much.<br />
The project I&#8217;m studying needs to understand/manage memory stuff, like /proc//maps. I&#8217;ll read the doc you suggest me and keep reading your blog <img src='http://duartes.org/gustavo/blog/wp-includes/images/smilies/icon_wink.gif' alt=';)' class='wp-smiley' /> </p>
<p>thanks!</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13243">
			<a href='http://www.frgtn.net' rel='external nofollow' class='url'>frgtn</a> on
						January 27th, 2009 5:01 am 
			<div class="commenttext">
			<p>Thanks for a great post once again. I&#8217;ve been reading your blog for a while now and found a lot of your other posts really informative and easy to read. Big + goes for the diagrams, they help clarify on a lot of points. Keep up the good work!</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13246">
			<a href='http://www.webdigi.co.uk' rel='external nofollow' class='url'>web development</a> on
						January 27th, 2009 6:24 am 
			<div class="commenttext">
			<p>Great article!</p>
<p>Quite shocked to know that windows takes double the kernel memory compared to Linux.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13248">
			<a href='http://www.matusiak.eu/numerodix/blog' rel='external nofollow' class='url'>numerodix</a> on
						January 27th, 2009 6:39 am 
			<div class="commenttext">
			<p>Excellent writeup!</p>
<p>I&#8217;m wondering, though, why does the kernel space consume 1gb? That seems like a lot..</p>
<p>And if you don&#8217;t mind divulging a trade secret, what do you use to draw your diagrams?</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13249">
			Reader1 on
						January 27th, 2009 6:45 am 
			<div class="commenttext">
			<p>Great post. You left some stuff out though. In modern linux/windows OS&#8217;s the heap base is also randomized. And in Linux string literals such as char *blah = &#8220;hello there&#8221;; will be stored in an ELF section called .rodata. Rarely is constant data such as strings held in .text, but it does happen. Good post though, I like the graphics.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13250">
			gatechman on
						January 27th, 2009 6:56 am 
			<div class="commenttext">
			<p>Great Post!</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13252">
			<a href='http://www.greenwaysroad.com/blogs/vasuBlog/index.php/2009/01/27/programming-links/' rel='external nofollow' class='url'>Programming links | GreenwaysRoad Blog</a> on
						January 27th, 2009 7:06 am 
			<div class="commenttext">
			<p>[...] Anatomy of a program in memory [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13254">
			<a href='http://www.joseavillalta.blogspot.com' rel='external nofollow' class='url'>Jose V.</a> on
						January 27th, 2009 7:12 am 
			<div class="commenttext">
			<p>Gustavo:</p>
<p>Excellent article, I&#8217;ve been looking for a post like this for a long time. By the way, this made it to the front page of reddit, so brace for incoming traffic. </p>
<p>J.V.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13255">
			<a href='http://www.eltita.com.ar' rel='external nofollow' class='url'>el_bot</a> on
						January 27th, 2009 8:05 am 
			<div class="commenttext">
			<p>Good post!<br />
Only for completeness, can you include the program&#8217;s parameters? I think they go in the bottom of the stack, but I&#8217;m not sure. In any case, of course, they are put by the kernel when a execXX in called.</p>
<p>Saludos</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13256">
			raja on
						January 27th, 2009 8:20 am 
			<div class="commenttext">
			<p>thank you.<br />
very informative and refreshing.<br />
looking forward to the next post</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13260">
			<a href='http://www.cloudknow.com/2009/01/daily-links-18/' rel='external nofollow' class='url'>Daily Links #18 | CloudKnow</a> on
						January 27th, 2009 9:16 am 
			<div class="commenttext">
			<p>[...] Anatomy of a Program in Memory [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13262">
			<a href='http://softer-copy.blogspot.com' rel='external nofollow' class='url'>Sushant Srivastava</a> on
						January 27th, 2009 9:38 am 
			<div class="commenttext">
			<p>Thank you for this wonderful post.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13263">
			<a href='http://duartes.org/gustavo/blog' rel='external nofollow' class='url'>Gustavo Duarte</a> on
						January 27th, 2009 9:40 am 
			<div class="commenttext">
			<p>Thank you all for the feedback!</p>
<p>@web dev: The kernel is not really using that much memory physical though, it simply has that virtual range available to itself to map whatever physical memory it wishes. Thanks for the question though &#8211; I clarified this in the post.</p>
<p>Both the Linux and Windows kernel are extremely well built. It&#8217;s hard to find areas where one really has an edge, imho. Two outstanding pieces of software.</p>
<p>@numerodix: You know, this &#8216;tightness&#8217; of the address space is a sort of recent phenomenon. When the kernels were designed, 2 or 3GB seemed like a lot <img src='http://duartes.org/gustavo/blog/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' />   So partially it&#8217;s an evolutionary artifact, one that is fixed by 64-bit address spaces.</p>
<p>But also, it is good for performance to give the kernel an ample window into memory. I think the next couple posts should clarify why this is.</p>
<p>@Reader1: thanks for the corrections. I&#8217;ll add the heap randomization to the post. Regarding ELF sections, I thought about them, but I&#8217;m always balancing what to include in these blog posts. I try hard to keep it crisp, covering one area well, but without dumbing anything down. But there&#8217;s so much interconnected stuff, it&#8217;s not always clear where to put the line. I think I&#8217;m going to leave ELF sections out for now though.</p>
<p>@Jose: thanks for the heads up <img src='http://duartes.org/gustavo/blog/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /> </p>
<p>@el_bot: This is one similar to ELF sections above. The tradeoff between conciseness and completeness. I&#8217;m planning a post covering the stack in detail, and talking about buffer overflows, and I think that&#8217;d go in well there.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13265">
			Carlos on
						January 27th, 2009 10:24 am 
			<div class="commenttext">
			<p>Thanks for the post, it is very informative. Can you tell me what software do you use to create graphics?</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13266">
			<a href='http://duartes.org/gustavo/blog' rel='external nofollow' class='url'>Gustavo Duarte</a> on
						January 27th, 2009 10:25 am 
			<div class="commenttext">
			<p>I use Visio 2007 for the diagrams. Cheers.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13267">
			<a href='http://chaitanyagupta.com/' rel='external nofollow' class='url'>Chaitanya Gupta</a> on
						January 27th, 2009 10:33 am 
			<div class="commenttext">
			<p>As everyone has said, great post. I am looking forward to your follow up posts. Thanks.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13269">
			emit on
						January 27th, 2009 11:09 am 
			<div class="commenttext">
			<p>I love your diagrams w/ the subtle gradients. What did you use to create them?</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13270">
			emit on
						January 27th, 2009 11:10 am 
			<div class="commenttext">
			<p>oops I didn&#8217;t see #19 reply. ok so it was visio <img src='http://duartes.org/gustavo/blog/wp-includes/images/smilies/icon_biggrin.gif' alt=':D' class='wp-smiley' /> </p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13272">
			NoName on
						January 27th, 2009 12:25 pm 
			<div class="commenttext">
			<p>This blog includes very interesting articles. Continue your good work and never give up!</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13275">
			<a href='http://tek.org.uk' rel='external nofollow' class='url'>tek</a> on
						January 27th, 2009 2:00 pm 
			<div class="commenttext">
			<p>Excellent and informative post <img src='http://duartes.org/gustavo/blog/wp-includes/images/smilies/icon_smile.gif' alt=':-)' class='wp-smiley' /> </p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13277">
			vs on
						January 27th, 2009 2:42 pm 
			<div class="commenttext">
			<p>I&#8217;ve been reading your posts for a while now, but I just wanted to take a moment to actually write a comment thanking you. These are some really informative posts you write. You should consider writing a book on the &#8220;internals&#8221; of systems level software.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13284">
			David on
						January 27th, 2009 4:35 pm 
			<div class="commenttext">
			<p>Nice post. Very clear. I&#8217;ll keep reading you.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13286">
			<a href='http://dev-interview-questions.blogspot.com' rel='external nofollow' class='url'>dev</a> on
						January 27th, 2009 4:51 pm 
			<div class="commenttext">
			<p>Nice Post. Well written and concise. Looked at your Physical with memory post and its good too.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13291">
			John on
						January 27th, 2009 6:33 pm 
			<div class="commenttext">
			<p>You mentioned, &#8220;Each thread in a process gets its own stack.&#8221;, but I thought  in linux, a thread is really just another process that happens to share certain things with other processes.  Could you clear up my confusion?</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13293">
			<a href='http://www.joselise.com/wp/2009/01/28/links-for-2009-01-27/' rel='external nofollow' class='url'>links for 2009-01-27 at DeStructUred Blog</a> on
						January 27th, 2009 7:05 pm 
			<div class="commenttext">
			<p>[...] Anatomy of a Program in Memory : Gustavo Duarte (tags: windows reading linux programming kernel management memory) [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13301">
			Sesh on
						January 27th, 2009 9:52 pm 
			<div class="commenttext">
			<p>I will try to thank you in a simple way: for a long time doubts about where string literals stay in memory would linger in my mind but so far I was not able to find any easy explanation anywhere. This post makes it clear now. </p>
<p>Thank you very much. Can&#8217;t wait for the next articles in this series.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13302">
			<a href='http://blog.raamdev.com/2009/01/27/gustavo-duarte-on-the-anatomy-of-a-program-in-memory' rel='external nofollow' class='url'>Gustavo Duarte on the Anatomy of a Program in Memory</a> on
						January 27th, 2009 10:13 pm 
			<div class="commenttext">
			<p>[...] his latest post, Anatomy of a Program in Memory, Gustavo Duarte explains beautifully the way in which programs are laid out in memory. He explains [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13303">
			<a href='http://blog.raamdev.com' rel='external nofollow' class='url'>Raam Dev</a> on
						January 27th, 2009 10:19 pm 
			<div class="commenttext">
			<p>I just finished an Introduction to C Programming class and this beautifully written post is a godsend for helping me further my understanding of memory management. </p>
<p>Thank you so much!</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13309">
			<a href='http://duartes.org/gustavo/blog' rel='external nofollow' class='url'>Gustavo Duarte</a> on
						January 28th, 2009 12:20 am 
			<div class="commenttext">
			<p>First off, thank you all for the feedback! </p>
<p>It is great to hear that the post helped out a little bit. Contributing to the community is one of the major reasons I write this stuff, though it doesn&#8217;t hurt that it&#8217;s fun.</p>
<p>@vs: the idea of a book does surface in the comment threads from time to time. I see a few issues though: 1) I want to keep the content free, no matter what; 2) the color would be gone in a normal book; 3) the links would be gone. </p>
<p>Lately I&#8217;ve been thinking about maybe collecting all the stuff once there&#8217;s enough, and having an online book of sorts. Then maybe make color prints for a small fee if people wanted hard copies (I wouldn&#8217;t mind making money on these).</p>
<p>I really had no idea where this blog would go, though now it&#8217;s becoming a bit clearer. So yea, I&#8217;m munching on it.</p>
<p>@John: you are correct. Basically the set of threads in a thread group share all the memory regions except for the stack and thread-local-storage. Within the kernel, threads are represented with the same data structure used for processes, task_struct, so again you are correct.</p>
<p>Does this help clear it up? I could dig up the relevant links to kernel code if you&#8217;d like to see the stuff in action. Let me know.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13313">
			<a href='http://oviron.wordpress.com/2009/01/28/links-for-2009-01-28/' rel='external nofollow' class='url'>links for 2009-01-28 &laquo; boblog</a> on
						January 28th, 2009 3:03 am 
			<div class="commenttext">
			<p>[...] Anatomy of a Program in Memory Memory management is the heart of operating systems; it is crucial for both programming and system administration. In the next few posts I’ll cover memory with an eye towards practical aspects, but without shying away from internals. While the concepts are generic, examples are mostly from Linux and Windows on 32-bit x86. This first post describes how programs are laid out in memory. (tags: windows reference programming hardware) [...]</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13322">
			kgas on
						January 28th, 2009 7:11 am 
			<div class="commenttext">
			<p>Right away I am book marking your site for further reading. Nice articles. This will be much helpful to newbie and those who wants to learn about computers and students. Keep it up!</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13323">
			John on
						January 28th, 2009 7:27 am 
			<div class="commenttext">
			<p>@Gustavo, thank you so much.  All is clear.  I used to have a book on the linux kernel where the code was also annotated,  but I unfortunately just don&#8217;t have the time, so your excellent posts and articles are greatly appreciated!</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13324">
			<a href='http://localhost.localdomain.cl' rel='external nofollow' class='url'>Ulver</a> on
						January 28th, 2009 7:30 am 
			<div class="commenttext">
			<p>Interesting arcticle, Very didactly and with figures!! xD &#8230; well being a litle bit serious, i think that is very clear and simply to explain the concepts, follow in this way !</p>
<p>pd: for more linux kernel understading, in &#8220;viewly&#8221; way it will be use kernel profiling, aka &#8220;/proc/profile &amp; kerneltop &#8221; very useful to see internal functions and the corresponding behavior of that.</p>
<p>cheers !</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13326">
			<a href='http://chanux.wordpress.com/' rel='external nofollow' class='url'>Chanux</a> on
						January 28th, 2009 7:54 am 
			<div class="commenttext">
			<p>Great post. I want learn the art of writing great articles like this. I was looking for a point to get in to kernel level stuff. There won&#8217;t be any better source than this.</p>
<p>Subscribed to RSS. ( Looking for Twitter <img src='http://duartes.org/gustavo/blog/wp-includes/images/smilies/icon_biggrin.gif' alt=':D' class='wp-smiley' />  )</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13333">
			<a href='http://fabiensanglard.net' rel='external nofollow' class='url'>Fab</a> on
						January 28th, 2009 9:39 am 
			<div class="commenttext">
			<p>Great article !</p>
<p>Drawing are neat ! What soft do you use for them ?</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13345">
			<a href='http://bjf-codebrown.blogspot.com' rel='external nofollow' class='url'>Ben Fowler</a> on
						January 28th, 2009 3:39 pm 
			<div class="commenttext">
			<p>Once again, great article!  I think this blog is one of the best website I&#8217;ve seen on introductory OS internals I&#8217;ve seen yet.  Anything beyond that, I need to start reading my copy of Hennessey and Patterson <img src='http://duartes.org/gustavo/blog/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /> </p>
<p>I thought I&#8217;d spotted a typo in one of the diagrams, but no &#8212; it turns out you&#8217;ve really shown attention to detail in these articles.  Nice work.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13351">
			<a href='http://duartes.org/gustavo/blog/post/quick-note-on-diagrams-and-the-blog' rel='external nofollow' class='url'>Quick Note on Diagrams and the Blog : Gustavo Duarte</a> on
						January 28th, 2009 6:25 pm 
			<div class="commenttext">
			<p>[...] colors hold from the earliest post about memory to the latest. This convention is why the post about Intel CPU caches shows a blue index for the virtually [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13378">
			<a href='http://www.twitter.com/gsempe' rel='external nofollow' class='url'>gsempe</a> on
						January 29th, 2009 6:13 am 
			<div class="commenttext">
			<p>Very clear, informative, nice post.<br />
Good job.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13405">
			JP on
						January 29th, 2009 7:49 pm 
			<div class="commenttext">
			<p>If you decide to do a small online book with such great content on all aspects of OS management, I will gladly buy it!</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13453">
			ken on
						January 30th, 2009 7:46 pm 
			<div class="commenttext">
			<p>wow thats informative,got lost a bit into it but have bookmarked to come back to.good work</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13548">
			vlad on
						February 1st, 2009 9:52 pm 
			<div class="commenttext">
			<p>Great article &#8211; Thanks for the effort of keeping things simple and informative!</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13549">
			satmeet on
						February 1st, 2009 10:17 pm 
			<div class="commenttext">
			<p>BOOKMARKED..!!<br />
awaiting your next posts&#8230;!!<br />
Thanks&#8230;</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13563">
			IvanM on
						February 2nd, 2009 2:46 am 
			<div class="commenttext">
			<p>Very clear explanation of memories either phyisical or virtual<br />
Thanky you again!</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13574">
			Prabhu on
						February 2nd, 2009 6:03 am 
			<div class="commenttext">
			<p>Hi Gustavo,</p>
<p>The explanation was very clear and informative. Thanks.<br />
One rquest. If you could explain in the same lucid way how a program wriiten in high level language , say C, gets compiled , what are symbols, how shared files gets linked , how addresses are determined when loaded into memor and such nitty gritty details, it would be great!</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13582">
			<a href='http://duartes.org/gustavo/blog' rel='external nofollow' class='url'>Gustavo Duarte</a> on
						February 2nd, 2009 8:40 am 
			<div class="commenttext">
			<p>Thank you all for the feedback.</p>
<p>@Prabhu: that&#8217;s a great topic. There&#8217;s a good book about this called <a href="http://www.amazon.com/Linkers-Kaufmann-Software-Engineering-Programming/dp/1558604960/" rel="nofollow">Linkers and Loaders</a>. It&#8217;s from 2000, not sure how much has changed since. I&#8217;m going to add this to my write queue, though I have no idea when the post would actually come out <img src='http://duartes.org/gustavo/blog/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /> </p>
			</div>

		</li>

	
	
		<li class="" id="comment-13632">
			bekars on
						February 3rd, 2009 12:29 am 
			<div class="commenttext">
			<p>Great works, Thank you</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13702">
			<a href='http://duartes.org/gustavo/blog/post/how-the-kernel-manages-your-memory' rel='external nofollow' class='url'>How The Kernel Manages Your Memory : Gustavo Duarte</a> on
						February 3rd, 2009 11:36 pm 
			<div class="commenttext">
			<p>[...] examining the virtual address layout of a process, we turn to the kernel and its mechanisms for managing user memory. Here is gonzo [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13706">
			Asmita on
						February 4th, 2009 12:31 am 
			<div class="commenttext">
			<p>It&#8217;s a great post &#8230; Very helpfull. I&#8217;m really waiting for the next one as I&#8217;m not too clear for Heap system. Keep writing. Thanks a lot for sharing these helpfull contents.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13745">
			<a href='http://nobugleftbehind.com/software-quality-digest-2009-02-04/' rel='external nofollow' class='url'>Software Quality Digest &ndash; 2009-02-04 | No bug left behind</a> on
						February 4th, 2009 12:49 pm 
			<div class="commenttext">
			<p>[...] Anatomy of a Program in Memory – In-depth article by Gustavo Duarte about how a program is represented in memory [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13794">
			Nix on
						February 5th, 2009 7:01 am 
			<div class="commenttext">
			<p>Another excellent series on linkers is Ian Lance Taylor&#8217;s 20-article series starting near the bottom of  and proceeding onwards for several pages.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13795">
			Nix on
						February 5th, 2009 7:01 am 
			<div class="commenttext">
			<p>Oh, curses. Fixed <a href="http://www.airs.com/blog/archives/category/programming/page/14/" rel="nofollow">link</a> to the linkers series start&#8230;</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13800">
			<a href='http://duartes.org/gustavo/blog' rel='external nofollow' class='url'>Gustavo Duarte</a> on
						February 5th, 2009 9:25 am 
			<div class="commenttext">
			<p>@Nix: great link, thanks!</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13813">
			<a href='http://www.pwnage.ro/2009/02/05/how-the-kernel-manages-your-memory/' rel='external nofollow' class='url'>How The Kernel Manages Your Memory | www.pwnage.ro</a> on
						February 5th, 2009 12:46 pm 
			<div class="commenttext">
			<p>[...] Anatomy of a Program in Memory VN:F [1.0.9_379]please wait&#8230;Rating: 0.0/10 (0 votes cast) [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-13902">
			Raminder on
						February 7th, 2009 10:47 am 
			<div class="commenttext">
			<p>Hi Gustavo, thank you for all your excellent articles.<br />
I have a question, two actually. As you&#8217;ve said each thread has its own stack area. How are these stack areas located with respect to each other? e.g if there are two threads in a process T1 &amp; T2 where would their stacks start and end in the memory. The second question is similar. Does each thread has two stacks &#8211; one for user mode and one for kernel mode?</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-13985">
			macosx on
						February 8th, 2009 10:34 pm 
			<div class="commenttext">
			<p>Great jobs.keep going on and publishing more articles</p>
			</div>

		</li>

	
	
		<li class="" id="comment-14066">
			<a href='http://duartes.org/gustavo/blog' rel='external nofollow' class='url'>Gustavo Duarte</a> on
						February 10th, 2009 12:54 am 
			<div class="commenttext">
			<p>@Raminder: you&#8217;re welcome! Sorry for the delay in an answer here, but I&#8217;ve been swamped with work these past few days. Can you drop me an email so that I can let you know when I&#8217;ve replied here?</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-14238">
			<a href='http://duartes.org/gustavo/blog' rel='external nofollow' class='url'>Gustavo Duarte</a> on
						February 13th, 2009 12:21 am 
			<div class="commenttext">
			<p>@Raminder: Sorry for the delay, I&#8217;ve been working a bit lately. Per our email, I&#8217;ll talk about Windows only.</p>
<p>I don&#8217;t know where in the virtual space the thread stacks go. I googled briefly but didn&#8217;t see an answer, so I think the easiest thing to do is to write a short test program to spawn a few threads calling a function that prints the address of a local variable. If you do a loop of 10 or so the pattern should become clear. I found two relevant posts;</p>
<p><a href="http://blogs.msdn.com/oldnewthing/archive/2005/07/29/444912.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2005/07/29/444912.aspx</a><br />
<a href="http://software.intel.com/en-us/articles/adjusting-thread-stack-address-to-improve-performance-on-intel-xeonr-processors/" rel="nofollow">http://software.intel.com/en-us/articles/adjusting-thread-stack-address-to-improve-performance-on-intel-xeonr-processors/</a></p>
<p>Regarding the second question, YES, threads have two stacks: a large one for user mode (1MB by default it looks like) and a tiny one for kernel mode (just a few kilobytes, 12k for x86). The kernel stack is kept in kernel-mode data structures and can&#8217;t be touched from user mode.</p>
<p>Hope this helps.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-14495">
			Jakcy on
						February 17th, 2009 11:36 pm 
			<div class="commenttext">
			<p>I am from China. Although my English is not so good, but I like your articles. I am ready to reading all your articles on your blog.<br />
Greate Job And Execllent Articles~~~</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-14563">
			<a href='http://jiang.eu.org/blog/?p=312' rel='external nofollow' class='url'>Ya-tou &amp; me &raquo; Blog Archive &raquo; How The Kernel Manages Your Memory</a> on
						February 19th, 2009 1:43 am 
			<div class="commenttext">
			<p>[...] examining the virtual address layout of a process, we turn to the kernel and its mechanisms for managing user memory. Here is gonzo [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-14939">
			<a href='http://mbpfernand0.wordpress.com/2009/02/26/la-anatomia-de-un-programa-en-memoria/' rel='external nofollow' class='url'>La anatomía de un programa en memoria &laquo; Mbpfernand0&#8217;s Blog</a> on
						February 26th, 2009 9:38 am 
			<div class="commenttext">
			<p>[...] todo caso, interesante documento en Anatomy of a Program in Memory que describe la gestión de memoria alrededor de un [...]</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-15539">
			Alex on
						March 8th, 2009 6:36 pm 
			<div class="commenttext">
			<p>Great post. Congratulations! Some questions, so what I understood is that a process can not &#8220;use&#8221; more than 3gb in a default running linux system, since 1gb is reserved for the kernel, is this true or not? I remember that I&#8217;ve seen processes that are using more than 3gbm as far as top is concerned, but I could be wrong (32bit system). Also for example, for top, why isn&#8217;t the 1gb, reserved for the kernel, added in the VIRT space?</p>
			</div>

		</li>

	
	
		<li class="" id="comment-15893">
			<a href='http://justinblanton.com/2009/03/anatomy-program-memory' rel='external nofollow' class='url'>Justin Blanton | Anatomy of a program in memory</a> on
						March 12th, 2009 10:41 pm 
			<div class="commenttext">
			<p>[...] Anatomy of a program in memory. [...]</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-16335">
			birumut on
						March 18th, 2009 11:13 am 
			<div class="commenttext">
			<p>thank you very much, in fact it is very useful for me&#8230;</p>
			</div>

		</li>

	
	
		<li class="" id="comment-16500">
			Nagareddy on
						March 20th, 2009 12:59 pm 
			<div class="commenttext">
			<p>Very useful and comprehensiv , to point.. </p>
<p>How do you know windows size limits?</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-16807">
			<a href='http://duartes.org/gustavo/blog' rel='external nofollow' class='url'>Gustavo Duarte</a> on
						March 23rd, 2009 6:40 pm 
			<div class="commenttext">
			<p>@Nagareddy: which size limits? But regardless of which limits, they probably are either from the Windows Internals book, Windows header files, or Intel literature <img src='http://duartes.org/gustavo/blog/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /> </p>
			</div>

		</li>

	
	
		<li class="" id="comment-16814">
			<a href='http://duartes.org/gustavo/blog' rel='external nofollow' class='url'>Gustavo Duarte</a> on
						March 23rd, 2009 6:53 pm 
			<div class="commenttext">
			<p>@Alex,</p>
<p>Thanks! That&#8217;s right, a process can&#8217;t use more than 3GB of RAM. That&#8217;s why for example the memcached folks tell you to run multiple instances when your box has more than 3GB running in 32-bit mode with PAE. Regarding the numbers in top, that would be interesting to see. It could be a quirk with the numbers themselves, or it could be that there&#8217;s some exception going on &#8211; but in general your understanding is correct &#8211; processes can&#8217;t use more than 3GB.</p>
<p>Regarding the 1GB not being shown in VIRT, it&#8217;s because the kernel accounting ignores the kernel space. It&#8217;s just a design issue &#8211; why worry about it since it&#8217;s there for every process? People would be shocked to see /bin/ls running with 1GB of virt space <img src='http://duartes.org/gustavo/blog/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /> </p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-20822">
			maverick on
						April 29th, 2009 12:03 am 
			<div class="commenttext">
			<p>great post.. keep up the good work.. have a doubt regarding the memory mapped area for shared libraries..it starts 0&#215;40000000. Does it grow upwards or downwards ? I remember it grows upwards. In your both figures, its drawn differently.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-21042">
			Narayanan on
						April 30th, 2009 3:27 am 
			<div class="commenttext">
			<p>Hi ,</p>
<p>I ve doubt regarding malloc allocting memory. How does malloc stores information about the size of the pointer as free uses only pointer variable as argument and not the size. can u explain which part of address space it is stored..?</p>
<p>Thanks in advance&#8230;</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-21076">
			<a href='http://greatdocuments.net' rel='external nofollow' class='url'>Keith Johnson</a> on
						April 30th, 2009 9:14 am 
			<div class="commenttext">
			<p>Awesome post! Indeed, memory management cannot be overlooked.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-21559">
			<a href='http://duartes.org/gustavo/blog' rel='external nofollow' class='url'>Gustavo Duarte</a> on
						May 3rd, 2009 9:44 pm 
			<div class="commenttext">
			<p>@maverick: in x86 Linux it grows as shown in the diagrams, but this varies by CPU architecture and kernel.</p>
<p>@Narayanan: Malloc does its own house keeping to know how much was allocated to each pointer. The best place to check this out is reading the libc source code for malloc and free.</p>
<p>@Keith: thanks!</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-22635">
			<a href='http://motherboards.lastdepot.com/?p=9' rel='external nofollow' class='url'>Quick Note on Diagrams and the Blog &laquo; My Site!</a> on
						May 14th, 2009 4:41 pm 
			<div class="commenttext">
			<p>[...] colors hold from the earliest post about memory to the latest. This convention is why the post about Intel CPU caches shows a blue index for the virtually [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-25408">
			<a href='http://www.protocolostomy.com' rel='external nofollow' class='url'>Brian</a> on
						June 4th, 2009 8:26 am 
			<div class="commenttext">
			<p>Thanks for this post Gustavo. I have a question, though. </p>
<p>I&#8217;m mainly a sysadmin, not a low-level developer, but I need to understand this stuff for low-level debugging at the system level. Near the top of this post, you mention &#8220;ring 2 or lower&#8221; as if we should all just know what that even means, and I&#8217;m sorry to say that I do not. Could you point me to a doc that&#8217;ll explain that, or could you expand on what this notion of &#8220;rings&#8221; relates to? </p>
<p>Thanks &#8212; all of your posts are top notch.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-25792">
			<a href='http://duartes.org/gustavo/blog' rel='external nofollow' class='url'>Gustavo Duarte</a> on
						June 8th, 2009 9:33 am 
			<div class="commenttext">
			<p>Hi Brian,</p>
<p>Here you go: <a href="http://duartes.org/gustavo/blog/post/cpu-rings-privilege-and-protection" rel="nofollow">http://duartes.org/gustavo/blog/post/cpu-rings-privilege-and-protection</a></p>
<p>cheers</p>
			</div>

		</li>

	
	
		<li class="" id="comment-26520">
			Peter on
						June 15th, 2009 2:24 pm 
			<div class="commenttext">
			<p>Dear Gustavo,</p>
<p>Could you send the list of references you use to write Linux internals stuff ?</p>
<p>If you already posted it, please, let me know the url of them.</p>
<p>Best,</p>
<p>Peter.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-29216">
			EW on
						July 2nd, 2009 11:38 am 
			<div class="commenttext">
			<p>Very good article.  Thanks!</p>
			</div>

		</li>

	
	
		<li class="" id="comment-31644">
			ks on
						July 13th, 2009 9:06 am 
			<div class="commenttext">
			<p>Thanks for the great article thats so simple and crisp.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-33038">
			wei on
						July 22nd, 2009 11:17 pm 
			<div class="commenttext">
			<p>Great post! Solve tons of doubts of mine.<br />
Though I still have a few questions hope you can clarify for me.<br />
If I understand them right:<br />
1)The kernel stuff of kernel space (1GB) is in the physical memory (1GB) all the time, unless a user process is trying to access the physical memory mapped to kernel space. If that is the case, swapping will happen. Right?</p>
<p>2)So if I only have enough physical memory for kernel mapping, all my user processes will need to use the memory mapped to kernel. So I will have a lot swapping going on. Right?</p>
<p>3)Why 1GB? Is it based on the size of resident processes and other necessary structures? Or is it hardware related?</p>
<p>Thanks in advance!</p>
			</div>

		</li>

	
	
		<li class="" id="comment-33411">
			Abhijith on
						July 25th, 2009 11:21 am 
			<div class="commenttext">
			<p>Superbly explained. Love the diagrams. Great work!</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-34839">
			<a href='http://www.homepcofva.com' rel='external nofollow' class='url'>Dean</a> on
						August 4th, 2009 8:03 pm 
			<div class="commenttext">
			<p>AWESOME articles, extremely helpful!  MANY THANKS for all your postings!  Keep them coming&#8230;I have you book-marked! As a professional technician, I admire your efforts!</p>
			</div>

		</li>

	
	
		<li class="" id="comment-37413">
			KS on
						August 23rd, 2009 3:55 pm 
			<div class="commenttext">
			<p>This is excellent, probably the best technical documentation I&#8217;ve ever found on a blog. Thank you!</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-40081">
			yodacallmesome on
						September 14th, 2009 2:56 am 
			<div class="commenttext">
			<p>Nice article. It should be noted that there is a special case: When clone(2) is used instead of fork(2) to create a process, the address mappings are replicated (stack excepted).</p>
			</div>

		</li>

	
	
		<li class="" id="comment-41221">
			Godmar Back on
						September 23rd, 2009 2:22 pm 
			<div class="commenttext">
			<p>It&#8217;s not clear which kernel/libc version above information applies to.</p>
<p>For instance, on CentOS 5.3 running a 2.6.18 kernel with Redhat&#8217;s patches 2.6.18-128.7.1.el5PAE and GNU libc 2.5, some shared libraries are located beneath the code segment &#8211; which contradicts the figure shown above.</p>
<p>&gt; tac /proc/21779/maps<br />
bfeba000-bff0f000 rw-p bffaa000 00:00 0          [stack]<br />
b7f98000-b7f9f000 r&#8211;s 00000000 fd:00 36079468   /usr/lib/gconv/gconv-modules.cache<br />
b7f93000-b7f95000 rw-p b7f93000 00:00 0<br />
b7d93000-b7f93000 r&#8211;p 00000000 fd:00 36001563   /usr/lib/locale/locale-archive<br />
08ae9000-08b4c000 rw-p 08ae9000 00:00 0          [heap]<br />
0809c000-080f9000 rw-p 0809c000 00:00 0<br />
08098000-0809c000 rw-p 00050000 fd:00 90800216   /bin/tcsh<br />
08047000-08098000 r-xp 00000000 fd:00 90800216   /bin/tcsh<br />
02b4d000-02b4e000 rwxp 00002000 fd:00 95783275   /lib/libtermcap.so.2.0.8<br />
02b4a000-02b4d000 r-xp 00000000 fd:00 95783275   /lib/libtermcap.so.2.0.8<br />
028ac000-028d3000 rwxp 028ac000 00:00 0<br />
028ab000-028ac000 rwxp 00009000 fd:00 95783323   /lib/libcrypt-2.5.so<br />
028aa000-028ab000 r-xp 00008000 fd:00 95783323   /lib/libcrypt-2.5.so<br />
028a1000-028aa000 r-xp 00000000 fd:00 95783323   /lib/libcrypt-2.5.so<br />
0090a000-0090b000 rwxp 00009000 fd:00 95780903   /lib/libnss_files-2.5.so<br />
00909000-0090a000 r-xp 00008000 fd:00 95780903   /lib/libnss_files-2.5.so<br />
00900000-00909000 r-xp 00000000 fd:00 95780903   /lib/libnss_files-2.5.so<br />
008da000-008dc000 rwxp 008da000 00:00 0<br />
008d9000-008da000 rwxp 0000f000 fd:00 95783322   /lib/libresolv-2.5.so<br />
008d8000-008d9000 r-xp 0000e000 fd:00 95783322   /lib/libresolv-2.5.so<br />
008c9000-008d8000 r-xp 00000000 fd:00 95783322   /lib/libresolv-2.5.so<br />
006d4000-006d7000 rwxp 006d4000 00:00 0<br />
006d3000-006d4000 rwxp 00140000 fd:00 95781738   /lib/libc-2.5.so<br />
006d1000-006d3000 r-xp 0013e000 fd:00 95781738   /lib/libc-2.5.so<br />
00593000-006d1000 r-xp 00000000 fd:00 95781738   /lib/libc-2.5.so<br />
00480000-00481000 rwxp 0001a000 fd:00 95780954   /lib/ld-2.5.so<br />
0047f000-00480000 r-xp 00019000 fd:00 95780954   /lib/ld-2.5.so<br />
00465000-0047f000 r-xp 00000000 fd:00 95780954   /lib/ld-2.5.so<br />
00451000-00452000 r-xp 00451000 00:00 0          [vdso]<br />
00115000-00116000 rwxp 00004000 fd:00 95780901   /lib/libnss_dns-2.5.so<br />
00114000-00115000 r-xp 00003000 fd:00 95780901   /lib/libnss_dns-2.5.so<br />
00110000-00114000 r-xp 00000000 fd:00 95780901   /lib/libnss_dns-2.5.so</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-41444">
			<a href='http://personalwebguide.com/' rel='external nofollow' class='url'>Travis</a> on
						September 25th, 2009 7:57 am 
			<div class="commenttext">
			<p>Thanks for the info&#8230; I was looking for a graph like that.  Studying kernel and memory functions in class at the moment, so it&#8217;s helpful to have a visual.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-43482">
			Vikram Gupta on
						October 9th, 2009 5:38 am 
			<div class="commenttext">
			<p>Good work <img src='http://duartes.org/gustavo/blog/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /> </p>
<p>very well explained.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-44127">
			Mukesh Chauhan on
						October 14th, 2009 4:49 am 
			<div class="commenttext">
			<p>The article explains the memory layout for 32-bit architecture. How it will be different in 64-bit architecture? Please give brief explaination or provide any link for the same.</p>
<p>Thanks,<br />
-Mukesh Chauhan</p>
			</div>

		</li>

	
	
		<li class="" id="comment-49198">
			Gaurab on
						November 21st, 2009 11:42 am 
			<div class="commenttext">
			<p>Useful post.</p>
<p>How do you explain this segment:</p>
<p>08049000-0804a000 r&#8211;p 00000000 08:05 276412    /home/Linux/MemoryMgmt/printMem</p>
<p>where the permission on this segment is read-only and printMem is the c code ? Text are read-execute right ? So, only read perm ?</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-51538">
			<a href='http://www.kevinrodrigues.com' rel='external nofollow' class='url'>Kevin Rodrigues</a> on
						December 8th, 2009 2:34 am 
			<div class="commenttext">
			<p>I just happened to view your post when I was searching for the structure of a c program in memory. You have provided a lot of information which is quite rare on the Internet. Thanks!</p>
			</div>

		</li>

	
	
		<li class="" id="comment-53472">
			Amit Pande on
						December 22nd, 2009 1:47 am 
			<div class="commenttext">
			<p>Great article&#8230;no other links I googled explains fundamentals better than this ! Not sure how come Google did not rank it higher <img src='http://duartes.org/gustavo/blog/wp-includes/images/smilies/icon_wink.gif' alt=';-)' class='wp-smiley' /> </p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-54006">
			<a href='http://www.duetsch.info/funktionsweise-eines-betriebssystems.html' rel='external nofollow' class='url'>Funktionsweise eines Betriebssystems | duetsch.info - GNU/Linux, Open Source, Softwareentwicklung, Methodik und Vim.</a> on
						December 28th, 2009 6:20 am 
			<div class="commenttext">
			<p>[...] Anatomy of a Program in Memory [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-54247">
			kreena on
						December 30th, 2009 1:25 am 
			<div class="commenttext">
			<p>Hi </p>
<p>This is very nice blog I ever came across !!!<br />
The contents are very clear and written in very simple terms. </p>
<p>I want to ask you, how can I change the address space layout from &#8216;classic&#8217; to flexible layout</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-55258">
			divkis on
						January 4th, 2010 11:18 pm 
			<div class="commenttext">
			<p>Hi, great post overall but I don&#8217;t see the addresses of all segments shown by examining the maps i.e /proc/pid/maps. I see the stack, heap and mapped .so&#8217;s but not the other segments. The maps for my firefox is shown below. Mine is a debian system with 2.6.32.2 SMP kernel.</p>
<p>Is there any other way to see the complete layout of a process in memory?</p>
<p>08048000-0804f000 r-xp 00000000 08:01 1893676    /usr/lib/xulrunner-1.9/xulrunner-stub<br />
0804f000-08050000 rw-p 00006000 08:01 1893676    /usr/lib/xulrunner-1.9/xulrunner-stub<br />
0810c000-0c599000 rw-p 00000000 00:00 0          [heap]<br />
ad6ff000-ad700000 &#8212;p 00000000 00:00 0<br />
ad700000-adf00000 rw-p 00000000 00:00 0<br />
adf00000-ae000000 rw-p 00000000 00:00 0<br />
ae84a000-ae84b000 &#8212;p 00000000 00:00 0<br />
ae84b000-af04b000 rw-p 00000000 00:00 0<br />
af2dc000-af6f0000 rw-p 00000000 00:00 0<br />
af84c000-af863000 r-xp 00000000 08:01 2949172    /lib/libselinux.so.1<br />
af863000-af865000 rw-p 00016000 08:01 2949172    /lib/libselinux.so.1<br />
af865000-af874000 r-xp 00000000 08:01 2949251    /lib/libbz2.so.1.0.4<br />
af874000-af875000 rw-p 0000f000 08:01 2949251    /lib/libbz2.so.1.0.4<br />
af875000-af8d6000 r-xp 00000000 08:01 1749980    /usr/lib/libgio-2.0.so.0.0.0<br />
af8d6000-af8d8000 rw-p 00060000 08:01 1749980    /usr/lib/libgio-2.0.so.0.0.0<br />
af8d8000-af909000 r-xp 00000000 08:01 5038179    /usr/lib/libcroco-0.6.so.3.0.1<br />
af909000-af90c000 rw-p 00030000 08:01 5038179    /usr/lib/libcroco-0.6.so.3.0.1<br />
af90c000-af93d000 r-xp 00000000 08:01 5038181    /usr/lib/libgsf-1.so.114.0.8<br />
af93d000-af940000 rw-p 00030000 08:01 5038181    /usr/lib/libgsf-1.so.114.0.8<br />
af940000-af941000 rw-p 00000000 00:00 0<br />
af941000-af971000 r-xp 00000000 08:01 1751442    /usr/lib/librsvg-2.so.2.22.2<br />
af971000-af972000 rw-p 00030000 08:01 1751442    /usr/lib/librsvg-2.so.2.22.2<br />
af985000-af994000 r&#8211;p 00000000 08:01 1952770    /usr/share/icons/Gorilla/icon-theme.cache<br />
af994000-afa16000 rw-p 00000000 00:00 0<br />
afa16000-afa61000 r&#8211;p 00000000 08:01 1787608    /usr/share/fonts/truetype/ttf-dejavu/DejaVuSerif.ttf<br />
afa61000-afa62000 &#8212;p 00000000 00:00 0<br />
afa62000-b0262000 rw-p 00000000 00:00 0<br />
b0262000-b0263000 &#8212;p 00000000 00:00 0<br />
b0263000-b0a63000 rw-p 00000000 00:00 0<br />
b0a63000-b0aaa000 r-xp 00000000 08:01 1843812    /usr/lib/nss/libnssckbi.so<br />
b0aaa000-b0ab6000 rw-p 00046000 08:01 1843812    /usr/lib/nss/libnssckbi.so<br />
b0ab6000-b0af6000 r-xp 00000000 08:01 1843809    /usr/lib/nss/libfreebl3.so<br />
b0af6000-b0af7000 rw-p 0003f000 08:01 1843809    /usr/lib/nss/libfreebl3.so<br />
b0af7000-b0afb000 rw-p 00000000 00:00 0<br />
b0aff000-b0b00000 &#8212;p 00000000 00:00 0<br />
b0b00000-b1300000 rw-p 00000000 00:00 0<br />
b1300000-b13fe000 rw-p 00000000 00:00 0<br />
b13fe000-b1400000 &#8212;p 00000000 00:00 0<br />
b1400000-b149c000 rw-p 00000000 00:00 0<br />
b149c000-b1500000 &#8212;p 00000000 00:00 0<br />
b1500000-b1700000 rw-p 00000000 00:00 0<br />
b1700000-b1900000 rw-p 00000000 00:00 0<br />
b1900000-b1a00000 rw-p 00000000 00:00 0<br />
b1afd000-b1afe000 &#8212;p 00000000 00:00 0<br />
b1afe000-b22fe000 rw-p 00000000 00:00 0<br />
b2300000-b24a6000 rw-p 00000000 00:00 0<br />
b24a6000-b2500000 &#8212;p 00000000 00:00 0<br />
b2500000-b26ff000 rw-p 00000000 00:00 0<br />
b26ff000-b2700000 &#8212;p 00000000 00:00 0<br />
b2700000-b27ff000 rw-p 00000000 00:00 0<br />
b27ff000-b2800000 &#8212;p 00000000 00:00 0<br />
b2800000-b2900000 rw-p 00000000 00:00 0<br />
b2900000-b2a00000 rw-p 00000000 00:00 0<br />
b2a46000-b2a55000 r&#8211;p 00000000 08:01 1952770    /usr/share/icons/Gorilla/icon-theme.cache<br />
b2a55000-b2a59000 r-xp 00000000 08:01 2949170    /lib/libattr.so.1.1.0<br />
b2a59000-b2a5a000 rw-p 00003000 08:01 2949170    /lib/libattr.so.1.1.0<br />
b2a5a000-b2a60000 r-xp 00000000 08:01 2949167    /lib/libacl.so.1.1.0<br />
b2a60000-b2a61000 rw-p 00005000 08:01 2949167    /lib/libacl.so.1.1.0<br />
b2a66000-b2a6c000 r-xp 00000000 08:01 1771346    /usr/lib/gtk-2.0/2.10.0/loaders/libpixbufloader-xpm.so<br />
b2a6c000-b2a6d000 rw-p 00005000 08:01 1771346    /usr/lib/gtk-2.0/2.10.0/loaders/libpixbufloader-xpm.so<br />
b2a6d000-b2a74000 r&#8211;p 00000000 08:01 2294627    /home/divkis01/.icons/gartoon/icon-theme.cache<br />
b2a74000-b2a80000 r-xp 00000000 08:01 1802453    /usr/lib/gnome-vfs-2.0/modules/libfile.so<br />
b2a80000-b2a81000 rw-p 0000b000 08:01 1802453    /usr/lib/gnome-vfs-2.0/modules/libfile.so<br />
b2a81000-b2a94000 r-xp 00000000 08:01 1941882    /usr/lib/totem/gstreamer/libtotem-narrowspace-plugin.so<br />
b2a94000-b2a95000 rw-p 00013000 08:01 1941882    /usr/lib/totem/gstreamer/libtotem-narrowspace-plugin.so<br />
b2a95000-b2aa4000 r-xp 00000000 08:01 1941881    /usr/lib/totem/gstreamer/libtotem-mully-plugin.so<br />
b2aa4000-b2aa5000 rw-p 0000f000 08:01 1941881    /usr/lib/totem/gstreamer/libtotem-mully-plugin.so<br />
b2aa5000-b2aba000 r-xp 00000000 08:01 1941880    /usr/lib/totem/gstreamer/libtotem-gmp-plugin.so<br />
b2aba000-b2abb000 rw-p 00015000 08:01 1941880    /usr/lib/totem/gstreamer/libtotem-gmp-plugin.so<br />
b2abb000-b2aff000 r&#8211;p 00000000 08:01 1787611    /usr/share/fonts/truetype/ttf-dejavu/DejaVuSerif-Italic.ttf<br />
b2c10000-b2c91000 rw-p 00000000 00:00 0<br />
b2d65000-b2e08000 r-xp 00000000 08:01 5038227    /usr/lib/libgstreamer-0.10.so.0.16.0<br />
b2e08000-b2e0c000 rw-p 000a3000 08:01 5038227    /usr/lib/libgstreamer-0.10.so.0.16.0<br />
b2e0c000-b2e16000 r-xp 00000000 08:01 5038237    /usr/lib/libgstpbutils-0.10.so.0.13.0<br />
b2e16000-b2e17000 rw-p 0000a000 08:01 5038237    /usr/lib/libgstpbutils-0.10.so.0.13.0<br />
b2e17000-b2edc000 r-xp 00000000 08:01 1752166    /usr/lib/libasound.so.2.0.0<br />
b2edc000-b2ee0000 rw-p 000c5000 08:01 1752166    /usr/lib/libasound.so.2.0.0<br />
b2ee0000-b2f15000 r-xp 00000000 08:01 5038394    /usr/lib/libsoup-2.4.so.1.1.0<br />
b2f15000-b2f17000 rw-p 00034000 08:01 5038394    /usr/lib/libsoup-2.4.so.1.1.0<br />
b2f17000-b2f6c000 r-xp 00000000 08:01 5038264    /usr/lib/liboil-0.3.so.0.3.0<br />
b2f6c000-b2f83000 rw-p 00055000 08:01 5038264    /usr/lib/liboil-0.3.so.0.3.0<br />
b2f83000-b2f85000 rw-p 00000000 00:00 0<br />
b2f85000-b3056000 r-xp 00000000 08:01 5038723    /usr/lib/libswfdec-0.6.so.90.0.0<br />
b3056000-b305d000 rw-p 000d1000 08:01 5038723    /usr/lib/libswfdec-0.6.so.90.0.0<br />
b305d000-b3067000 r-xp 00000000 08:01 5038724    /usr/lib/libswfdec-gtk-0.6.so.90.0.0<br />
b3067000-b3068000 rw-p 0000a000 08:01 5038724    /usr/lib/libswfdec-gtk-0.6.so.90.0.0<br />
b307b000-b307d000 r-xp 00000000 08:01 1804250    /usr/lib/pango/1.6.0/modules/pango-hangul-fc.so<br />
b307d000-b307e000 rw-p 00001000 08:01 1804250    /usr/lib/pango/1.6.0/modules/pango-hangul-fc.so<br />
b307e000-b310f000 rw-p 00000000 00:00 0<br />
b310f000-b3111000 r-xp 00000000 08:01 2949485    /lib/libnss_mdns4.so.2<br />
b3111000-b3112000 rw-p 00001000 08:01 2949485    /lib/libnss_mdns4.so.2<br />
b3119000-b3124000 r-xp 00000000 08:01 1976017    /usr/lib/swfdec-mozilla/libswfdecmozilla.so<br />
b3124000-b3125000 rw-p 0000b000 08:01 1976017    /usr/lib/swfdec-mozilla/libswfdecmozilla.so<br />
b315b000-b31d8000 r&#8211;p 00000000 08:01 1787618    /usr/share/fonts/truetype/ttf-dejavu/DejaVuSans-Oblique.ttf<br />
b31d8000-b326d000 r&#8211;p 00000000 08:01 1787607    /usr/share/fonts/truetype/ttf-dejavu/DejaVuSans.ttf<br />
b326d000-b32b4000 r&#8211;p 00000000 08:01 1787606    /usr/share/fonts/truetype/ttf-dejavu/DejaVuSansMono-Bold.ttf<br />
b32b4000-b3300000 r&#8211;p 00000000 08:01 1787604    /usr/share/fonts/truetype/ttf-dejavu/DejaVuSansMono.ttf<br />
b3300000-b33fd000 rw-p 00000000 00:00 0<br />
b33fd000-b3400000 &#8212;p 00000000 00:00 0<br />
b3400000-b3500000 rw-p 00000000 00:00 0<br />
b3500000-b3600000 rw-p 00000000 00:00 0<br />
b3603000-b3618000 r-xp 00000000 08:01 1941878    /usr/lib/totem/gstreamer/libtotem-complex-plugin.so<br />
b3618000-b3619000 rw-p 00015000 08:01 1941878    /usr/lib/totem/gstreamer/libtotem-complex-plugin.so<br />
b3619000-b365b000 r&#8211;p 00000000 08:01 1787617    /usr/share/fonts/truetype/ttf-dejavu/DejaVuSerif-BoldItalic.ttf<br />
b365b000-b36bb000 rw-s 00000000 00:04 557069     /SYSV00000000 (deleted)<br />
b36bb000-b3700000 r&#8211;p 00000000 08:01 1787609    /usr/share/fonts/truetype/ttf-dejavu/DejaVuSerif-Bold.ttf<br />
b3700000-b3900000 rw-p 00000000 00:00 0<br />
b3900000-b39f8000 rw-p 00000000 00:00 0<br />
b39f8000-b3a00000 &#8212;p 00000000 00:00 0<br />
b3a03000-b3a0b000 r-xp 00000000 08:01 5038149    /usr/lib/libfam.so.0.0.0<br />
b3a0b000-b3a0c000 rw-p 00007000 08:01 5038149    /usr/lib/libfam.so.0.0.0<br />
b3a0c000-b3a1e000 r&#8211;s 00000000 08:01 1810837    /usr/share/mime/mime.cache<br />
b3a1e000-b3a1f000 &#8212;p 00000000 00:00 0<br />
b3a1f000-b421f000 rw-p 00000000 00:00 0<br />
b421f000-b4223000 r-xp 00000000 08:01 2958660    /lib/i686/cmov/libnss_dns-2.7.so<br />
b4223000-b4225000 rw-p 00003000 08:01 2958660    /lib/i686/cmov/libnss_dns-2.7.so<br />
b4225000-b4227000 r-xp 00000000 08:01 2949486    /lib/libnss_mdns4_minimal.so.2<br />
b4227000-b4228000 rw-p 00001000 08:01 2949486    /lib/libnss_mdns4_minimal.so.2<br />
b4229000-b422b000 r-xp 00000000 08:01 5038541    /usr/lib/libtotem-plparser-mini.so.10.1.1<br />
b422b000-b422c000 rw-p 00001000 08:01 5038541    /usr/lib/libtotem-plparser-mini.so.10.1.1<br />
b422c000-b423a000 r-xp 00000000 08:01 1941877    /usr/lib/totem/gstreamer/libtotem-basic-plugin.so<br />
b423a000-b423b000 rw-p 0000d000 08:01 1941877    /usr/lib/totem/gstreamer/libtotem-basic-plugin.so<br />
b423b000-b4242000 r-xp 00000000 08:01 1893797    /usr/lib/xulrunner-1.9/components/libmozgnome.so<br />
b4242000-b4243000 rw-p 00007000 08:01 1893797    /usr/lib/xulrunner-1.9/components/libmozgnome.so<br />
b424e000-b4284000 r&#8211;p 00000000 08:01 1787613    /usr/share/fonts/truetype/ttf-dejavu/DejaVuSansMono-Oblique.ttf<br />
b4284000-b4388000 rw-p 00000000 00:00 0<br />
b4388000-b4411000 r&#8211;p 00000000 08:01 1787605    /usr/share/fonts/truetype/ttf-dejavu/DejaVuSans-Bold.ttf<br />
b4411000-b4412000 r-xp 00000000 08:01 1771438    /usr/lib/gtk-2.0/2.10.0/loaders/svg_loader.so<br />
b4412000-b4413000 rw-p 00000000 08:01 1771438    /usr/lib/gtk-2.0/2.10.0/loaders/svg_loader.so<br />
b4413000-b441a000 r&#8211;p 00000000 08:01 2294627    /home/divkis01/.icons/gartoon/icon-theme.cache<br />
b441a000-b4436000 r-xp 00000000 08:01 1843811    /usr/lib/nss/libnssdbm3.so<br />
b4436000-b4437000 rw-p 0001c000 08:01 1843811    /usr/lib/nss/libnssdbm3.so<br />
b4437000-b4463000 r-xp 00000000 08:01 1843810    /usr/lib/nss/libsoftokn3.so<br />
b4463000-b4464000 rw-p 0002c000 08:01 1843810    /usr/lib/nss/libsoftokn3.so<br />
b4464000-b4488000 r-xp 00000000 08:01 2213359    /usr/lib/iceweasel/components/libbrowsercomps.so<br />
b4488000-b448a000 rw-p 00024000 08:01 2213359    /usr/lib/iceweasel/components/libbrowsercomps.so<br />
b448a000-b448c000 r-xp 00000000 08:01 5038433    /usr/lib/libXss.so.1.0.0<br />
b448c000-b448d000 rw-p 00001000 08:01 5038433    /usr/lib/libXss.so.1.0.0<br />
b448e000-b4497000 r-xp 00000000 08:01 1893644    /usr/lib/xulrunner-1.9/components/libimgicon.so<br />
b4497000-b4498000 rw-p 00009000 08:01 1893644    /usr/lib/xulrunner-1.9/components/libimgicon.so<br />
b4498000-b449f000 r-xp 00000000 08:01 1893799    /usr/lib/xulrunner-1.9/components/libnkgnomevfs.so<br />
b449f000-b44a0000 rw-p 00007000 08:01 1893799    /usr/lib/xulrunner-1.9/components/libnkgnomevfs.so<br />
b44a0000-b44a6000 r&#8211;s 00000000 08:01 5931227    /var/cache/fontconfig/945677eb7aeaf62f1d50efc3fb3ec7d8-x86.cache-2<br />
b44a6000-b44a9000 r&#8211;s 00000000 08:01 5931203    /var/cache/fontconfig/6eb3985aa4124903f6ff08ba781cd364-x86.cache-2<br />
b44a9000-b44b0000 r&#8211;s 00000000 08:01 5931201    /var/cache/fontconfig/6d41288fd70b0be22e8c3a91e032eec0-x86.cache-2<br />
b44b0000-b44b1000 r&#8211;s 00000000 08:01 5931199    /var/cache/fontconfig/4794a0821666d79190d59a36cb4f44b5-x86.cache-2<br />
b44b1000-b44b3000 r&#8211;s 00000000 08:01 5931196    /var/cache/fontconfig/2c5ba8142dffc8bf0377700342b8ca1a-x86.cache-2<br />
b44b3000-b44c0000 r&#8211;s 00000000 08:01 5931172    /var/cache/fontconfig/e13b20fdb08344e0e664864cc2ede53d-x86.cache-2<br />
b44c0000-b44ce000 r&#8211;s 00000000 08:01 5931230    /var/cache/fontconfig/865f88548240fee46819705c6468c165-x86.cache-2<br />
b44ce000-b44cf000 &#8212;p 00000000 00:00 0<br />
b44cf000-b4ccf000 rw-p 00000000 00:00 0<br />
b4ccf000-b4d2f000 rw-s 00000000 00:04 524300     /SYSV00000000 (deleted)<br />
b4d2f000-b4d33000 r-xp 00000000 08:01 1771345    /usr/lib/gtk-2.0/2.10.0/loaders/libpixbufloader-png.so<br />
b4d33000-b4d34000 rw-p 00003000 08:01 1771345    /usr/lib/gtk-2.0/2.10.0/loaders/libpixbufloader-png.so<br />
b4d34000-b4d3c000 r-xp 00000000 08:01 1771772    /usr/lib/gtk-2.0/2.10.0/engines/libpixmap.so<br />
b4d3c000-b4d3d000 rw-p 00007000 08:01 1771772    /usr/lib/gtk-2.0/2.10.0/engines/libpixmap.so<br />
b4d3d000-b4d3e000 &#8212;p 00000000 00:00 0<br />
b4d3e000-b553e000 rw-p 00000000 00:00 0<br />
b553e000-b5547000 r-xp 00000000 08:01 2213355    /usr/lib/iceweasel/components/libbrowserdirprovider.so<br />
b5547000-b5548000 rw-p 00008000 08:01 2213355    /usr/lib/iceweasel/components/libbrowserdirprovider.so<br />
b5548000-b55ae000 r-xp 00000000 08:01 1748133    /usr/lib/libgcrypt.so.11.4.4<br />
b55ae000-b55b0000 rw-p 00066000 08:01 1748133    /usr/lib/libgcrypt.so.11.4.4<br />
b55b0000-b55b3000 r-xp 00000000 08:01 1748135    /usr/lib/libgpg-error.so.0.3.0<br />
b55b3000-b55b4000 rw-p 00002000 08:01 1748135    /usr/lib/libgpg-error.so.0.3.0<br />
b55b4000-b55c3000 r-xp 00000000 08:01 1748163    /usr/lib/libtasn1.so.3.0.15<br />
b55c3000-b55c4000 rw-p 0000e000 08:01 1748163    /usr/lib/libtasn1.so.3.0.15<br />
b55c4000-b55c8000 r-xp 00000000 08:01 5038132    /usr/lib/libORBitCosNaming-2.so.0.1.0<br />
b55c8000-b55c9000 rw-p 00003000 08:01 5038132    /usr/lib/libORBitCosNaming-2.so.0.1.0<br />
b55c9000-b55cb000 r-xp 00000000 08:01 2958671    /lib/i686/cmov/libutil-2.7.so<br />
b55cb000-b55cd000 rw-p 00001000 08:01 2958671    /lib/i686/cmov/libutil-2.7.so<br />
b55cd000-b55dd000 r-xp 00000000 08:01 2958667    /lib/i686/cmov/libresolv-2.7.so<br />
b55dd000-b55df000 rw-p 0000f000 08:01 2958667    /lib/i686/cmov/libresolv-2.7.so<br />
b55df000-b55e1000 rw-p 00000000 00:00 0<br />
b55e1000-b55f0000 r-xp 00000000 08:01 1749775    /usr/lib/libavahi-client.so.3.2.4<br />
b55f0000-b55f1000 rw-p 0000e000 08:01 1749775    /usr/lib/libavahi-client.so.3.2.4<br />
b55f1000-b55fc000 r-xp 00000000 08:01 1749773    /usr/lib/libavahi-common.so.3.5.0<br />
b55fc000-b55fd000 rw-p 0000a000 08:01 1749773    /usr/lib/libavahi-common.so.3.5.0<br />
b55fd000-b5694000 r-xp 00000000 08:01 1749770    /usr/lib/libgnutls.so.26.4.6<br />
b5694000-b569a000 rw-p 00097000 08:01 1749770    /usr/lib/libgnutls.so.26.4.6<br />
b569a000-b56d0000 r-xp 00000000 08:01 1749771    /usr/lib/libdbus-1.so.3.4.0<br />
b56d0000-b56d2000 rw-p 00035000 08:01 1749771    /usr/lib/libdbus-1.so.3.4.0<br />
b56d2000-b56ed000 r-xp 00000000 08:01 1749988    /usr/lib/libdbus-glib-1.so.2.1.0<br />
b56ed000-b56ee000 rw-p 0001b000 08:01 1749988    /usr/lib/libdbus-glib-1.so.2.1.0<br />
b56ee000-b570e000 r-xp 00000000 08:01 5038143    /usr/lib/libaudiofile.so.0.0.2<br />
b570e000-b5711000 rw-p 0001f000 08:01 5038143    /usr/lib/libaudiofile.so.0.0.2<br />
b5711000-b5719000 r-xp 00000000 08:01 5038145    /usr/lib/libesd.so.0.2.36<br />
b5719000-b571a000 rw-p 00007000 08:01 5038145    /usr/lib/libesd.so.0.2.36<br />
b571a000-b5720000 r-xp 00000000 08:01 1751390    /usr/lib/libgailutil.so.18.0.1<br />
b5720000-b5721000 rw-p 00006000 08:01 1751390    /usr/lib/libgailutil.so.18.0.1<br />
b5721000-b5729000 r-xp 00000000 08:01 2949412    /lib/libpopt.so.0.0.0<br />
b5729000-b572a000 rw-p 00007000 08:01 2949412    /lib/libpopt.so.0.0.0<br />
b572a000-b585d000 r-xp 00000000 08:01 1748162    /usr/lib/libxml2.so.2.6.32<br />
b585d000-b5862000 rw-p 00132000 08:01 1748162    /usr/lib/libxml2.so.2.6.32<br />
b5862000-b5863000 rw-p 00000000 00:00 0<br />
b5863000-b58ac000 r-xp 00000000 08:01 5038133    /usr/lib/libORBit-2.so.0.1.0<br />
b58ac000-b58b5000 rw-p 00049000 08:01 5038133    /usr/lib/libORBit-2.so.0.1.0<br />
b58b5000-b58b6000 rw-p 00000000 00:00 0<br />
b58b6000-b58c8000 r-xp 00000000 08:01 5038137    /usr/lib/libbonobo-activation.so.4.0.0<br />
b58c8000-b58ca000 rw-p 00012000 08:01 5038137    /usr/lib/libbonobo-activation.so.4.0.0<br />
b58ca000-b591c000 r-xp 00000000 08:01 5038138    /usr/lib/libbonobo-2.so.0.0.0<br />
b591c000-b5926000 rw-p 00051000 08:01 5038138    /usr/lib/libbonobo-2.so.0.0.0<br />
b5926000-b5935000 r-xp 00000000 08:01 5038163    /usr/lib/libgnome-keyring.so.0.1.1<br />
b5935000-b5936000 rw-p 0000f000 08:01 5038163    /usr/lib/libgnome-keyring.so.0.1.1<br />
b5936000-b5965000 r-xp 00000000 08:01 1751370    /usr/lib/libgconf-2.so.4.1.5<br />
b5965000-b5968000 rw-p 0002e000 08:01 1751370    /usr/lib/libgconf-2.so.4.1.5<br />
b5968000-b59c0000 r-xp 00000000 08:01 5038155    /usr/lib/libgnomevfs-2.so.0.2200.0<br />
b59c0000-b59c3000 rw-p 00057000 08:01 5038155    /usr/lib/libgnomevfs-2.so.0.2200.0<br />
b59c3000-b59d8000 r-xp 00000000 08:01 5038127    /usr/lib/libart_lgpl_2.so.2.3.20<br />
b59d8000-b59d9000 rw-p 00014000 08:01 5038127    /usr/lib/libart_lgpl_2.so.2.3.20<br />
b59d9000-b59ed000 r-xp 00000000 08:01 5038157    /usr/lib/libgnome-2.so.0.1999.2<br />
b59ed000-b59ee000 rw-p 00013000 08:01 5038157    /usr/lib/libgnome-2.so.0.1999.2<br />
b59ee000-b5a1d000 r-xp 00000000 08:01 1751440    /usr/lib/libgnomecanvas-2.so.0.2001.0<br />
b5a1d000-b5a1e000 rw-p 0002f000 08:01 1751440    /usr/lib/libgnomecanvas-2.so.0.2001.0<br />
b5a1e000-b5a79000 r-xp 00000000 08:01 5038335    /usr/lib/libbonoboui-2.so.0.0.0<br />
b5a79000-b5a7c000 rw-p 0005a000 08:01 5038335    /usr/lib/libbonoboui-2.so.0.0.0<br />
b5a7c000-b5b05000 r-xp 00000000 08:01 5038337    /usr/lib/libgnomeui-2.so.0.2000.1<br />
b5b05000-b5b09000 rw-p 00088000 08:01 5038337    /usr/lib/libgnomeui-2.so.0.2000.1<br />
b5b09000-b5b13000 r-xp 00000000 08:01 2958661    /lib/i686/cmov/libnss_files-2.7.so<br />
b5b13000-b5b15000 rw-p 00009000 08:01 2958661    /lib/i686/cmov/libnss_files-2.7.so<br />
b5b15000-b5b1e000 r-xp 00000000 08:01 2958663    /lib/i686/cmov/libnss_nis-2.7.so<br />
b5b1e000-b5b20000 rw-p 00008000 08:01 2958663    /lib/i686/cmov/libnss_nis-2.7.so<br />
b5b20000-b5b35000 r-xp 00000000 08:01 2958658    /lib/i686/cmov/libnsl-2.7.so<br />
b5b35000-b5b37000 rw-p 00014000 08:01 2958658    /lib/i686/cmov/libnsl-2.7.so<br />
b5b37000-b5b39000 rw-p 00000000 00:00 0<br />
b5b3a000-b5b40000 r-xp 00000000 08:01 1893798    /usr/lib/xulrunner-1.9/components/libdbusservice.so<br />
b5b40000-b5b41000 rw-p 00005000 08:01 1893798    /usr/lib/xulrunner-1.9/components/libdbusservice.so<br />
b5b41000-b5b43000 r-xp 00000000 08:01 1746335    /usr/lib/gconv/UTF-16.so<br />
b5b43000-b5b45000 rw-p 00001000 08:01 1746335    /usr/lib/gconv/UTF-16.so<br />
b5b45000-b5b4c000 r&#8211;s 00000000 08:01 1747425    /usr/lib/gconv/gconv-modules.cache<br />
b5b4c000-b5c86000 r&#8211;p 00000000 08:01 1762716    /usr/lib/locale/locale-archive<br />
b5c86000-b5c8a000 r-xp 00000000 08:01 1750470    /usr/lib/libXdmcp.so.6.0.0<br />
b5c8a000-b5c8b000 rw-p 00003000 08:01 1750470    /usr/lib/libXdmcp.so.6.0.0<br />
b5c8b000-b5c8d000 r-xp 00000000 08:01 1750468    /usr/lib/libXau.so.6.0.0<br />
b5c8d000-b5c8e000 rw-p 00001000 08:01 1750468    /usr/lib/libXau.so.6.0.0<br />
b5c8e000-b5c95000 r-xp 00000000 08:01 2958668    /lib/i686/cmov/librt-2.7.so<br />
b5c95000-b5c97000 rw-p 00006000 08:01 2958668    /lib/i686/cmov/librt-2.7.so<br />
b5c97000-b5cab000 r-xp 00000000 08:01 1750480    /usr/lib/libICE.so.6.3.0<br />
b5cab000-b5cac000 rw-p 00014000 08:01 1750480    /usr/lib/libICE.so.6.3.0<br />
b5cac000-b5cae000 rw-p 00000000 00:00 0<br />
b5cae000-b5cb5000 r-xp 00000000 08:01 1750482    /usr/lib/libSM.so.6.0.0<br />
b5cb5000-b5cb6000 rw-p 00006000 08:01 1750482    /usr/lib/libSM.so.6.0.0<br />
b5cb6000-b5cbe000 r-xp 00000000 08:01 1750606    /usr/lib/libXcursor.so.1.0.2<br />
b5cbe000-b5cbf000 rw-p 00007000 08:01 1750606    /usr/lib/libXcursor.so.1.0.2<br />
b5cbf000-b5cc4000 r-xp 00000000 08:01 1750760    /usr/lib/libXrandr.so.2.1.0<br />
b5cc4000-b5cc5000 rw-p 00005000 08:01 1750760    /usr/lib/libXrandr.so.2.1.0<br />
b5cc5000-b5ccc000 r-xp 00000000 08:01 1750692    /usr/lib/libXi.so.6.0.0<br />
b5ccc000-b5ccd000 rw-p 00007000 08:01 1750692    /usr/lib/libXi.so.6.0.0<br />
b5ccd000-b5ccf000 r-xp 00000000 08:01 1750694    /usr/lib/libXinerama.so.1.0.0<br />
b5ccf000-b5cd0000 rw-p 00001000 08:01 1750694    /usr/lib/libXinerama.so.1.0.0<br />
b5cd0000-b5cdd000 r-xp 00000000 08:01 1750592    /usr/lib/libXext.so.6.4.0<br />
b5cdd000-b5cde000 rw-p 0000c000 08:01 1750592    /usr/lib/libXext.so.6.4.0<br />
b5cde000-b5ce2000 r-xp 00000000 08:01 1750478    /usr/lib/libXfixes.so.3.1.0<br />
b5ce2000-b5ce3000 rw-p 00003000 08:01 1750478    /usr/lib/libXfixes.so.3.1.0<br />
b5ce3000-b5ce5000 r-xp 00000000 08:01 1750686    /usr/lib/libXdamage.so.1.1.0<br />
b5ce5000-b5ce6000 rw-p 00001000 08:01 1750686    /usr/lib/libXdamage.so.1.1.0<br />
b5ce6000-b5ce8000 r-xp 00000000 08:01 5038113    /usr/lib/libXcomposite.so.1.0.0<br />
b5ce8000-b5ce9000 rw-p 00001000 08:01 5038113    /usr/lib/libXcomposite.so.1.0.0<br />
b5ce9000-b5cea000 r-xp 00000000 08:01 1750474    /usr/lib/libxcb-xlib.so.0.0.0<br />
b5cea000-b5ceb000 rw-p 00000000 08:01 1750474    /usr/lib/libxcb-xlib.so.0.0.0<br />
b5ceb000-b5d13000 r-xp 00000000 08:01 1749972    /usr/lib/libpcre.so.3.12.1<br />
b5d13000-b5d14000 rw-p 00027000 08:01 1749972    /usr/lib/libpcre.so.3.12.1<br />
b5d14000-b5d38000 r-xp 00000000 08:01 1747333    /usr/lib/libexpat.so.1.5.2<br />
b5d38000-b5d3a000 rw-p 00023000 08:01 1747333    /usr/lib/libexpat.so.1.5.2<br />
b5d3a000-b5d62000 r-xp 00000000 08:01 5038087    /usr/lib/libpixman-1.so.0.10.0<br />
b5d62000-b5d63000 rw-p 00027000 08:01 5038087    /usr/lib/libpixman-1.so.0.10.0<br />
b5d63000-b5d7a000 r-xp 00000000 08:01 1750472    /usr/lib/libxcb.so.1.0.0<br />
b5d7a000-b5d7b000 rw-p 00017000 08:01 1750472    /usr/lib/libxcb.so.1.0.0<br />
b5d7b000-b5d81000 r-xp 00000000 08:01 5038089    /usr/lib/libxcb-render.so.0.0.0<br />
b5d81000-b5d82000 rw-p 00005000 08:01 5038089    /usr/lib/libxcb-render.so.0.0.0<br />
b5d82000-b5d85000 r-xp 00000000 08:01 5038091    /usr/lib/libxcb-render-util.so.0.0.0<br />
b5d85000-b5d86000 rw-p 00002000 08:01 5038091    /usr/lib/libxcb-render-util.so.0.0.0<br />
b5d86000-b5d99000 r-xp 00000000 08:01 1750908    /usr/lib/libdirect-1.0.so.0.1.0<br />
b5d99000-b5d9a000 rw-p 00012000 08:01 1750908    /usr/lib/libdirect-1.0.so.0.1.0<br />
b5d9a000-b5da1000 r-xp 00000000 08:01 5038081    /usr/lib/libfusion-1.0.so.0.1.0<br />
b5da1000-b5da2000 rw-p 00006000 08:01 5038081    /usr/lib/libfusion-1.0.so.0.1.0<br />
b5da2000-b5e07000 r-xp 00000000 08:01 1750909    /usr/lib/libdirectfb-1.0.so.0.1.0<br />
b5e07000-b5e09000 rw-p 00065000 08:01 1750909    /usr/lib/libdirectfb-1.0.so.0.1.0<br />
b5e09000-b5e0c000 r-xp 00000000 08:01 1749981    /usr/lib/libgmodule-2.0.so.0.1600.6<br />
b5e0c000-b5e0d000 rw-p 00002000 08:01 1749981    /usr/lib/libgmodule-2.0.so.0.1600.6<br />
b5e0d000-b5e14000 r-xp 00000000 08:01 5038314    /usr/lib/libstartup-notification-1.so.0.0.0<br />
b5e14000-b5e15000 rw-p 00007000 08:01 5038314    /usr/lib/libstartup-notification-1.so.0.0.0<br />
b5e15000-b5e19000 r-xp 00000000 08:01 1749978    /usr/lib/libgthread-2.0.so.0.1600.6<br />
b5e19000-b5e1a000 rw-p 00003000 08:01 1749978    /usr/lib/libgthread-2.0.so.0.1600.6<br />
b5e1a000-b5e66000 r-xp 00000000 08:01 1750484    /usr/lib/libXt.so.6.0.0<br />
b5e66000-b5e69000 rw-p 0004c000 08:01 1750484    /usr/lib/libXt.so.6.0.0<br />
b5e69000-b5e6a000 rw-p 00000000 00:00 0<br />
b5e6a000-b5e81000 r-xp 00000000 08:01 1751381    /usr/lib/libgdk_pixbuf-2.0.so.0.1200.12<br />
b5e81000-b5e82000 rw-p 00017000 08:01 1751381    /usr/lib/libgdk_pixbuf-2.0.so.0.1200.12<br />
b5e82000-b5f05000 r-xp 00000000 08:01 1751382    /usr/lib/libgdk-x11-2.0.so.0.1200.12<br />
b5f05000-b5f08000 rw-p 00083000 08:01 1751382    /usr/lib/libgdk-x11-2.0.so.0.1200.12<br />
b5f08000-b5f21000 r-xp 00000000 08:01 5038097    /usr/lib/libatk-1.0.so.0.2209.1<br />
b5f21000-b5f23000 rw-p 00018000 08:01 5038097    /usr/lib/libatk-1.0.so.0.2209.1<br />
b5f23000-b62a7000 r-xp 00000000 08:01 1751380    /usr/lib/libgtk-x11-2.0.so.0.1200.12<br />
b62a7000-b62ad000 rw-p 00383000 08:01 1751380    /usr/lib/libgtk-x11-2.0.so.0.1200.12<br />
b62ad000-b62ae000 rw-p 00000000 00:00 0<br />
b62ae000-b62c3000 r-xp 00000000 08:01 2958666    /lib/i686/cmov/libpthread-2.7.so<br />
b62c3000-b62c5000 rw-p 00014000 08:01 2958666    /lib/i686/cmov/libpthread-2.7.so<br />
b62c5000-b62c7000 rw-p 00000000 00:00 0<br />
b62c7000-b62f8000 r-xp 00000000 08:01 5038202    /usr/lib/libnspr4.so.0d<br />
b62f8000-b62f9000 rw-p 00031000 08:01 5038202    /usr/lib/libnspr4.so.0d<br />
b62f9000-b62fb000 rw-p 00000000 00:00 0<br />
b62fb000-b62fe000 r-xp 00000000 08:01 5038203    /usr/lib/libplc4.so.0d<br />
b62fe000-b62ff000 rw-p 00002000 08:01 5038203    /usr/lib/libplc4.so.0d<br />
b62ff000-b6301000 r-xp 00000000 08:01 5038204    /usr/lib/libplds4.so.0d<br />
b6301000-b6302000 rw-p 00001000 08:01 5038204    /usr/lib/libplds4.so.0d<br />
b6302000-b63ed000 r-xp 00000000 08:01 1750476    /usr/lib/libX11.so.6.2.0<br />
b63ed000-b63f1000 rw-p 000ea000 08:01 1750476    /usr/lib/libX11.so.6.2.0<br />
b63f1000-b63f9000 r-xp 00000000 08:01 1750604    /usr/lib/libXrender.so.1.3.0<br />
b63f9000-b63fa000 rw-p 00007000 08:01 1750604    /usr/lib/libXrender.so.1.3.0<br />
b63fa000-b64ae000 r-xp 00000000 08:01 1749982    /usr/lib/libglib-2.0.so.0.1600.6<br />
b64ae000-b64af000 rw-p 000b4000 08:01 1749982    /usr/lib/libglib-2.0.so.0.1600.6<br />
b64af000-b64ea000 r-xp 00000000 08:01 1749979    /usr/lib/libgobject-2.0.so.0.1600.6<br />
b64ea000-b64eb000 rw-p 0003b000 08:01 1749979    /usr/lib/libgobject-2.0.so.0.1600.6<br />
b64eb000-b6515000 r-xp 00000000 08:01 1750090    /usr/lib/libfontconfig.so.1.3.0<br />
b6515000-b6516000 rw-p 0002a000 08:01 1750090    /usr/lib/libfontconfig.so.1.3.0<br />
b6516000-b6587000 r-xp 00000000 08:01 1749996    /usr/lib/libfreetype.so.6.3.18<br />
b6587000-b658b000 rw-p 00070000 08:01 1749996    /usr/lib/libfreetype.so.6.3.18<br />
b658b000-b65c9000 r-xp 00000000 08:01 5038105    /usr/lib/libpango-1.0.so.0.2002.3<br />
b65c9000-b65cb000 rw-p 0003d000 08:01 5038105    /usr/lib/libpango-1.0.so.0.2002.3<br />
b65cb000-b65f1000 r-xp 00000000 08:01 5038107    /usr/lib/libpangoft2-1.0.so.0.2002.3<br />
b65f1000-b65f2000 rw-p 00026000 08:01 5038107    /usr/lib/libpangoft2-1.0.so.0.2002.3<br />
b65f2000-b665c000 r-xp 00000000 08:01 5038093    /usr/lib/libcairo.so.2.17.5<br />
b665c000-b665e000 rw-p 0006a000 08:01 5038093    /usr/lib/libcairo.so.2.17.5<br />
b665e000-b6667000 r-xp 00000000 08:01 5038106    /usr/lib/libpangocairo-1.0.so.0.2002.3<br />
b6667000-b6668000 rw-p 00008000 08:01 5038106    /usr/lib/libpangocairo-1.0.so.0.2002.3<br />
b6668000-b66a7000 r-xp 00000000 08:01 5038374    /usr/lib/libhunspell-1.2.so.0.0.0<br />
b66a7000-b66ab000 rw-p 0003e000 08:01 5038374    /usr/lib/libhunspell-1.2.so.0.0.0<br />
b66ab000-b66bf000 r-xp 00000000 08:01 1747421    /usr/lib/libz.so.1.2.3.3<br />
b66bf000-b66c0000 rw-p 00013000 08:01 1747421    /usr/lib/libz.so.1.2.3.3<br />
b66c0000-b66d1000 r-xp 00000000 08:01 5038211    /usr/lib/libnssutil3.so.1d<br />
b66d1000-b66d4000 rw-p 00011000 08:01 5038211    /usr/lib/libnssutil3.so.1d<br />
b66d4000-b67a3000 r-xp 00000000 08:01 5038210    /usr/lib/libnss3.so.1d<br />
b67a3000-b67a7000 rw-p 000cf000 08:01 5038210    /usr/lib/libnss3.so.1d<br />
b67a7000-b67c3000 r-xp 00000000 08:01 5038212    /usr/lib/libsmime3.so.1d<br />
b67c3000-b67c5000 rw-p 0001c000 08:01 5038212    /usr/lib/libsmime3.so.1d<br />
b67c5000-b67ea000 r-xp 00000000 08:01 5038213    /usr/lib/libssl3.so.1d<br />
b67ea000-b67ec000 rw-p 00025000 08:01 5038213    /usr/lib/libssl3.so.1d<br />
b67ec000-b687c000 r-xp 00000000 08:01 1747488    /usr/lib/libmozjs.so.1d<br />
b687c000-b6881000 rw-p 0008f000 08:01 1747488    /usr/lib/libmozjs.so.1d<br />
b6881000-b68b1000 r-xp 00000000 08:01 5038370    /usr/lib/liblcms.so.1.0.16<br />
b68b1000-b68b2000 rw-p 00030000 08:01 5038370    /usr/lib/liblcms.so.1.0.16<br />
b68b2000-b68b5000 rw-p 00000000 00:00 0<br />
b68b5000-b68d8000 r-xp 00000000 08:01 1750030    /usr/lib/libpng12.so.0.27.0<br />
b68d8000-b68d9000 rw-p 00023000 08:01 1750030    /usr/lib/libpng12.so.0.27.0<br />
b68d9000-b68f7000 r-xp 00000000 08:01 1749812    /usr/lib/libjpeg.so.62.0.0<br />
b68f7000-b68f8000 rw-p 0001e000 08:01 1749812    /usr/lib/libjpeg.so.62.0.0<br />
b68f8000-b6965000 r-xp 00000000 08:01 1749005    /usr/lib/libsqlite3.so.0.8.6<br />
b6965000-b6967000 rw-p 0006c000 08:01 1749005    /usr/lib/libsqlite3.so.0.8.6<br />
b6967000-b73d9000 r-xp 00000000 08:01 1893684    /usr/lib/xulrunner-1.9/libxul.so<br />
b73d9000-b74b6000 rw-p 00a72000 08:01 1893684    /usr/lib/xulrunner-1.9/libxul.so<br />
b74b6000-b74c6000 rw-p 00000000 00:00 0<br />
b74c6000-b74d2000 r-xp 00000000 08:01 2949164    /lib/libgcc_s.so.1<br />
b74d2000-b74d3000 rw-p 0000b000 08:01 2949164    /lib/libgcc_s.so.1<br />
b74d3000-b74f7000 r-xp 00000000 08:01 2958656    /lib/i686/cmov/libm-2.7.so<br />
b74f7000-b74f9000 rw-p 00023000 08:01 2958656    /lib/i686/cmov/libm-2.7.so<br />
b74f9000-b764e000 r-xp 00000000 08:01 2958652    /lib/i686/cmov/libc-2.7.so<br />
b764e000-b764f000 r&#8211;p 00155000 08:01 2958652    /lib/i686/cmov/libc-2.7.so<br />
b764f000-b7651000 rw-p 00156000 08:01 2958652    /lib/i686/cmov/libc-2.7.so<br />
b7651000-b7655000 rw-p 00000000 00:00 0<br />
b7655000-b7738000 r-xp 00000000 08:01 1745058    /usr/lib/libstdc++.so.6.0.10<br />
b7738000-b773b000 r&#8211;p 000e2000 08:01 1745058    /usr/lib/libstdc++.so.6.0.10<br />
b773b000-b773d000 rw-p 000e5000 08:01 1745058    /usr/lib/libstdc++.so.6.0.10<br />
b773d000-b7743000 rw-p 00000000 00:00 0<br />
b7743000-b7745000 r-xp 00000000 08:01 2958655    /lib/i686/cmov/libdl-2.7.so<br />
b7745000-b7747000 rw-p 00001000 08:01 2958655    /lib/i686/cmov/libdl-2.7.so<br />
b7747000-b7749000 r-xp 00000000 08:01 1804257    /usr/lib/pango/1.6.0/modules/pango-basic-fc.so<br />
b7749000-b774a000 rw-p 00001000 08:01 1804257    /usr/lib/pango/1.6.0/modules/pango-basic-fc.so<br />
b774a000-b774c000 r-xp 00000000 08:01 5038147    /usr/lib/libavahi-glib.so.1.0.1<br />
b774c000-b774d000 rw-p 00002000 08:01 5038147    /usr/lib/libavahi-glib.so.1.0.1<br />
b774d000-b7754000 r-xp 00000000 08:01 2958659    /lib/i686/cmov/libnss_compat-2.7.so<br />
b7754000-b7756000 rw-p 00006000 08:01 2958659    /lib/i686/cmov/libnss_compat-2.7.so<br />
b7756000-b7759000 r-xp 00000000 08:01 1893677    /usr/lib/xulrunner-1.9/libxpcom.so<br />
b7759000-b775a000 rw-p 00002000 08:01 1893677    /usr/lib/xulrunner-1.9/libxpcom.so<br />
b775a000-b775c000 rw-p 00000000 00:00 0<br />
b775c000-b775d000 r-xp 00000000 00:00 0          [vdso]<br />
b775d000-b7777000 r-xp 00000000 08:01 2949122    /lib/ld-2.7.so<br />
b7777000-b7779000 rw-p 0001a000 08:01 2949122    /lib/ld-2.7.so<br />
bfce1000-bfd17000 rw-p 00000000 00:00 0          [stack]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-55327">
			<a href='http://kevinrodrigues.com/blog/2009/12/09/layout-of-a-program-in-memory-2/' rel='external nofollow' class='url'>Layout of a program in memory | Complete Coding</a> on
						January 5th, 2010 9:55 am 
			<div class="commenttext">
			<p>[...] area is a read only area of memory.You can learn more details about the anatomy of program memory, here.Technorati Tags: virtual file system, paging, layout of program memory Related Posts:Modular [...]</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-56129">
			Ashish on
						January 10th, 2010 11:08 am 
			<div class="commenttext">
			<p>Very Nice post&#8230; good effort, thanks a lot for such a valuable information. I have a query.<br />
If a program define 5GB of a static variable, where it will go since process have only 4GB block of virtual memory addresses in 32-bit mode.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-56276">
			<a href='http://blogs.howstuffworks.com/2009/02/02/interesting-reading-225/' rel='external nofollow' class='url'>Interesting Reading&#8230; &#8211; The Blogs at HowStuffWorks</a> on
						January 11th, 2010 11:09 am 
			<div class="commenttext">
			<p>[...] Anatomy of a program in memory &#8211; &#8220;Memory management is the heart of operating systems; it is crucial for both programming and system administration. In the next few posts I’ll cover memory with an eye towards practical aspects, but without shying away from internals. While the concepts are generic, examples are mostly from Linux and Windows on 32-bit x86. This first post describes how programs are laid out in memory&#8230;.&#8221; [...]</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-59301">
			mike on
						February 4th, 2010 2:11 am 
			<div class="commenttext">
			<p>good writing and thanks for your sharing.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-69757">
			joey on
						March 24th, 2010 2:05 am 
			<div class="commenttext">
			<p>Please forgive my ignorance or immaturity on this subject, Ive been reading on it for the past 2 weeks and I get confusing information about the elf.<br />
I did a hexdump &#8220;&gt;&gt;hexdump -C &#8221; in my linux machine on my elf(executable) and I was able to trace out the different sections and segments with the hexdump &#8220;&gt;&gt;readelf -x .text &#8220;. Now the hexdump from the readelf utility has addresses associated with them like this: </p>
<p>0&#215;08048540 ffc70424 74870408 e8e3feff ffe8e300 &#8230;$t&#8230;&#8230;&#8230;..<br />
  0&#215;08048550 0000b8a4 8704088d 54242f89 54240489 &#8230;&#8230;..T$/.T$..<br />
  0&#215;08048560 0424e8b9 feffff0f b644242f 0fbec88b .$&#8230;&#8230;.D$/&#8230;.<br />
  0&#215;08048570 5424248b 44242889 4c240889 54240489 T$$.D$(.L$..T$..</p>
<p>I want to know exactly how the kernel associates each byte in the elf file to an address like 0&#215;08048540. Please help clarify things, I don&#8217;t believe in magic. I also read that section .symtab is not included in the elf executable file, why is it that the readelf utility can perform a hexdump on it like this &#8220;&gt;&gt;readelf -x .symtab &#8221;<br />
0&#215;00000000 00000000 00000000 00000000 00000000 &#8230;&#8230;&#8230;&#8230;&#8230;.<br />
  0&#215;00000010 00000000 34810408 00000000 03000100 &#8230;.4&#8230;&#8230;&#8230;..<br />
  0&#215;00000020 00000000 48810408 00000000 03000200 &#8230;.H&#8230;&#8230;&#8230;..<br />
  0&#215;00000030 00000000 68810408 00000000 03000300 &#8230;.h&#8230;&#8230;&#8230;..</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-76901">
			Stef on
						April 19th, 2010 4:20 am 
			<div class="commenttext">
			<p>Salut Gustavo,</p>
<p>Thanks for your pages, they are great.</p>
<p>Being knowledgeable in the topic, there is however a tough one I was not able to solve myself. Maybe you or someone reading this page can cast some light on it?</p>
<p>I recently installed openSUSE 11.2 32 bits and Kubuntu 9.10, both running Linux kernel 2.6.31.</p>
<p>I don&#8217;t understand why cat /proc//maps (related to the top command here for example) returns 4 lines per shared libraries (for some, not all &#8211; the usual 3 lines then).</p>
<p>3 lines, like in older kernel (2.6.28, &#8230;), makes sense: bss, data and text segments. In some kernels I noticed also two entries only per shared library (bss merged with data, or data only? That makes sense, at least)</p>
<p>However, 4 entries (!), one being a page of rights &#8220;&#8212;p&#8221; (cannot be read, written or executed) seems very odd to me. I get the same results on my SUSE and Kubtuntu, so &#8211; hence no bug. But what then? There is nothing much in the ELF format that give me any hint.</p>
<p>An exemple for libncurses.so.5.6 (related to top):<br />
b76ab000-b76e1000 r-xp 00000000 08:02 127570 /lib/libncurses.so.5.6<br />
b76e1000-b76e2000 &#8212;p 00036000 08:02 127570 /lib/libncurses.so.5.6<br />
b76e2000-b76e4000 r&#8211;p 00036000 08:02 127570 /lib/libncurses.so.5.6<br />
b76e4000-b76e8000 rw-p 00038000 08:02 127570 /lib/libncurses.so.5.6</p>
<p>&#8211; Stéphane</p>
			</div>

		</li>

	
	
		<li class="" id="comment-86048">
			Sudheer on
						May 24th, 2010 8:12 am 
			<div class="commenttext">
			<p>Hi Guru,</p>
<p>A basic question.<br />
Is there any difference in generation of logical addresses for a program in linux OS and windows OS?</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-88285">
			<a href='http://www.whizsolutions.co.uk/graphics.html' rel='external nofollow' class='url'>Graphics Designer Middlesex</a> on
						June 4th, 2010 11:45 am 
			<div class="commenttext">
			<p>When i was studying my diploma there was a subject called COA which has this topic at that time i didn&#8217;t get it and this time also. (Don&#8217;t mind author bcoz my knowledge in hardware functionality is very poor) But definitely this post will useful for tech savvy guys</p>
			</div>

		</li>

	
	
		<li class="" id="comment-93116">
			Shobhit Gupta on
						June 30th, 2010 8:48 pm 
			<div class="commenttext">
			<p>Wow, what a great article.<br />
I was searching for exactly this kind of (easy to understand) detailed information on Process Address Space.</p>
<p>I couldn&#8217;t help not thank you for this article. </p>
<p>Thanks a lot,<br />
Shobhit</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-93200">
			JAT on
						July 1st, 2010 5:05 am 
			<div class="commenttext">
			<p>Excellent Work &#8230;</p>
			</div>

		</li>

	
	
		<li class="" id="comment-93815">
			Super on
						July 6th, 2010 7:35 pm 
			<div class="commenttext">
			<p>Pretty cool, thank you for your great job! It really helps me a lot.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-94057">
			chaitanya on
						July 9th, 2010 10:57 am 
			<div class="commenttext">
			<p>Thanks for the in-detailed article</p>
			</div>

		</li>

	
	
		<li class="" id="comment-94139">
			Anty on
						July 10th, 2010 1:26 am 
			<div class="commenttext">
			<p>Pretty Cool, THX very much</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-95521">
			nandu on
						July 29th, 2010 5:39 am 
			<div class="commenttext">
			<p>Really very informative articles on Linux memory internals.<br />
If you write one more article relating Virtual memory,Kernel memory with pysical memory(RAM), covering how the kernel gets loaded in RAM and stored, how the remaining RAM space is used for this memory mapping, really this will give great insight for beginners,</p>
<p>Thanks,<br />
Nandu</p>
			</div>

		</li>

	
	
		<li class="" id="comment-96244">
			<a href='http://o-o-s.de' rel='external nofollow' class='url'>Chris</a> on
						August 10th, 2010 12:56 am 
			<div class="commenttext">
			<p>I think you mean &#8220;always a 4KB block of memory addresses&#8221; instead if &#8220;always a 4GB block of memory addresses&#8221;.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-99946">
			Manish on
						September 27th, 2010 6:59 am 
			<div class="commenttext">
			<p>Ya,very good content &#8230;.can you explain little bit more about anonymous memory and malloc() relation with it.That will surely provide more knowledge to beginner .</p>
			</div>

		</li>

	
	
		<li class="" id="comment-103190">
			<a href='http://stack0verflow.wordpress.com/2010/10/30/4/' rel='external nofollow' class='url'>Linux memory management 32-bit x86 &laquo; Stack0verflow</a> on
						October 30th, 2010 11:08 am 
			<div class="commenttext">
			<p>[...] [2]: Understanding the Linux Kernel By Daniel Pierre Bovet, Marco Cesatí  [3]: man pages [4]: <a href="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory" rel="nofollow">http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory</a> by Gustavo Duarte [5]: <a href="http://wikipedia.org/" rel="nofollow">http://wikipedia.org/</a> [6]: <a href="http://lxr.linux.no/" rel="nofollow">http://lxr.linux.no/</a> [7]:<a href="http://linux-mm.org/" rel="nofollow">http://linux-mm.org/</a> [...]</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-105717">
			Girish on
						November 23rd, 2010 12:13 am 
			<div class="commenttext">
			<p>This is really nice.</p>
<p>Thanks<br />
-Girish</p>
			</div>

		</li>

	
	
		<li class="" id="comment-105768">
			apj on
						November 23rd, 2010 1:12 pm 
			<div class="commenttext">
			<p>Thanks for the awesome article! There is one thing im unable to understand.. what goes into the I GB kernel space?. and what about kernel processes?.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-107030">
			Sashi on
						December 5th, 2010 9:14 pm 
			<div class="commenttext">
			<p>This is a great article! very well presented and making things crystal clear.</p>
<p>Thanks! and looking forward for more&#8230;</p>
			</div>

		</li>

	
	
		<li class="" id="comment-114255">
			<a href='http://www.venturosis.com' rel='external nofollow' class='url'>Web Developer</a> on
						February 12th, 2011 2:55 am 
			<div class="commenttext">
			<p>I can remember doing the fetch-execute cycle at college, could never remember it! But this is so much deeper!</p>
<p><a href="http://www.venturosis.com" rel="nofollow">Web Developer</a></p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-119182">
			<a href='http://kwoz.wordpress.com/2011/03/22/a-collection-of-articles-on-virtual-memory/' rel='external nofollow' class='url'>A collection of articles on virtual memory &laquo; kwoz online</a> on
						March 22nd, 2011 8:10 am 
			<div class="commenttext">
			<p>[...] Here is a rather interesting article on virtual memory from operating system&#8217;s point of view. It appears to link to other posts on similar topics, including processor privileges. Low-level but could be handy.    GA_googleAddAttr(&quot;AdOpt&quot;, &quot;1&quot;); GA_googleAddAttr(&quot;Origin&quot;, &quot;other&quot;); GA_googleAddAttr(&quot;theme_bg&quot;, &quot;ffffff&quot;); GA_googleAddAttr(&quot;theme_border&quot;, &quot;000000&quot;); GA_googleAddAttr(&quot;theme_text&quot;, &quot;000000&quot;); GA_googleAddAttr(&quot;theme_link&quot;, &quot;2970A6&quot;); GA_googleAddAttr(&quot;theme_url&quot;, &quot;2970A6&quot;); GA_googleAddAttr(&quot;LangId&quot;, &quot;1&quot;); GA_googleAddAttr(&quot;Autotag&quot;, &quot;technology&quot;); GA_googleFillSlot(&quot;wpcom_below_post&quot;);      Categories: Uncategorized     LikeBe the first to like this post.   Comments (0) Trackbacks (0) Leave a comment Trackback [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-119739">
			UbuntuGuy on
						March 26th, 2011 12:13 pm 
			<div class="commenttext">
			<p>Great article, very inspiring. make me wanna take out the old c book and start kernel programming</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-124714">
			<a href='http://deepak.io/?p=27' rel='external nofollow' class='url'>How the Linux kernel manages your memory &laquo; DEEPAK.IO</a> on
						May 6th, 2011 6:29 pm 
			<div class="commenttext">
			<p>[...] examining the virtual address layout of a process, we turn to the kernel and its mechanisms for managing user memory. Here is gonzo [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-125088">
			saurin on
						May 11th, 2011 3:56 pm 
			<div class="commenttext">
			<p>I have a question about the linear to physical memory translation</p>
<p>According to my understanding,<br />
Application run time address itself contains the PGD offset, PTE offset and page offset.</p>
<p>swapper_pg_dir is the PGD and located in linux kernel image, and linux kernel build the page table for 4GB memory.</p>
<p>Question is:<br />
When MMU translate the linear address to physical address it requires Page Global directory table and Page Table array, from where it gets that? because PGD and PTE arrays are located itself in physical memory</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-126351">
			Harold Wang on
						May 25th, 2011 7:55 am 
			<div class="commenttext">
			<p>Amazing Job! Thank you!</p>
			</div>

		</li>

	
	
		<li class="" id="comment-127015">
			Raju on
						May 30th, 2011 10:59 pm 
			<div class="commenttext">
			<p>Hi:</p>
<p>I was going through your link posted </p>
<p><a href="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory" rel="nofollow">http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory</a> </p>
<p>I am having some doubts regarding the Stack segments , does we never has Segmenation fault in Linux ??<br />
does at time of Stack space on demand stack offset()/mmap offset()<br />
comes in picture , can you give me some example how to implement it ??</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-131855">
			Pravin on
						July 3rd, 2011 8:27 am 
			<div class="commenttext">
			<p>Thanks heaps! <img src='http://duartes.org/gustavo/blog/wp-includes/images/smilies/icon_wink.gif' alt=';-)' class='wp-smiley' /> </p>
			</div>

		</li>

	
	
		<li class="" id="comment-133080">
			<a href='http://andreyka.od.ua/141.html' rel='external nofollow' class='url'>Пользуетесь PHP на 64-х битной платформе? Значит потеряли в производительности! :: Архив статей Андрея Роговского</a> on
						July 12th, 2011 11:07 pm 
			<div class="commenttext">
			<p>[...]   [...]</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-134163">
			<a href='http://scienceasm.wordpress.com/2011/07/21/build-your-own-operating-system/' rel='external nofollow' class='url'>Build your own operating system | scienceasm</a> on
						July 21st, 2011 2:48 am 
			<div class="commenttext">
			<p>[...] how it protects processes from each other. You should also get the idea about how the OS lays out executables and shared libraries within the process address space and how it creates shared memory regions. Two core abstractions of every modern OS [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-134710">
			<a href='http://sande.aitorpazos.es/2009/02/itienes-dudas-con-la-memoria/' rel='external nofollow' class='url'>¿Tienes dudas con la memoria? | Blog-AitorPazos</a> on
						July 25th, 2011 8:04 am 
			<div class="commenttext">
			<p>[...] <a href="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory" rel="nofollow">http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory</a>   This entry was posted in Linux by Aitor Pazos. Bookmark the permalink. [...]</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-139779">
			Vaibhav Jain on
						September 1st, 2011 1:28 pm 
			<div class="commenttext">
			<p>This is an awesome article!!<br />
But I just have a small query. You have mentioned that the<br />
string that the pointer &#8216;gonzo&#8217; points to &#8211; &#8220;God&#8217;s own prototype&#8221; is in text segment and is read-only.But then what if I try to change the string by assigning some string to *gonzo like &#8211; *gonzo = &#8220;my string&#8221;. Will it throw a segmentation fault?</p>
			</div>

		</li>

	
	
		<li class="" id="comment-141540">
			David on
						September 15th, 2011 8:47 am 
			<div class="commenttext">
			<p>Great post, (with the virtual address layout) why is [0&#215;0, 0&#215;08048000) left unmapped? Is it a no-touching region? Any reason?</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-142355">
			Mars on
						September 22nd, 2011 7:43 pm 
			<div class="commenttext">
			<p>Hi Gustavo Duarte<br />
Thanks for this great article. May I translate it to Traditional Chinese?<br />
I think this will help more programmers in Taiwan understand this concept.</p>
<p>Thanks again. <img src='http://duartes.org/gustavo/blog/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /> </p>
			</div>

		</li>

	
	
		<li class="" id="comment-148484">
			<a href='http://francescodifusco.wordpress.com/2011/10/31/anatomy-of-a-program-in-memory-gustavo-duarte/' rel='external nofollow' class='url'>Anatomy of a Program in Memory : Gustavo Duarte | FRANCESCO DI FUSCO</a> on
						October 31st, 2011 1:43 am 
			<div class="commenttext">
			<p>[...] Anatomy of a Program in Memory : Gustavo Duarte. Share this:TwitterFacebookStumbleUponPrintEmailLinkedInLike this:LikeBe the first to like this post.   This entry was posted in Linux, Operating Systems by francescodifusco. Bookmark the permalink. [...]</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-150961">
			Ramachandra on
						November 15th, 2011 3:16 am 
			<div class="commenttext">
			<p>Wonderful article&#8230; It helped me to regain my position in India&#8217;s 3rd largest IT company.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-151128">
			<a href='http://www.naruto-spoilers.in' rel='external nofollow' class='url'>itachi</a> on
						November 16th, 2011 1:17 am 
			<div class="commenttext">
			<p>thanks for the article.. i am reading ages after you wrote it.. but i am glad i did.. ll go through other posts of yours.. really informative!!</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-153429">
			<a href='http://mr4nu815.wordpress.com/2011/11/30/from-0x90-to-0x4c454554-a-journey-into-exploitation/' rel='external nofollow' class='url'>From 0&#215;90 to 0x4c454554, a journey into exploitation &laquo; Mr.Anubis&#039;s Blog</a> on
						November 29th, 2011 7:23 pm 
			<div class="commenttext">
			<p>[...] Anatomy of a program in memory [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-155132">
			Anon on
						December 7th, 2011 6:32 pm 
			<div class="commenttext">
			<p>Great article! Thanks.</p>
<p>I have a query. The figure you have shown is when you have a single process. When there are say 2 processes, how will the memory layout be? I understand as below from top of memory to bottom<br />
1)kernel space(1 gb) same<br />
2) all other sections gets split for p1, p2 say of size 3gb/2</p>
<p>Please correct me if i am wrong.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-162404">
			Markus on
						January 2nd, 2012 2:20 am 
			<div class="commenttext">
			<p>Hi Gustavo!</p>
<p>Thanks for a great article.</p>
<p>I am wondering if you could explain what you mean with the following:</p>
<p>&#8220;The text segment also maps your binary file in memory, but writes to this area earn your program a Segmentation Fault. This helps prevent pointer bugs&#8221;</p>
<p>Does it mean that the text segment contains code to make an additional mapping of the entire binary file (in addition to the BSS and data segments as explained earlier in the article)? </p>
<p>Also, how do this prevent pointer bugs?</p>
<p>Brs,<br />
Markus</p>
			</div>

		</li>

	
	
		<li class="" id="comment-166428">
			kishor kunal on
						January 17th, 2012 12:21 am 
			<div class="commenttext">
			<p>very nice .thank u dude.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-172910">
			Vivek kumar on
						February 14th, 2012 6:48 am 
			<div class="commenttext">
			<p>Hi,</p>
<p>Thanks for great explanation, It&#8217;s helped me to start it once again as I had left this topic.</p>
<p>Can you please let me know one thing as it will help me to move further.<br />
     &#8220;Anyway, here is the standard segment layout in a Linux process:&#8221;<br />
Is the OS create same layout for every process. Or there is a single Heap/Memory for all processes.</p>
<p>Thanks again for your post.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-183898">
			<a href='http://www.sigma.me/2012/04/09/process-in-memory.html' rel='external nofollow' class='url'>程序(进程)在内存中的组织-由ld_brk_point以及brk函数谈起-Sigma</a> on
						April 9th, 2012 6:05 am 
			<div class="commenttext">
			<p>[...] 图片来源：http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory [...]</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-184928">
			<a href='http://chaoswork.com/blog/2012/04/13/csapp-bufbomb-%e7%bc%93%e5%86%b2%e5%8c%ba%e6%ba%a2%e5%87%ba%e6%94%bb%e5%87%bb/' rel='external nofollow' class='url'>CS:APP bufbomb 缓冲区溢出攻击 | Chaoswork</a> on
						April 13th, 2012 7:17 am 
			<div class="commenttext">
			<p>[...] 首先，一个进程是怎么在内存里布局的？强烈建议读一下这篇blog:<a href="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory,在现代的操作系统中，每个进程都运行在自己的虚拟地址空间中，类似一个沙盒，让每一个进程都感觉自己运行在一个4G的内存空间中，当然这只是给进程以及用户的一种幻觉，实际上每个进程的虚拟地址空间都会被分页机制映射到物理地址的页或者虚拟内存的页，虚拟内存就是当内存不够时用硬盘充当一部份内存使用，比如linux的swap分区。" rel="nofollow">http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory,在现代的操作系统中，每个进程都运行在自己的虚拟地址空间中，类似一个沙盒，让每一个进程都感觉自己运行在一个4G的内存空间中，当然这只是给进程以及用户的一种幻觉，实际上每个进程的虚拟地址空间都会被分页机制映射到物理地址的页或者虚拟内存的页，虚拟内存就是当内存不够时用硬盘充当一部份内存使用，比如linux的swap分区。</a> [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-188064">
			<a href='http://csstips.org/2012/04/28/how-does-a-startup-out-recruit-google-how-google-indexes-the-web-code-retreat-and-what-was-learnt-in-45-minutes-flipkart-slideshow-banner-anatomy-of-a-program-in-memory-w' rel='external nofollow' class='url'>How Does a Startup Out-recruit Google How Google Indexes the Web Code Retreat and What Was Learnt in 45 Minutes Flipkart Slideshow Banner Anatomy of a Program in Memory What Is and Why Octopress ? Welcome ! &laquo; CSS Tips</a> on
						April 28th, 2012 1:48 am 
			<div class="commenttext">
			<p>[...] Memory management is the heart of operating systems; it is crucial for both programming and system administration.  Gustavo Duarte, duartes.org/gustavo/blog/post/… [...]</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-188103">
			<a href='http://csstips.t1u.org/2012/04/28/how-does-a-startup-out-recruit-google-how-google-indexes-the-web-code-retreat-and-what-was-learnt-in-45-minutes-flipkart-slideshow-banner-anatomy-of-a-program-in-memo' rel='external nofollow' class='url'>How Does a Startup Out-recruit Google How Google Indexes the Web Code Retreat and What Was Learnt in 45 Minutes Flipkart Slideshow Banner Anatomy of a Program in Memory What Is and Why Octopress ? Welcome ! &laquo; CSS Tips</a> on
						April 28th, 2012 3:15 am 
			<div class="commenttext">
			<p>[...] Here is something that was taught very poorly in the OS class that I took as an undergraduate student Memory management is the heart of operating systems; it is crucial for both programming and system administration. Gustavo Duarte, duartes.org/gustavo/blog/post/… [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-189023">
			Abhinav on
						May 2nd, 2012 7:44 pm 
			<div class="commenttext">
			<p>It&#8217;s an informative post, but there is one thing that is really bothering me.<br />
I don&#8217;t understand if the sections (text,data,bss) are<br />
(i) all created at once by the OS &amp; then chunks out of them is provided to the needing process, or does<br />
(ii)each process has its own unique sections whose actual physical location may vary?</p>
<p>If the answer is (i) then how come a process has linear virtual address space?<br />
Please provide some explanation&#8230;&#8230;.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-195959">
			Allen on
						May 23rd, 2012 4:29 pm 
			<div class="commenttext">
			<p>Thanks! Provided exactly what I was looking for</p>
			</div>

		</li>

	
	
		<li class="" id="comment-202997">
			sanjay on
						June 7th, 2012 11:42 am 
			<div class="commenttext">
			<p>Gustavo,<br />
it is really useful article for me &#8230; great post &#8230;.. would like to read your posts in sequence for understanding the internals &#8230;&#8230; </p>
<p>I would like to know more on the memory mapping part mentioned here &#8230; if you can suggest any post / direct me to your post, it would be helpful to me &#8230; </p>
<p>Thanks again Gustavo for your explanation here</p>
<p>- Sanjay</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-203702">
			<a href='http://www.seedclass.com/archives/277' rel='external nofollow' class='url'>&raquo; Blog Archive &raquo; 【译】程序的内存分布</a> on
						June 9th, 2012 2:26 am 
			<div class="commenttext">
			<p>[...]   原文地址请见http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory，有改动，转载注明出处 。译者邮箱： [email&nbsp;protected] /*  */ [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-207427">
			Prashant on
						June 17th, 2012 10:48 am 
			<div class="commenttext">
			<p>Really very written article. Thanks for the valuable information shared.</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-215270">
			<a href='http://chanduthedev.blogspot.in/' rel='external nofollow' class='url'>chandu</a> on
						July 4th, 2012 5:12 am 
			<div class="commenttext">
			<p>Very use full information. Thanks a lot.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-228129">
			Kuro on
						August 2nd, 2012 3:54 pm 
			<div class="commenttext">
			<p>Very well written article!<br />
Can you comment what VSZ of ps or VIRT of top value represent ? I would like to know how much heap memory my program is consuming.  How can I figure it out?</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-239787">
			Ranga Tirumalaseti on
						September 8th, 2012 1:20 pm 
			<div class="commenttext">
			<p>Great Stuff. Explained in very effective manner.</p>
<p>Thank you for sharing knowledge.</p>
<p>An article relatede to Multithreaded programs and  memory allocations&#8230;will be great.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-247665">
			<a href='http://bitismyth.wordpress.com/2012/09/28/excelente-artigo-sobre-memory-management/' rel='external nofollow' class='url'>Excelente artigo sobre &#8216;memory management&#8217; &laquo; Bit is Myth</a> on
						September 28th, 2012 11:45 am 
			<div class="commenttext">
			<p>[...] o artigo aqui. Share this:EmailTwitterFacebookGostar disso:GosteiSeja o primeiro a gostar disso.   Deixe um [...]</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-251466">
			abhi on
						October 8th, 2012 7:24 am 
			<div class="commenttext">
			<p>Thank you. Great post!</p>
<p>One confusion, doesn&#8217;t malloc in libc use the heap? Or does it depend on the allocator used?</p>
			</div>

		</li>

	
	
		<li class="" id="comment-253842">
			<a href='http://steinwaywu.info' rel='external nofollow' class='url'>Hanwen Wu</a> on
						October 15th, 2012 10:50 am 
			<div class="commenttext">
			<p>Awesome! Thank you for all your articles about memory. Those figures are really helpful for understanding those complex things. Thank you!</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-265802">
			sena on
						November 4th, 2012 12:04 pm 
			<div class="commenttext">
			<p>Beautiful diagrams.  I&#8217;m a kind of visual learner.  I got your page by image search &#8220;linux process memory model&#8221;.  As most of the people commented early, some of the information I read here is very new and gets me more insight into Linux system.  Thanks for your time and good work.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-278667">
			Arun Perumal on
						November 21st, 2012 3:07 am 
			<div class="commenttext">
			<p>Thanks a lot for the article. This one, clears one of my long standing doubt/confusion about &#8220;kernel space addresses across all the processes&#8221;. I had the question raised on stack overflow, and finally myself updated a answer with clarification based on your article.<br />
<a href="http://stackoverflow.com/questions/12995957/linux-kernel-logical-address-for-multiple-processes" rel="nofollow">http://stackoverflow.com/questions/12995957/linux-kernel-logical-address-for-multiple-processes</a></p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-279002">
			<a href='http://cboard.cprogramming.com/c-programming/152499-static-variable-initialization.html#post1135428' rel='external nofollow' class='url'>static variable initialization</a> on
						November 21st, 2012 1:22 pm 
			<div class="commenttext">
			<p>[...] (excluding some embedded ones) use virtual memory mapping. Check out this link for an overview: Anatomy of a Program in Memory : Gustavo Duarte. Google &quot;linux process memory layout&quot; for more examples and info of how Linux does it. [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-285540">
			nadji on
						November 30th, 2012 1:58 pm 
			<div class="commenttext">
			<p>it is the better tutorial thank you</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-341415">
			leo kirotawa on
						January 10th, 2013 11:19 am 
			<div class="commenttext">
			<p>Great blog and article =). I&#8217;m trying find a good material about that. Thanks a lot!</p>
			</div>

		</li>

	
	
		<li class="" id="comment-344229">
			abhishek on
						January 12th, 2013 12:53 pm 
			<div class="commenttext">
			<p>I have some confusion with respect to what you posted<br />
you mention &#8220;Each process in a multi-tasking OS runs in its own memory sandbox. This sandbox is the virtual address space, which in 32-bit mode is always a 4GB block of memory addresses.&#8221;<br />
Does that mean on a system with 4GB RAM only one process is running at a time?<br />
because the same is reflected by the diagram in which firefox is running in occupying the blue part of diagram.</p>
<p>Also what do stack and heap contain in case of a running program?</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-374298">
			Kavitha Srinivas on
						February 1st, 2013 4:04 am 
			<div class="commenttext">
			<p>Hi Gustavo,</p>
<p>Thank you again for the wonder article, I have read you article on boot sequence for linux as well.<br />
I have a doubt ,<br />
1) What is Virtual Memory?</p>
<p>Some say that virtual memory is nothing but the harddisk and some say no its not harddisk. When we run any program we get the virtual address where is this address actually present?</p>
<p>If Virtual memory is Hardisk itself, then harddisk is format with some filesystem right? how and which program actuall helps processor to access the harddisk.</p>
<p>Thanks and Regards<br />
Kavitha</p>
			</div>

		</li>

	
	
		<li class="" id="comment-379118">
			Kavitha Srinivas on
						February 4th, 2013 3:32 am 
			<div class="commenttext">
			<p>Hi Gustavo,<br />
Thank you again for the wonder article, I have read you article on boot sequence for linux as well.<br />
I have a doubt ,<br />
1) What is Virtual Memory?<br />
Some say that virtual memory is nothing but the harddisk and some say no its not harddisk. When we run any program we get the virtual address where is this address actually present?<br />
If Virtual memory is Hardisk itself, then harddisk is format with some filesystem right? how and which program actuall helps processor to access the harddisk.<br />
Thanks and Regards<br />
Kavitha</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-395970">
			<a href='http://oldpapyrus.wordpress.com/2013/03/01/anatomy-of-a-program-in-memory/' rel='external nofollow' class='url'>Anatomy of a Program in Memory | Arun&#039;s Blog</a> on
						March 1st, 2013 3:29 am 
			<div class="commenttext">
			<p>[...] article on how a programs reside in the memory at runtime &#8211; Anatomy of a Program in Memory Share this:ShareEmailLike this:Like Loading&#8230;   This entry was posted in Technical on 1 Mar, 2013 [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-395982">
			<a href='http://jainkkapil.wordpress.com/2013/03/01/program-in-memory-an-insiders-look/' rel='external nofollow' class='url'>Program in memory : An insider&#8217;s look | Kapil Jain</a> on
						March 1st, 2013 4:17 am 
			<div class="commenttext">
			<p>[...] this Article which presents a very good picture of how a program resides in memory while executing. Highlights [...]</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-399509">
			Mayank on
						March 8th, 2013 2:21 am 
			<div class="commenttext">
			<p>Very well explained, To know more about memory heap I find this thread very helpful : <a href="http://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap#79936" rel="nofollow">http://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap#79936</a> (See comment from guy named Martin Liversage)</p>
			</div>

		</li>

	
	
		<li class="" id="comment-406535">
			Karthik on
						March 21st, 2013 7:06 am 
			<div class="commenttext">
			<p>Superb post. Have a question though, when running a function multi threaded each thread has to have a separate stack. Does it mean  in the address space there are multiple active stacks ?</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-410185">
			Pratik on
						March 28th, 2013 8:06 pm 
			<div class="commenttext">
			<p>Hi Gustavo,</p>
<p>I understood that user and kernel stacks are two different things even if they are refer to the same process. But my question is, does kernel has its own separate stack which can be used for user independent processing, i.e. scheduler activities. I think, scheduler is not accessed by any system call or any user space process. But scheduler must have stack for its own processing. So which is this stack used by scheduler?</p>
			</div>

		</li>

	
	
		<li class="" id="comment-420579">
			Ivan Stanev on
						April 15th, 2013 2:52 pm 
			<div class="commenttext">
			<p>Hi Gustavo,</p>
<p>What resides between addresses 0&#215;00000000 and 0&#215;08048000 (the small white space at the bottom of your diagrams)? It&#8217;s the only thing I couldn&#8217;t understand&#8230;</p>
<p>Regards</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-430770">
			Sham on
						May 4th, 2013 7:48 pm 
			<div class="commenttext">
			<p>Hello Gustavo<br />
I am dying to get such details for x64 environment.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-431316">
			<a href='http://www.blogosfera.co.uk/2013/05/memory-organization-in-c/' rel='external nofollow' class='url'>Memory Organization in C++ | BlogoSfera</a> on
						May 6th, 2013 11:57 pm 
			<div class="commenttext">
			<p>[...] <a href="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory" rel="nofollow">http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory</a> [...]</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-431436">
			<a href='http://www.blogosfera.co.uk/2013/05/memory-organization-in-c-closed/' rel='external nofollow' class='url'>Memory Organization in C++ [closed] | BlogoSfera</a> on
						May 7th, 2013 6:57 am 
			<div class="commenttext">
			<p>[...] <a href="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory" rel="nofollow">http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory</a> [...]</p>
			</div>

		</li>

	
	
		<li class="" id="comment-434171">
			<a href='http://cedricvanrompay.wordpress.com/2013/05/15/an-access-to-the-heap/' rel='external nofollow' class='url'>An access to the heap | Cédric Van Rompay</a> on
						May 15th, 2013 1:56 am 
			<div class="commenttext">
			<p>[...] Anatomy of a Program in Memory <a href="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory" rel="nofollow">http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory</a> [...]</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-436881">
			<a href='http://www.ee.iitb.ac.in/student/~dilawar' rel='external nofollow' class='url'>Dilawar</a> on
						May 22nd, 2013 8:29 am 
			<div class="commenttext">
			<p>Great many things has been said about your blog, but it wouldn&#8217;t hurt to add one more. This is so far the best post I have ever read on Internet. This is possibly as good as Patterson book on computer architecture.</p>
			</div>

		</li>

	
	
		<li class="" id="comment-436902">
			Jeffrey Walotn on
						May 22nd, 2013 9:47 am 
			<div class="commenttext">
			<p>&#8220;The difference is that BSS stores the contents of uninitialized static variables, whose values are not set by the programmer in source code.&#8221;</p>
<p>This is not necessarily true. On GNU systems, GCC will put variables with static storage (both locals and global) in the BSS. The C/C++ standard requires they be initialized, and PODs will be initialized to 0. So the BSS is initialized in practice (at least some of the time on some of the systems).</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-437560">
			Kindra on
						May 24th, 2013 1:03 am 
			<div class="commenttext">
			<p>Hi, just wanted to mention, I liked this blog post.</p>
<p>It was funny. Keep on posting!</p>
			</div>

		</li>

	
	
		<li class="" id="comment-437974">
			leizisdu on
						May 25th, 2013 3:28 am 
			<div class="commenttext">
			<p>Thank you for your explaining:D</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-440441">
			qinxinliang on
						June 1st, 2013 7:04 am 
			<div class="commenttext">
			<p>Great work:)<br />
I want to translate this article to Chinese, is it OK?</p>
			</div>

		</li>

	
	
		<li class="" id="comment-440740">
			<a href='http://duartes.org/gustavo/blog' rel='external nofollow' class='url'>Gustavo Duarte</a> on
						June 2nd, 2013 8:38 am 
			<div class="commenttext">
			<p>@Dilawar: thank you for such a great compliment.</p>
<p>@qinxinliang: absolutely.</p>
<p>@Jeffrey: thanks for the inoput, I&#8217;m working on new versions of the article and will work to get this fixed.</p>
<p>@all: thanks for reading!</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-452627">
			ProgrammingGene on
						July 2nd, 2013 11:40 pm 
			<div class="commenttext">
			<p>Great insight for beginner like me! My constant reference link! But I have one question there is mention of Stack(grows down) ?? Isn&#8217;t Stack fixed?</p>
			</div>

		</li>

	
	
		<li class="" id="comment-453294">
			Arre on
						July 4th, 2013 3:29 am 
			<div class="commenttext">
			<p>Awesome post!!</p>
			</div>

		</li>

	
	
		<li class="alt" id="comment-504210">
			Girish Balakrishnan on
						September 9th, 2013 9:27 pm 
			<div class="commenttext">
			<p>Brilliant!! If you write a book I will buy it!!! <img src='http://duartes.org/gustavo/blog/wp-includes/images/smilies/icon_biggrin.gif' alt=':D' class='wp-smiley' /> </p>
			</div>

		</li>

	
	
	</ol>

 


<p id="respond"><b>Leave a Reply</b></p>


<form action="http://duartes.org/gustavo/blog/wp-comments-post.php" method="post" id="commentform">


<p><label for="author">Name (required)</label><br />
<input type="text" name="author" id="author" value="" size="40" tabindex="1" /></p>

<p><label for="email">Email Address(required)</label><br />
<input type="text" name="email" id="email" value="" size="40" tabindex="2" /></p>

<p><label for="url">Website</label><br />
<input type="text" name="url" id="url" value="" size="40" tabindex="3" /></p>


<!--<p><small><strong>XHTML:</strong> You can use these tags: &lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </small></p>-->

<p><textarea name="comment" id="comment" cols="75" rows="10" tabindex="4"></textarea></p>

<p><input name="submit" type="submit" id="submit" tabindex="5" value="Submit Comment" />
<input type="hidden" name="comment_post_ID" value="318" /></p>

<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="83db0420dd" /></p>
</form>
</div>


		
			
	</div>
	
<!-- begin r_sidebar -->

	<div id="r_sidebar">
	<ul id="r_sidebarwidgeted">
		
	<li id="Search">
	<h3>Find It</h3>
	   <div class="search">
	   		<form id="searchform" method="get" action="/gustavo/blog/index.php">
			<input type="text" name="s" id="s" value=""/></form>
		</div>
	</li>

	<li id="Recent">
	<h2>Recently Written</h2>
		<ul>
				<li><a href='http://duartes.org/gustavo/blog/post/added-best-of-page-back-to-writing' title='Added Best Of Page, Back to Writing'>Added Best Of Page, Back to Writing</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/page-cache-the-affair-between-memory-and-files' title='Page Cache, the Affair Between Memory and Files'>Page Cache, the Affair Between Memory and Files</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/the-thing-king' title='The Thing King'>The Thing King</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/how-the-kernel-manages-your-memory' title='How The Kernel Manages Your Memory'>How The Kernel Manages Your Memory</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/quick-note-on-diagrams-and-the-blog' title='Quick Note on Diagrams and the Blog'>Quick Note on Diagrams and the Blog</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory' title='Anatomy of a Program in Memory'>Anatomy of a Program in Memory</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/getting-physical-with-memory' title='Getting Physical With Memory'>Getting Physical With Memory</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/programming-and-the-recession' title='Programming and the Recession'>Programming and the Recession</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/daddy-why-does-it-smell-like-fire' title='Daddy, why does it smell like fire?'>Daddy, why does it smell like fire?</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/intel-cpu-caches' title='Cache: a place for concealment and safekeeping'>Cache: a place for concealment and safekeeping</a></li>
		</ul>
	</li>
	
	<li id="Categories">
	<h2>Categories</h2>
		<ul>
			<li class="cat-item cat-item-13"><a href="http://duartes.org/gustavo/blog/category/business" title="View all posts filed under Business">Business</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://duartes.org/gustavo/blog/category/compsci" title="View all posts filed under CompSci">CompSci</a>
</li>
	<li class="cat-item cat-item-11"><a href="http://duartes.org/gustavo/blog/category/culture" title="View all posts filed under Culture">Culture</a>
</li>
	<li class="cat-item cat-item-10"><a href="http://duartes.org/gustavo/blog/category/internals" title="View all posts filed under Internals">Internals</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://duartes.org/gustavo/blog/category/linux" title="View all posts filed under Linux">Linux</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://duartes.org/gustavo/blog/category/meta" title="View all posts filed under Meta">Meta</a>
</li>
	<li class="cat-item cat-item-12"><a href="http://duartes.org/gustavo/blog/category/personal" title="View all posts filed under Personal">Personal</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://duartes.org/gustavo/blog/category/productivity" title="View all posts filed under Productivity">Productivity</a>
</li>
	<li class="cat-item cat-item-3"><a href="http://duartes.org/gustavo/blog/category/programming" title="View all posts filed under Programming">Programming</a>
</li>
	<li class="cat-item cat-item-6"><a href="http://duartes.org/gustavo/blog/category/security" title="View all posts filed under Security">Security</a>
</li>
	<li class="cat-item cat-item-9"><a href="http://duartes.org/gustavo/blog/category/software-illustrated" title="View all posts filed under Software Illustrated">Software Illustrated</a>
</li>
	<li class="cat-item cat-item-4"><a href="http://duartes.org/gustavo/blog/category/sysadmin" title="View all posts filed under Sysadmin">Sysadmin</a>
</li>
		</ul>
	</li>
		
	<li id="Archives">
	<h2>Monthly Archives</h2>
		<ul>
				<li><a href='http://duartes.org/gustavo/blog/post/2010/12' title='December 2010'>December 2010</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/2009/02' title='February 2009'>February 2009</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/2009/01' title='January 2009'>January 2009</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/2008/12' title='December 2008'>December 2008</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/2008/11' title='November 2008'>November 2008</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/2008/10' title='October 2008'>October 2008</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/2008/08' title='August 2008'>August 2008</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/2008/07' title='July 2008'>July 2008</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/2008/06' title='June 2008'>June 2008</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/2008/05' title='May 2008'>May 2008</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/2008/04' title='April 2008'>April 2008</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/2008/03' title='March 2008'>March 2008</a></li>
	<li><a href='http://duartes.org/gustavo/blog/post/2008/02' title='February 2008'>February 2008</a></li>
		</ul>
	</li>
		
		</ul>
			
</div>

<!-- end r_sidebar -->

</div>

<!-- The main column ends  -->

<div style="clear:both;"></div>


<div id="footerbg">

	<div id="footer">
		<p>Copyright &copy; 2008 <a href="http://duartes.org/gustavo/blog/">Gustavo Duarte</a> &bull; Using Canga&ccedil;o, based on <a href="http://www.briangardner.com/themes/dropshadow-wordpress-theme.htm" >Dropshadow</a> theme by <a href="http://www.briangardner.com" >Brian Gardner</a></p>
	</div>

</div>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-3204790-1");
pageTracker._initData();
pageTracker._trackPageview();
</script>

</body>
</html>

<!-- Dynamic page generated in 0.330 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2013-09-28 12:54:16 -->

<!-- Compression = gzip -->