
stm32g474_startup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002814  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080029ec  080029ec  000039ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029fc  080029fc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080029fc  080029fc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029fc  080029fc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029fc  080029fc  000039fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a00  08002a00  00003a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a04  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  2000000c  08002a10  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08002a10  00004434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6ac  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002351  00000000  00000000  000126e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00014a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a07  00000000  00000000  00015798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fd2  00000000  00000000  0001619f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecbe  00000000  00000000  0003d171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f776d  00000000  00000000  0004be2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014359c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003700  00000000  00000000  001435e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00146ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080029d4 	.word	0x080029d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080029d4 	.word	0x080029d4

08000218 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000220:	4b08      	ldr	r3, [pc, #32]	@ (8000244 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000222:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000224:	4907      	ldr	r1, [pc, #28]	@ (8000244 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4313      	orrs	r3, r2
 800022a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800022c:	4b05      	ldr	r3, [pc, #20]	@ (8000244 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800022e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4013      	ands	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000236:	68fb      	ldr	r3, [r7, #12]
}
 8000238:	bf00      	nop
 800023a:	3714      	adds	r7, #20
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr
 8000244:	40021000 	.word	0x40021000

08000248 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000248:	b480      	push	{r7}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000250:	4b08      	ldr	r3, [pc, #32]	@ (8000274 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000252:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000254:	4907      	ldr	r1, [pc, #28]	@ (8000274 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4313      	orrs	r3, r2
 800025a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800025c:	4b05      	ldr	r3, [pc, #20]	@ (8000274 <LL_APB1_GRP2_EnableClock+0x2c>)
 800025e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4013      	ands	r3, r2
 8000264:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000266:	68fb      	ldr	r3, [r7, #12]
}
 8000268:	bf00      	nop
 800026a:	3714      	adds	r7, #20
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	40021000 	.word	0x40021000

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f000 fb57 	bl	800092e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f80e 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 f974 	bl	8000570 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000288:	f000 f85a 	bl	8000340 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 800028c:	f000 f89e 	bl	80003cc <MX_SPI1_Init>
  MX_SPI4_Init();
 8000290:	f000 f8da 	bl	8000448 <MX_SPI4_Init>
  MX_USB_PCD_Init();
 8000294:	f000 f944 	bl	8000520 <MX_USB_PCD_Init>
  MX_UCPD1_Init();
 8000298:	f000 f914 	bl	80004c4 <MX_UCPD1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029c:	bf00      	nop
 800029e:	e7fd      	b.n	800029c <main+0x24>

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b094      	sub	sp, #80	@ 0x50
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	2238      	movs	r2, #56	@ 0x38
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fb63 	bl	800297a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002c2:	2000      	movs	r0, #0
 80002c4:	f001 f8c8 	bl	8001458 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 80002c8:	2323      	movs	r3, #35	@ 0x23
 80002ca:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d8:	2340      	movs	r3, #64	@ 0x40
 80002da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002dc:	2301      	movs	r3, #1
 80002de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e0:	2302      	movs	r3, #2
 80002e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e4:	2303      	movs	r3, #3
 80002e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002e8:	2304      	movs	r3, #4
 80002ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002ec:	2355      	movs	r3, #85	@ 0x55
 80002ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002f0:	2302      	movs	r3, #2
 80002f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002f4:	2302      	movs	r3, #2
 80002f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002f8:	2302      	movs	r3, #2
 80002fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fc:	f107 0318 	add.w	r3, r7, #24
 8000300:	4618      	mov	r0, r3
 8000302:	f001 f95d 	bl	80015c0 <HAL_RCC_OscConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800030c:	f000 f978 	bl	8000600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	230f      	movs	r3, #15
 8000312:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000314:	2303      	movs	r3, #3
 8000316:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2104      	movs	r1, #4
 8000328:	4618      	mov	r0, r3
 800032a:	f001 fc5b 	bl	8001be4 <HAL_RCC_ClockConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000334:	f000 f964 	bl	8000600 <Error_Handler>
  }
}
 8000338:	bf00      	nop
 800033a:	3750      	adds	r7, #80	@ 0x50
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000344:	4b1f      	ldr	r3, [pc, #124]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 8000346:	4a20      	ldr	r2, [pc, #128]	@ (80003c8 <MX_FDCAN1_Init+0x88>)
 8000348:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800034a:	4b1e      	ldr	r3, [pc, #120]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 800034c:	2200      	movs	r2, #0
 800034e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000350:	4b1c      	ldr	r3, [pc, #112]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000356:	4b1b      	ldr	r3, [pc, #108]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 8000358:	2200      	movs	r2, #0
 800035a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800035c:	4b19      	ldr	r3, [pc, #100]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 800035e:	2200      	movs	r2, #0
 8000360:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000362:	4b18      	ldr	r3, [pc, #96]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 8000364:	2200      	movs	r2, #0
 8000366:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000368:	4b16      	ldr	r3, [pc, #88]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 800036a:	2200      	movs	r2, #0
 800036c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800036e:	4b15      	ldr	r3, [pc, #84]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 8000370:	2210      	movs	r2, #16
 8000372:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000374:	4b13      	ldr	r3, [pc, #76]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 8000376:	2201      	movs	r2, #1
 8000378:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800037a:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 800037c:	2202      	movs	r2, #2
 800037e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000380:	4b10      	ldr	r3, [pc, #64]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 8000382:	2202      	movs	r2, #2
 8000384:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000386:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 8000388:	2201      	movs	r2, #1
 800038a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800038c:	4b0d      	ldr	r3, [pc, #52]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 800038e:	2201      	movs	r2, #1
 8000390:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000392:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 8000394:	2201      	movs	r2, #1
 8000396:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000398:	4b0a      	ldr	r3, [pc, #40]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 800039a:	2201      	movs	r2, #1
 800039c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800039e:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80003a4:	4b07      	ldr	r3, [pc, #28]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80003aa:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80003b0:	4804      	ldr	r0, [pc, #16]	@ (80003c4 <MX_FDCAN1_Init+0x84>)
 80003b2:	f000 fc11 	bl	8000bd8 <HAL_FDCAN_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80003bc:	f000 f920 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000028 	.word	0x20000028
 80003c8:	40006400 	.word	0x40006400

080003cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000440 <MX_SPI1_Init+0x74>)
 80003d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000444 <MX_SPI1_Init+0x78>)
 80003d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <MX_SPI1_Init+0x74>)
 80003d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003de:	4b18      	ldr	r3, [pc, #96]	@ (8000440 <MX_SPI1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003e4:	4b16      	ldr	r3, [pc, #88]	@ (8000440 <MX_SPI1_Init+0x74>)
 80003e6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80003ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003ec:	4b14      	ldr	r3, [pc, #80]	@ (8000440 <MX_SPI1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003f2:	4b13      	ldr	r3, [pc, #76]	@ (8000440 <MX_SPI1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80003f8:	4b11      	ldr	r3, [pc, #68]	@ (8000440 <MX_SPI1_Init+0x74>)
 80003fa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000400:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <MX_SPI1_Init+0x74>)
 8000402:	2230      	movs	r2, #48	@ 0x30
 8000404:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000406:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <MX_SPI1_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800040c:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <MX_SPI1_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000412:	4b0b      	ldr	r3, [pc, #44]	@ (8000440 <MX_SPI1_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000418:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <MX_SPI1_Init+0x74>)
 800041a:	2207      	movs	r2, #7
 800041c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800041e:	4b08      	ldr	r3, [pc, #32]	@ (8000440 <MX_SPI1_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000424:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <MX_SPI1_Init+0x74>)
 8000426:	2208      	movs	r2, #8
 8000428:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800042a:	4805      	ldr	r0, [pc, #20]	@ (8000440 <MX_SPI1_Init+0x74>)
 800042c:	f002 f808 	bl	8002440 <HAL_SPI_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000436:	f000 f8e3 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	2000008c 	.word	0x2000008c
 8000444:	40013000 	.word	0x40013000

08000448 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800044c:	4b1b      	ldr	r3, [pc, #108]	@ (80004bc <MX_SPI4_Init+0x74>)
 800044e:	4a1c      	ldr	r2, [pc, #112]	@ (80004c0 <MX_SPI4_Init+0x78>)
 8000450:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000452:	4b1a      	ldr	r3, [pc, #104]	@ (80004bc <MX_SPI4_Init+0x74>)
 8000454:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000458:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800045a:	4b18      	ldr	r3, [pc, #96]	@ (80004bc <MX_SPI4_Init+0x74>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000460:	4b16      	ldr	r3, [pc, #88]	@ (80004bc <MX_SPI4_Init+0x74>)
 8000462:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000466:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000468:	4b14      	ldr	r3, [pc, #80]	@ (80004bc <MX_SPI4_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800046e:	4b13      	ldr	r3, [pc, #76]	@ (80004bc <MX_SPI4_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000474:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <MX_SPI4_Init+0x74>)
 8000476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800047a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800047c:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <MX_SPI4_Init+0x74>)
 800047e:	2230      	movs	r2, #48	@ 0x30
 8000480:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000482:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <MX_SPI4_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000488:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <MX_SPI4_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800048e:	4b0b      	ldr	r3, [pc, #44]	@ (80004bc <MX_SPI4_Init+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000494:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <MX_SPI4_Init+0x74>)
 8000496:	2207      	movs	r2, #7
 8000498:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800049a:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <MX_SPI4_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004a0:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <MX_SPI4_Init+0x74>)
 80004a2:	2208      	movs	r2, #8
 80004a4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80004a6:	4805      	ldr	r0, [pc, #20]	@ (80004bc <MX_SPI4_Init+0x74>)
 80004a8:	f001 ffca 	bl	8002440 <HAL_SPI_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80004b2:	f000 f8a5 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200000f0 	.word	0x200000f0
 80004c0:	40013c00 	.word	0x40013c00

080004c4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
 80004d8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80004da:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80004de:	f7ff feb3 	bl	8000248 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80004e2:	2002      	movs	r0, #2
 80004e4:	f7ff fe98 	bl	8000218 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80004e8:	2310      	movs	r3, #16
 80004ea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004ec:	2303      	movs	r3, #3
 80004ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004f0:	2300      	movs	r3, #0
 80004f2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f4:	463b      	mov	r3, r7
 80004f6:	4619      	mov	r1, r3
 80004f8:	4808      	ldr	r0, [pc, #32]	@ (800051c <MX_UCPD1_Init+0x58>)
 80004fa:	f002 f997 	bl	800282c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80004fe:	2340      	movs	r3, #64	@ 0x40
 8000500:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000502:	2303      	movs	r3, #3
 8000504:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050a:	463b      	mov	r3, r7
 800050c:	4619      	mov	r1, r3
 800050e:	4803      	ldr	r0, [pc, #12]	@ (800051c <MX_UCPD1_Init+0x58>)
 8000510:	f002 f98c 	bl	800282c <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000514:	bf00      	nop
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	48000400 	.word	0x48000400

08000520 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000524:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_USB_PCD_Init+0x48>)
 8000526:	4a11      	ldr	r2, [pc, #68]	@ (800056c <MX_USB_PCD_Init+0x4c>)
 8000528:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800052a:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <MX_USB_PCD_Init+0x48>)
 800052c:	2208      	movs	r2, #8
 800052e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000530:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <MX_USB_PCD_Init+0x48>)
 8000532:	2202      	movs	r2, #2
 8000534:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000536:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <MX_USB_PCD_Init+0x48>)
 8000538:	2202      	movs	r2, #2
 800053a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800053c:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <MX_USB_PCD_Init+0x48>)
 800053e:	2200      	movs	r2, #0
 8000540:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000542:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <MX_USB_PCD_Init+0x48>)
 8000544:	2200      	movs	r2, #0
 8000546:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000548:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <MX_USB_PCD_Init+0x48>)
 800054a:	2200      	movs	r2, #0
 800054c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800054e:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <MX_USB_PCD_Init+0x48>)
 8000550:	2200      	movs	r2, #0
 8000552:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000554:	4804      	ldr	r0, [pc, #16]	@ (8000568 <MX_USB_PCD_Init+0x48>)
 8000556:	f000 fe87 	bl	8001268 <HAL_PCD_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000560:	f000 f84e 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000154 	.word	0x20000154
 800056c:	40005c00 	.word	0x40005c00

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b480      	push	{r7}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000576:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <MX_GPIO_Init+0x8c>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a20      	ldr	r2, [pc, #128]	@ (80005fc <MX_GPIO_Init+0x8c>)
 800057c:	f043 0310 	orr.w	r3, r3, #16
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <MX_GPIO_Init+0x8c>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0310 	and.w	r3, r3, #16
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058e:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <MX_GPIO_Init+0x8c>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a1a      	ldr	r2, [pc, #104]	@ (80005fc <MX_GPIO_Init+0x8c>)
 8000594:	f043 0320 	orr.w	r3, r3, #32
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <MX_GPIO_Init+0x8c>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0320 	and.w	r3, r3, #32
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <MX_GPIO_Init+0x8c>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a14      	ldr	r2, [pc, #80]	@ (80005fc <MX_GPIO_Init+0x8c>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <MX_GPIO_Init+0x8c>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <MX_GPIO_Init+0x8c>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a0e      	ldr	r2, [pc, #56]	@ (80005fc <MX_GPIO_Init+0x8c>)
 80005c4:	f043 0308 	orr.w	r3, r3, #8
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <MX_GPIO_Init+0x8c>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0308 	and.w	r3, r3, #8
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <MX_GPIO_Init+0x8c>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	4a08      	ldr	r2, [pc, #32]	@ (80005fc <MX_GPIO_Init+0x8c>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e2:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <MX_GPIO_Init+0x8c>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ee:	bf00      	nop
 80005f0:	371c      	adds	r7, #28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000

08000600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000604:	b672      	cpsid	i
}
 8000606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <Error_Handler+0x8>

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <HAL_MspInit+0x44>)
 8000614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000616:	4a0e      	ldr	r2, [pc, #56]	@ (8000650 <HAL_MspInit+0x44>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6613      	str	r3, [r2, #96]	@ 0x60
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <HAL_MspInit+0x44>)
 8000620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <HAL_MspInit+0x44>)
 800062c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800062e:	4a08      	ldr	r2, [pc, #32]	@ (8000650 <HAL_MspInit+0x44>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000634:	6593      	str	r3, [r2, #88]	@ 0x58
 8000636:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <HAL_MspInit+0x44>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800063a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000642:	f000 ffad 	bl	80015a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000

08000654 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09e      	sub	sp, #120	@ 0x78
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	2254      	movs	r2, #84	@ 0x54
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f002 f980 	bl	800297a <memset>
  if(hfdcan->Instance==FDCAN1)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a1f      	ldr	r2, [pc, #124]	@ (80006fc <HAL_FDCAN_MspInit+0xa8>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d137      	bne.n	80006f4 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000688:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800068a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800068e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fc85 	bl	8001fa4 <HAL_RCCEx_PeriphCLKConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80006a0:	f7ff ffae 	bl	8000600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80006a4:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <HAL_FDCAN_MspInit+0xac>)
 80006a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006a8:	4a15      	ldr	r2, [pc, #84]	@ (8000700 <HAL_FDCAN_MspInit+0xac>)
 80006aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80006b0:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <HAL_FDCAN_MspInit+0xac>)
 80006b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006bc:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <HAL_FDCAN_MspInit+0xac>)
 80006be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000700 <HAL_FDCAN_MspInit+0xac>)
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <HAL_FDCAN_MspInit+0xac>)
 80006ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006cc:	f003 0308 	and.w	r3, r3, #8
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006d4:	2303      	movs	r3, #3
 80006d6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80006e4:	2309      	movs	r3, #9
 80006e6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006ec:	4619      	mov	r1, r3
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <HAL_FDCAN_MspInit+0xb0>)
 80006f0:	f000 fc38 	bl	8000f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80006f4:	bf00      	nop
 80006f6:	3778      	adds	r7, #120	@ 0x78
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40006400 	.word	0x40006400
 8000700:	40021000 	.word	0x40021000
 8000704:	48000c00 	.word	0x48000c00

08000708 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08c      	sub	sp, #48	@ 0x30
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a2e      	ldr	r2, [pc, #184]	@ (80007e0 <HAL_SPI_MspInit+0xd8>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d129      	bne.n	800077e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800072a:	4b2e      	ldr	r3, [pc, #184]	@ (80007e4 <HAL_SPI_MspInit+0xdc>)
 800072c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800072e:	4a2d      	ldr	r2, [pc, #180]	@ (80007e4 <HAL_SPI_MspInit+0xdc>)
 8000730:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000734:	6613      	str	r3, [r2, #96]	@ 0x60
 8000736:	4b2b      	ldr	r3, [pc, #172]	@ (80007e4 <HAL_SPI_MspInit+0xdc>)
 8000738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800073a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b28      	ldr	r3, [pc, #160]	@ (80007e4 <HAL_SPI_MspInit+0xdc>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	4a27      	ldr	r2, [pc, #156]	@ (80007e4 <HAL_SPI_MspInit+0xdc>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074e:	4b25      	ldr	r3, [pc, #148]	@ (80007e4 <HAL_SPI_MspInit+0xdc>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800075a:	23f0      	movs	r3, #240	@ 0xf0
 800075c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800076a:	2305      	movs	r3, #5
 800076c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000778:	f000 fbf4 	bl	8000f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800077c:	e02c      	b.n	80007d8 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI4)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a19      	ldr	r2, [pc, #100]	@ (80007e8 <HAL_SPI_MspInit+0xe0>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d127      	bne.n	80007d8 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000788:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <HAL_SPI_MspInit+0xdc>)
 800078a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800078c:	4a15      	ldr	r2, [pc, #84]	@ (80007e4 <HAL_SPI_MspInit+0xdc>)
 800078e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000792:	6613      	str	r3, [r2, #96]	@ 0x60
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <HAL_SPI_MspInit+0xdc>)
 8000796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a0:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <HAL_SPI_MspInit+0xdc>)
 80007a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a4:	4a0f      	ldr	r2, [pc, #60]	@ (80007e4 <HAL_SPI_MspInit+0xdc>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <HAL_SPI_MspInit+0xdc>)
 80007ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b0:	f003 0310 	and.w	r3, r3, #16
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80007b8:	2364      	movs	r3, #100	@ 0x64
 80007ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80007c8:	2305      	movs	r3, #5
 80007ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	4806      	ldr	r0, [pc, #24]	@ (80007ec <HAL_SPI_MspInit+0xe4>)
 80007d4:	f000 fbc6 	bl	8000f64 <HAL_GPIO_Init>
}
 80007d8:	bf00      	nop
 80007da:	3730      	adds	r7, #48	@ 0x30
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40013000 	.word	0x40013000
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40013c00 	.word	0x40013c00
 80007ec:	48001000 	.word	0x48001000

080007f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b098      	sub	sp, #96	@ 0x60
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2254      	movs	r2, #84	@ 0x54
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f002 f8ba 	bl	800297a <memset>
  if(hpcd->Instance==USB)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <HAL_PCD_MspInit+0x60>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d11a      	bne.n	8000846 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000810:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000814:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000816:	2300      	movs	r3, #0
 8000818:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fbc0 	bl	8001fa4 <HAL_RCCEx_PeriphCLKConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800082a:	f7ff fee9 	bl	8000600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <HAL_PCD_MspInit+0x64>)
 8000830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000832:	4a08      	ldr	r2, [pc, #32]	@ (8000854 <HAL_PCD_MspInit+0x64>)
 8000834:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000838:	6593      	str	r3, [r2, #88]	@ 0x58
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <HAL_PCD_MspInit+0x64>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000846:	bf00      	nop
 8000848:	3760      	adds	r7, #96	@ 0x60
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40005c00 	.word	0x40005c00
 8000854:	40021000 	.word	0x40021000

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <NMI_Handler+0x4>

08000860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <HardFault_Handler+0x4>

08000868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <MemManage_Handler+0x4>

08000870 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <UsageFault_Handler+0x4>

08000880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ae:	f000 f891 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	@ (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008dc:	480d      	ldr	r0, [pc, #52]	@ (8000914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e0:	f7ff ffea 	bl	80008b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	@ (8000918 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	@ (800091c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000920 <LoopForever+0xe>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000928 <LoopForever+0x16>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090a:	f002 f83f 	bl	800298c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800090e:	f7ff fcb3 	bl	8000278 <main>

08000912 <LoopForever>:

LoopForever:
    b LoopForever
 8000912:	e7fe      	b.n	8000912 <LoopForever>
  ldr   r0, =_estack
 8000914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000920:	08002a04 	.word	0x08002a04
  ldr r2, =_sbss
 8000924:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000928:	20000434 	.word	0x20000434

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>

0800092e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000934:	2300      	movs	r3, #0
 8000936:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f91b 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800093e:	200f      	movs	r0, #15
 8000940:	f000 f80e 	bl	8000960 <HAL_InitTick>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d002      	beq.n	8000950 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	71fb      	strb	r3, [r7, #7]
 800094e:	e001      	b.n	8000954 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000950:	f7ff fe5c 	bl	800060c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000954:	79fb      	ldrb	r3, [r7, #7]

}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800096c:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <HAL_InitTick+0x68>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d022      	beq.n	80009ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000974:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <HAL_InitTick+0x6c>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <HAL_InitTick+0x68>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000980:	fbb1 f3f3 	udiv	r3, r1, r3
 8000984:	fbb2 f3f3 	udiv	r3, r2, r3
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f918 	bl	8000bbe <HAL_SYSTICK_Config>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10f      	bne.n	80009b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b0f      	cmp	r3, #15
 8000998:	d809      	bhi.n	80009ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099a:	2200      	movs	r2, #0
 800099c:	6879      	ldr	r1, [r7, #4]
 800099e:	f04f 30ff 	mov.w	r0, #4294967295
 80009a2:	f000 f8f2 	bl	8000b8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <HAL_InitTick+0x70>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	e007      	b.n	80009be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	73fb      	strb	r3, [r7, #15]
 80009b2:	e004      	b.n	80009be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	e001      	b.n	80009be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009be:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <HAL_IncTick+0x1c>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <HAL_IncTick+0x20>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4413      	add	r3, r2
 80009e2:	4a03      	ldr	r2, [pc, #12]	@ (80009f0 <HAL_IncTick+0x1c>)
 80009e4:	6013      	str	r3, [r2, #0]
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	20000430 	.word	0x20000430
 80009f4:	20000008 	.word	0x20000008

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b03      	ldr	r3, [pc, #12]	@ (8000a0c <HAL_GetTick+0x14>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000430 	.word	0x20000430

08000a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	db0a      	blt.n	8000a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	490c      	ldr	r1, [pc, #48]	@ (8000ac0 <__NVIC_SetPriority+0x4c>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a9c:	e00a      	b.n	8000ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4908      	ldr	r1, [pc, #32]	@ (8000ac4 <__NVIC_SetPriority+0x50>)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	761a      	strb	r2, [r3, #24]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	@ 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	f1c3 0307 	rsb	r3, r3, #7
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	bf28      	it	cs
 8000ae6:	2304      	movcs	r3, #4
 8000ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3304      	adds	r3, #4
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d902      	bls.n	8000af8 <NVIC_EncodePriority+0x30>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3b03      	subs	r3, #3
 8000af6:	e000      	b.n	8000afa <NVIC_EncodePriority+0x32>
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43da      	mvns	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43d9      	mvns	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	4313      	orrs	r3, r2
         );
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	@ 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b40:	d301      	bcc.n	8000b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00f      	b.n	8000b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <SysTick_Config+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4e:	210f      	movs	r1, #15
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f7ff ff8e 	bl	8000a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <SysTick_Config+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5e:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <SysTick_Config+0x40>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff47 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b98:	f7ff ff5e 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	6978      	ldr	r0, [r7, #20]
 8000ba4:	f7ff ff90 	bl	8000ac8 <NVIC_EncodePriority>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff5f 	bl	8000a74 <__NVIC_SetPriority>
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ffb2 	bl	8000b30 <SysTick_Config>
 8000bcc:	4603      	mov	r3, r0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e147      	b.n	8000e7a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d106      	bne.n	8000c04 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff fd28 	bl	8000654 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	699a      	ldr	r2, [r3, #24]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f022 0210 	bic.w	r2, r2, #16
 8000c12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c14:	f7ff fef0 	bl	80009f8 <HAL_GetTick>
 8000c18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c1a:	e012      	b.n	8000c42 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c1c:	f7ff feec 	bl	80009f8 <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	2b0a      	cmp	r3, #10
 8000c28:	d90b      	bls.n	8000c42 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c2e:	f043 0201 	orr.w	r2, r3, #1
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2203      	movs	r2, #3
 8000c3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e11b      	b.n	8000e7a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0308 	and.w	r3, r3, #8
 8000c4c:	2b08      	cmp	r3, #8
 8000c4e:	d0e5      	beq.n	8000c1c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	699a      	ldr	r2, [r3, #24]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f042 0201 	orr.w	r2, r2, #1
 8000c5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c60:	f7ff feca 	bl	80009f8 <HAL_GetTick>
 8000c64:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000c66:	e012      	b.n	8000c8e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c68:	f7ff fec6 	bl	80009f8 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b0a      	cmp	r3, #10
 8000c74:	d90b      	bls.n	8000c8e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7a:	f043 0201 	orr.w	r2, r3, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2203      	movs	r2, #3
 8000c86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e0f5      	b.n	8000e7a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0e5      	beq.n	8000c68 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	699a      	ldr	r2, [r3, #24]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f042 0202 	orr.w	r2, r2, #2
 8000caa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a74      	ldr	r2, [pc, #464]	@ (8000e84 <HAL_FDCAN_Init+0x2ac>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d103      	bne.n	8000cbe <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000cb6:	4a74      	ldr	r2, [pc, #464]	@ (8000e88 <HAL_FDCAN_Init+0x2b0>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	7c1b      	ldrb	r3, [r3, #16]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d108      	bne.n	8000cd8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	699a      	ldr	r2, [r3, #24]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000cd4:	619a      	str	r2, [r3, #24]
 8000cd6:	e007      	b.n	8000ce8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	699a      	ldr	r2, [r3, #24]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ce6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7c5b      	ldrb	r3, [r3, #17]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d108      	bne.n	8000d02 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	699a      	ldr	r2, [r3, #24]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000cfe:	619a      	str	r2, [r3, #24]
 8000d00:	e007      	b.n	8000d12 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	699a      	ldr	r2, [r3, #24]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000d10:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7c9b      	ldrb	r3, [r3, #18]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d108      	bne.n	8000d2c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	699a      	ldr	r2, [r3, #24]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000d28:	619a      	str	r2, [r3, #24]
 8000d2a:	e007      	b.n	8000d3c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	699a      	ldr	r2, [r3, #24]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d3a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	699a      	ldr	r2, [r3, #24]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000d60:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	691a      	ldr	r2, [r3, #16]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0210 	bic.w	r2, r2, #16
 8000d70:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d108      	bne.n	8000d8c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	699a      	ldr	r2, [r3, #24]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f042 0204 	orr.w	r2, r2, #4
 8000d88:	619a      	str	r2, [r3, #24]
 8000d8a:	e02c      	b.n	8000de6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d028      	beq.n	8000de6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d01c      	beq.n	8000dd6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	699a      	ldr	r2, [r3, #24]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000daa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	691a      	ldr	r2, [r3, #16]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f042 0210 	orr.w	r2, r2, #16
 8000dba:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d110      	bne.n	8000de6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	699a      	ldr	r2, [r3, #24]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f042 0220 	orr.w	r2, r2, #32
 8000dd2:	619a      	str	r2, [r3, #24]
 8000dd4:	e007      	b.n	8000de6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	699a      	ldr	r2, [r3, #24]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f042 0220 	orr.w	r2, r2, #32
 8000de4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000df6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a1b      	ldr	r3, [r3, #32]
 8000dfc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000dfe:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e0e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e10:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000e1a:	d115      	bne.n	8000e48 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e20:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e26:	3b01      	subs	r3, #1
 8000e28:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e2a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e30:	3b01      	subs	r3, #1
 8000e32:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000e34:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000e44:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e46:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 f814 	bl	8000e8c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40006400 	.word	0x40006400
 8000e88:	40006500 	.word	0x40006500

08000e8c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000e94:	4b30      	ldr	r3, [pc, #192]	@ (8000f58 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8000e96:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a2f      	ldr	r2, [pc, #188]	@ (8000f5c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d103      	bne.n	8000eaa <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8000ea8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a2c      	ldr	r2, [pc, #176]	@ (8000f60 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d103      	bne.n	8000ebc <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8000eba:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eca:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ed2:	041a      	lsls	r2, r3, #16
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ef0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ef8:	061a      	lsls	r2, r3, #24
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	e005      	b.n	8000f3e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d3f3      	bcc.n	8000f32 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	4000a400 	.word	0x4000a400
 8000f5c:	40006800 	.word	0x40006800
 8000f60:	40006c00 	.word	0x40006c00

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f72:	e15a      	b.n	800122a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2101      	movs	r1, #1
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	4013      	ands	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 814c 	beq.w	8001224 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d005      	beq.n	8000fa4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d130      	bne.n	8001006 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fda:	2201      	movs	r2, #1
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	091b      	lsrs	r3, r3, #4
 8000ff0:	f003 0201 	and.w	r2, r3, #1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b03      	cmp	r3, #3
 8001010:	d017      	beq.n	8001042 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d123      	bne.n	8001096 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	691a      	ldr	r2, [r3, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	6939      	ldr	r1, [r7, #16]
 8001092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0203 	and.w	r2, r3, #3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 80a6 	beq.w	8001224 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001248 <HAL_GPIO_Init+0x2e4>)
 80010da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010dc:	4a5a      	ldr	r2, [pc, #360]	@ (8001248 <HAL_GPIO_Init+0x2e4>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80010e4:	4b58      	ldr	r3, [pc, #352]	@ (8001248 <HAL_GPIO_Init+0x2e4>)
 80010e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f0:	4a56      	ldr	r2, [pc, #344]	@ (800124c <HAL_GPIO_Init+0x2e8>)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3302      	adds	r3, #2
 80010f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800111a:	d01f      	beq.n	800115c <HAL_GPIO_Init+0x1f8>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a4c      	ldr	r2, [pc, #304]	@ (8001250 <HAL_GPIO_Init+0x2ec>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d019      	beq.n	8001158 <HAL_GPIO_Init+0x1f4>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a4b      	ldr	r2, [pc, #300]	@ (8001254 <HAL_GPIO_Init+0x2f0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d013      	beq.n	8001154 <HAL_GPIO_Init+0x1f0>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a4a      	ldr	r2, [pc, #296]	@ (8001258 <HAL_GPIO_Init+0x2f4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d00d      	beq.n	8001150 <HAL_GPIO_Init+0x1ec>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a49      	ldr	r2, [pc, #292]	@ (800125c <HAL_GPIO_Init+0x2f8>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d007      	beq.n	800114c <HAL_GPIO_Init+0x1e8>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a48      	ldr	r2, [pc, #288]	@ (8001260 <HAL_GPIO_Init+0x2fc>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d101      	bne.n	8001148 <HAL_GPIO_Init+0x1e4>
 8001144:	2305      	movs	r3, #5
 8001146:	e00a      	b.n	800115e <HAL_GPIO_Init+0x1fa>
 8001148:	2306      	movs	r3, #6
 800114a:	e008      	b.n	800115e <HAL_GPIO_Init+0x1fa>
 800114c:	2304      	movs	r3, #4
 800114e:	e006      	b.n	800115e <HAL_GPIO_Init+0x1fa>
 8001150:	2303      	movs	r3, #3
 8001152:	e004      	b.n	800115e <HAL_GPIO_Init+0x1fa>
 8001154:	2302      	movs	r3, #2
 8001156:	e002      	b.n	800115e <HAL_GPIO_Init+0x1fa>
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <HAL_GPIO_Init+0x1fa>
 800115c:	2300      	movs	r3, #0
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	f002 0203 	and.w	r2, r2, #3
 8001164:	0092      	lsls	r2, r2, #2
 8001166:	4093      	lsls	r3, r2
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800116e:	4937      	ldr	r1, [pc, #220]	@ (800124c <HAL_GPIO_Init+0x2e8>)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800117c:	4b39      	ldr	r3, [pc, #228]	@ (8001264 <HAL_GPIO_Init+0x300>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011a0:	4a30      	ldr	r2, [pc, #192]	@ (8001264 <HAL_GPIO_Init+0x300>)
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001264 <HAL_GPIO_Init+0x300>)
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ca:	4a26      	ldr	r2, [pc, #152]	@ (8001264 <HAL_GPIO_Init+0x300>)
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011d0:	4b24      	ldr	r3, [pc, #144]	@ (8001264 <HAL_GPIO_Init+0x300>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001264 <HAL_GPIO_Init+0x300>)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <HAL_GPIO_Init+0x300>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800121e:	4a11      	ldr	r2, [pc, #68]	@ (8001264 <HAL_GPIO_Init+0x300>)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	3301      	adds	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	fa22 f303 	lsr.w	r3, r2, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	f47f ae9d 	bne.w	8000f74 <HAL_GPIO_Init+0x10>
  }
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	371c      	adds	r7, #28
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	40021000 	.word	0x40021000
 800124c:	40010000 	.word	0x40010000
 8001250:	48000400 	.word	0x48000400
 8001254:	48000800 	.word	0x48000800
 8001258:	48000c00 	.word	0x48000c00
 800125c:	48001000 	.word	0x48001000
 8001260:	48001400 	.word	0x48001400
 8001264:	40010400 	.word	0x40010400

08001268 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0c0      	b.n	80013fc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d106      	bne.n	8001294 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff faae 	bl	80007f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2203      	movs	r2, #3
 8001298:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 fb31 	bl	8002908 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	e03e      	b.n	800132a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	440b      	add	r3, r1
 80012ba:	3311      	adds	r3, #17
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	440b      	add	r3, r1
 80012ce:	3310      	adds	r3, #16
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012d4:	7bfa      	ldrb	r2, [r7, #15]
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	440b      	add	r3, r1
 80012e2:	3313      	adds	r3, #19
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	440b      	add	r3, r1
 80012f6:	3320      	adds	r3, #32
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	3324      	adds	r3, #36	@ 0x24
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	1c5a      	adds	r2, r3, #1
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	3301      	adds	r3, #1
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	791b      	ldrb	r3, [r3, #4]
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	429a      	cmp	r2, r3
 8001332:	d3bb      	bcc.n	80012ac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e044      	b.n	80013c4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	440b      	add	r3, r1
 800135e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	440b      	add	r3, r1
 8001374:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	440b      	add	r3, r1
 800138a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001392:	7bfa      	ldrb	r2, [r7, #15]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	440b      	add	r3, r1
 80013a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	3301      	adds	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	791b      	ldrb	r3, [r3, #4]
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d3b5      	bcc.n	800133a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3304      	adds	r3, #4
 80013d6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013da:	f001 fab0 	bl	800293e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7a9b      	ldrb	r3, [r3, #10]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d102      	bne.n	80013fa <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f805 	bl	8001404 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001428:	b29b      	uxth	r3, r3
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	b29a      	uxth	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800143c:	b29b      	uxth	r3, r3
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	b29a      	uxth	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d141      	bne.n	80014ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001466:	4b4b      	ldr	r3, [pc, #300]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800146e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001472:	d131      	bne.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001474:	4b47      	ldr	r3, [pc, #284]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800147a:	4a46      	ldr	r2, [pc, #280]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001480:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001484:	4b43      	ldr	r3, [pc, #268]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800148c:	4a41      	ldr	r2, [pc, #260]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001492:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001494:	4b40      	ldr	r3, [pc, #256]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2232      	movs	r2, #50	@ 0x32
 800149a:	fb02 f303 	mul.w	r3, r2, r3
 800149e:	4a3f      	ldr	r2, [pc, #252]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	0c9b      	lsrs	r3, r3, #18
 80014a6:	3301      	adds	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014aa:	e002      	b.n	80014b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b2:	4b38      	ldr	r3, [pc, #224]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014be:	d102      	bne.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f2      	bne.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014c6:	4b33      	ldr	r3, [pc, #204]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014d2:	d158      	bne.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e057      	b.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014de:	4a2d      	ldr	r2, [pc, #180]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014e8:	e04d      	b.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014f0:	d141      	bne.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014f2:	4b28      	ldr	r3, [pc, #160]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014fe:	d131      	bne.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001500:	4b24      	ldr	r3, [pc, #144]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001506:	4a23      	ldr	r2, [pc, #140]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800150c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001510:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001518:	4a1e      	ldr	r2, [pc, #120]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800151e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001520:	4b1d      	ldr	r3, [pc, #116]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2232      	movs	r2, #50	@ 0x32
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	4a1c      	ldr	r2, [pc, #112]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800152c:	fba2 2303 	umull	r2, r3, r2, r3
 8001530:	0c9b      	lsrs	r3, r3, #18
 8001532:	3301      	adds	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001536:	e002      	b.n	800153e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3b01      	subs	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154a:	d102      	bne.n	8001552 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f2      	bne.n	8001538 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800155e:	d112      	bne.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e011      	b.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001564:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800156a:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001570:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001574:	e007      	b.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001576:	4b07      	ldr	r3, [pc, #28]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800157e:	4a05      	ldr	r2, [pc, #20]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001584:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	40007000 	.word	0x40007000
 8001598:	20000000 	.word	0x20000000
 800159c:	431bde83 	.word	0x431bde83

080015a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015a4:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ae:	6093      	str	r3, [r2, #8]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40007000 	.word	0x40007000

080015c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e2fe      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d075      	beq.n	80016ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015de:	4b97      	ldr	r3, [pc, #604]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015e8:	4b94      	ldr	r3, [pc, #592]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	2b0c      	cmp	r3, #12
 80015f6:	d102      	bne.n	80015fe <HAL_RCC_OscConfig+0x3e>
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d002      	beq.n	8001604 <HAL_RCC_OscConfig+0x44>
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b08      	cmp	r3, #8
 8001602:	d10b      	bne.n	800161c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001604:	4b8d      	ldr	r3, [pc, #564]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d05b      	beq.n	80016c8 <HAL_RCC_OscConfig+0x108>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d157      	bne.n	80016c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e2d9      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001624:	d106      	bne.n	8001634 <HAL_RCC_OscConfig+0x74>
 8001626:	4b85      	ldr	r3, [pc, #532]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a84      	ldr	r2, [pc, #528]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e01d      	b.n	8001670 <HAL_RCC_OscConfig+0xb0>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x98>
 800163e:	4b7f      	ldr	r3, [pc, #508]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a7e      	ldr	r2, [pc, #504]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001644:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b7c      	ldr	r3, [pc, #496]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a7b      	ldr	r2, [pc, #492]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0xb0>
 8001658:	4b78      	ldr	r3, [pc, #480]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a77      	ldr	r2, [pc, #476]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800165e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b75      	ldr	r3, [pc, #468]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a74      	ldr	r2, [pc, #464]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800166a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800166e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d013      	beq.n	80016a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff f9be 	bl	80009f8 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff f9ba 	bl	80009f8 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	@ 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e29e      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001692:	4b6a      	ldr	r3, [pc, #424]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0xc0>
 800169e:	e014      	b.n	80016ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff f9aa 	bl	80009f8 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff f9a6 	bl	80009f8 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	@ 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e28a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ba:	4b60      	ldr	r3, [pc, #384]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0xe8>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d075      	beq.n	80017c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d6:	4b59      	ldr	r3, [pc, #356]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e0:	4b56      	ldr	r3, [pc, #344]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b0c      	cmp	r3, #12
 80016ee:	d102      	bne.n	80016f6 <HAL_RCC_OscConfig+0x136>
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d002      	beq.n	80016fc <HAL_RCC_OscConfig+0x13c>
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d11f      	bne.n	800173c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016fc:	4b4f      	ldr	r3, [pc, #316]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_OscConfig+0x154>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e25d      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b49      	ldr	r3, [pc, #292]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	061b      	lsls	r3, r3, #24
 8001722:	4946      	ldr	r1, [pc, #280]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001728:	4b45      	ldr	r3, [pc, #276]	@ (8001840 <HAL_RCC_OscConfig+0x280>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff f917 	bl	8000960 <HAL_InitTick>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d043      	beq.n	80017c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e249      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d023      	beq.n	800178c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001744:	4b3d      	ldr	r3, [pc, #244]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a3c      	ldr	r2, [pc, #240]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff f952 	bl	80009f8 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001758:	f7ff f94e 	bl	80009f8 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e232      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800176a:	4b34      	ldr	r3, [pc, #208]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001776:	4b31      	ldr	r3, [pc, #196]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	061b      	lsls	r3, r3, #24
 8001784:	492d      	ldr	r1, [pc, #180]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
 800178a:	e01a      	b.n	80017c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178c:	4b2b      	ldr	r3, [pc, #172]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a2a      	ldr	r2, [pc, #168]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001792:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff f92e 	bl	80009f8 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff f92a 	bl	80009f8 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e20e      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b2:	4b22      	ldr	r3, [pc, #136]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1e0>
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d041      	beq.n	8001852 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01c      	beq.n	8001810 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d6:	4b19      	ldr	r3, [pc, #100]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80017d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017dc:	4a17      	ldr	r2, [pc, #92]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e6:	f7ff f907 	bl	80009f8 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ee:	f7ff f903 	bl	80009f8 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e1e7      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001800:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0ef      	beq.n	80017ee <HAL_RCC_OscConfig+0x22e>
 800180e:	e020      	b.n	8001852 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001810:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001816:	4a09      	ldr	r2, [pc, #36]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff f8ea 	bl	80009f8 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001826:	e00d      	b.n	8001844 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001828:	f7ff f8e6 	bl	80009f8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d906      	bls.n	8001844 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e1ca      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001844:	4b8c      	ldr	r3, [pc, #560]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1ea      	bne.n	8001828 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 80a6 	beq.w	80019ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001864:	4b84      	ldr	r3, [pc, #528]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_OscConfig+0x2b4>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <HAL_RCC_OscConfig+0x2b6>
 8001874:	2300      	movs	r3, #0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00d      	beq.n	8001896 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001884:	6593      	str	r3, [r2, #88]	@ 0x58
 8001886:	4b7c      	ldr	r3, [pc, #496]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001892:	2301      	movs	r3, #1
 8001894:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001896:	4b79      	ldr	r3, [pc, #484]	@ (8001a7c <HAL_RCC_OscConfig+0x4bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d118      	bne.n	80018d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018a2:	4b76      	ldr	r3, [pc, #472]	@ (8001a7c <HAL_RCC_OscConfig+0x4bc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a75      	ldr	r2, [pc, #468]	@ (8001a7c <HAL_RCC_OscConfig+0x4bc>)
 80018a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ae:	f7ff f8a3 	bl	80009f8 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b6:	f7ff f89f 	bl	80009f8 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e183      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c8:	4b6c      	ldr	r3, [pc, #432]	@ (8001a7c <HAL_RCC_OscConfig+0x4bc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d108      	bne.n	80018ee <HAL_RCC_OscConfig+0x32e>
 80018dc:	4b66      	ldr	r3, [pc, #408]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e2:	4a65      	ldr	r2, [pc, #404]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018ec:	e024      	b.n	8001938 <HAL_RCC_OscConfig+0x378>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	d110      	bne.n	8001918 <HAL_RCC_OscConfig+0x358>
 80018f6:	4b60      	ldr	r3, [pc, #384]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80018f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fc:	4a5e      	ldr	r2, [pc, #376]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001906:	4b5c      	ldr	r3, [pc, #368]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800190c:	4a5a      	ldr	r2, [pc, #360]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001916:	e00f      	b.n	8001938 <HAL_RCC_OscConfig+0x378>
 8001918:	4b57      	ldr	r3, [pc, #348]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191e:	4a56      	ldr	r2, [pc, #344]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001928:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800192a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800192e:	4a52      	ldr	r2, [pc, #328]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001930:	f023 0304 	bic.w	r3, r3, #4
 8001934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d016      	beq.n	800196e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7ff f85a 	bl	80009f8 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001946:	e00a      	b.n	800195e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7ff f856 	bl	80009f8 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e138      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800195e:	4b46      	ldr	r3, [pc, #280]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0ed      	beq.n	8001948 <HAL_RCC_OscConfig+0x388>
 800196c:	e015      	b.n	800199a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196e:	f7ff f843 	bl	80009f8 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001974:	e00a      	b.n	800198c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7ff f83f 	bl	80009f8 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e121      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800198c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800198e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ed      	bne.n	8001976 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800199a:	7ffb      	ldrb	r3, [r7, #31]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d105      	bne.n	80019ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a0:	4b35      	ldr	r3, [pc, #212]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a4:	4a34      	ldr	r2, [pc, #208]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d03c      	beq.n	8001a32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d01c      	beq.n	80019fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff f812 	bl	80009f8 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019d8:	f7ff f80e 	bl	80009f8 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0f2      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ea:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0ef      	beq.n	80019d8 <HAL_RCC_OscConfig+0x418>
 80019f8:	e01b      	b.n	8001a32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a00:	4a1d      	ldr	r2, [pc, #116]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001a02:	f023 0301 	bic.w	r3, r3, #1
 8001a06:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0a:	f7fe fff5 	bl	80009f8 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a12:	f7fe fff1 	bl	80009f8 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0d5      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a24:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001a26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1ef      	bne.n	8001a12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80c9 	beq.w	8001bce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b0c      	cmp	r3, #12
 8001a46:	f000 8083 	beq.w	8001b50 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d15e      	bne.n	8001b10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a08      	ldr	r2, [pc, #32]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001a58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7fe ffcb 	bl	80009f8 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a64:	e00c      	b.n	8001a80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a66:	f7fe ffc7 	bl	80009f8 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d905      	bls.n	8001a80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0ab      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a80:	4b55      	ldr	r3, [pc, #340]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ec      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8c:	4b52      	ldr	r3, [pc, #328]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	4b52      	ldr	r3, [pc, #328]	@ (8001bdc <HAL_RCC_OscConfig+0x61c>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6a11      	ldr	r1, [r2, #32]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a9c:	3a01      	subs	r2, #1
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	4311      	orrs	r1, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001aa6:	0212      	lsls	r2, r2, #8
 8001aa8:	4311      	orrs	r1, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001aae:	0852      	lsrs	r2, r2, #1
 8001ab0:	3a01      	subs	r2, #1
 8001ab2:	0552      	lsls	r2, r2, #21
 8001ab4:	4311      	orrs	r1, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001aba:	0852      	lsrs	r2, r2, #1
 8001abc:	3a01      	subs	r2, #1
 8001abe:	0652      	lsls	r2, r2, #25
 8001ac0:	4311      	orrs	r1, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ac6:	06d2      	lsls	r2, r2, #27
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	4943      	ldr	r1, [pc, #268]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b41      	ldr	r3, [pc, #260]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a40      	ldr	r2, [pc, #256]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ada:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001adc:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4a3d      	ldr	r2, [pc, #244]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ae6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7fe ff86 	bl	80009f8 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7fe ff82 	bl	80009f8 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e066      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b02:	4b35      	ldr	r3, [pc, #212]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x530>
 8001b0e:	e05e      	b.n	8001bce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b10:	4b31      	ldr	r3, [pc, #196]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a30      	ldr	r2, [pc, #192]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001b16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7fe ff6c 	bl	80009f8 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7fe ff68 	bl	80009f8 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e04c      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b36:	4b28      	ldr	r3, [pc, #160]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b42:	4b25      	ldr	r3, [pc, #148]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	4924      	ldr	r1, [pc, #144]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001b48:	4b25      	ldr	r3, [pc, #148]	@ (8001be0 <HAL_RCC_OscConfig+0x620>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	60cb      	str	r3, [r1, #12]
 8001b4e:	e03e      	b.n	8001bce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e039      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 0203 	and.w	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d12c      	bne.n	8001bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d123      	bne.n	8001bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d11b      	bne.n	8001bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d113      	bne.n	8001bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bac:	085b      	lsrs	r3, r3, #1
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d109      	bne.n	8001bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc0:	085b      	lsrs	r3, r3, #1
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	019f800c 	.word	0x019f800c
 8001be0:	feeefffc 	.word	0xfeeefffc

08001be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e11e      	b.n	8001e3a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b91      	ldr	r3, [pc, #580]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d910      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b8e      	ldr	r3, [pc, #568]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 020f 	bic.w	r2, r3, #15
 8001c12:	498c      	ldr	r1, [pc, #560]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b8a      	ldr	r3, [pc, #552]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e106      	b.n	8001e3a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d073      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d129      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c40:	4b81      	ldr	r3, [pc, #516]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0f4      	b.n	8001e3a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c50:	f000 f964 	bl	8001f1c <RCC_GetSysClockFreqFromPLLSource>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4a7c      	ldr	r2, [pc, #496]	@ (8001e4c <HAL_RCC_ClockConfig+0x268>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d93f      	bls.n	8001cde <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c5e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d009      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d033      	beq.n	8001cde <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d12f      	bne.n	8001cde <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c7e:	4b72      	ldr	r3, [pc, #456]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c86:	4a70      	ldr	r2, [pc, #448]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c8e:	2380      	movs	r3, #128	@ 0x80
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e024      	b.n	8001cde <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0c6      	b.n	8001e3a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cac:	4b66      	ldr	r3, [pc, #408]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0be      	b.n	8001e3a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001cbc:	f000 f8ce 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4a61      	ldr	r2, [pc, #388]	@ (8001e4c <HAL_RCC_ClockConfig+0x268>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d909      	bls.n	8001cde <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cca:	4b5f      	ldr	r3, [pc, #380]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cd2:	4a5d      	ldr	r2, [pc, #372]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001cda:	2380      	movs	r3, #128	@ 0x80
 8001cdc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cde:	4b5a      	ldr	r3, [pc, #360]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f023 0203 	bic.w	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4957      	ldr	r1, [pc, #348]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cf0:	f7fe fe82 	bl	80009f8 <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7fe fe7e 	bl	80009f8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e095      	b.n	8001e3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 020c 	and.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1eb      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d023      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d38:	4b43      	ldr	r3, [pc, #268]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a42      	ldr	r2, [pc, #264]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d50:	4b3d      	ldr	r3, [pc, #244]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d58:	4a3b      	ldr	r2, [pc, #236]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d60:	4b39      	ldr	r3, [pc, #228]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4936      	ldr	r1, [pc, #216]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b80      	cmp	r3, #128	@ 0x80
 8001d78:	d105      	bne.n	8001d86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d7a:	4b33      	ldr	r3, [pc, #204]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	4a32      	ldr	r2, [pc, #200]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d86:	4b2f      	ldr	r3, [pc, #188]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d21d      	bcs.n	8001dd0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d94:	4b2b      	ldr	r3, [pc, #172]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 020f 	bic.w	r2, r3, #15
 8001d9c:	4929      	ldr	r1, [pc, #164]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001da4:	f7fe fe28 	bl	80009f8 <HAL_GetTick>
 8001da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dac:	f7fe fe24 	bl	80009f8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e03b      	b.n	8001e3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b20      	ldr	r3, [pc, #128]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1ed      	bne.n	8001dac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4917      	ldr	r1, [pc, #92]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d009      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfa:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	490f      	ldr	r1, [pc, #60]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e0e:	f000 f825 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e12:	4602      	mov	r2, r0
 8001e14:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	490c      	ldr	r1, [pc, #48]	@ (8001e50 <HAL_RCC_ClockConfig+0x26c>)
 8001e20:	5ccb      	ldrb	r3, [r1, r3]
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <HAL_RCC_ClockConfig+0x270>)
 8001e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <HAL_RCC_ClockConfig+0x274>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fd94 	bl	8000960 <HAL_InitTick>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40022000 	.word	0x40022000
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	04c4b400 	.word	0x04c4b400
 8001e50:	080029ec 	.word	0x080029ec
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e62:	4b2c      	ldr	r3, [pc, #176]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	e047      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e74:	4b27      	ldr	r3, [pc, #156]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e80:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	e03e      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e86:	4b23      	ldr	r3, [pc, #140]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d136      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e92:	4b20      	ldr	r3, [pc, #128]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d10c      	bne.n	8001eca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eb0:	4a19      	ldr	r2, [pc, #100]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb8:	4a16      	ldr	r2, [pc, #88]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eba:	68d2      	ldr	r2, [r2, #12]
 8001ebc:	0a12      	lsrs	r2, r2, #8
 8001ebe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	617b      	str	r3, [r7, #20]
      break;
 8001ec8:	e00c      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eca:	4a13      	ldr	r2, [pc, #76]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4a10      	ldr	r2, [pc, #64]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed4:	68d2      	ldr	r2, [r2, #12]
 8001ed6:	0a12      	lsrs	r2, r2, #8
 8001ed8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001edc:	fb02 f303 	mul.w	r3, r2, r3
 8001ee0:	617b      	str	r3, [r7, #20]
      break;
 8001ee2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0e5b      	lsrs	r3, r3, #25
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	e001      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f04:	693b      	ldr	r3, [r7, #16]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	00f42400 	.word	0x00f42400

08001f1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f22:	4b1e      	ldr	r3, [pc, #120]	@ (8001f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	3301      	adds	r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d10c      	bne.n	8001f5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f40:	4a17      	ldr	r2, [pc, #92]	@ (8001fa0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	4a14      	ldr	r2, [pc, #80]	@ (8001f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f4a:	68d2      	ldr	r2, [r2, #12]
 8001f4c:	0a12      	lsrs	r2, r2, #8
 8001f4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f52:	fb02 f303 	mul.w	r3, r2, r3
 8001f56:	617b      	str	r3, [r7, #20]
    break;
 8001f58:	e00c      	b.n	8001f74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f5a:	4a11      	ldr	r2, [pc, #68]	@ (8001fa0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	4a0e      	ldr	r2, [pc, #56]	@ (8001f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f64:	68d2      	ldr	r2, [r2, #12]
 8001f66:	0a12      	lsrs	r2, r2, #8
 8001f68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f6c:	fb02 f303 	mul.w	r3, r2, r3
 8001f70:	617b      	str	r3, [r7, #20]
    break;
 8001f72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f74:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	0e5b      	lsrs	r3, r3, #25
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f8e:	687b      	ldr	r3, [r7, #4]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	00f42400 	.word	0x00f42400

08001fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fac:	2300      	movs	r3, #0
 8001fae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 8098 	beq.w	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc6:	4b43      	ldr	r3, [pc, #268]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10d      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	4b40      	ldr	r3, [pc, #256]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	4a3f      	ldr	r2, [pc, #252]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fde:	4b3d      	ldr	r3, [pc, #244]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	2301      	movs	r3, #1
 8001fec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fee:	4b3a      	ldr	r3, [pc, #232]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a39      	ldr	r2, [pc, #228]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ffa:	f7fe fcfd 	bl	80009f8 <HAL_GetTick>
 8001ffe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002000:	e009      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002002:	f7fe fcf9 	bl	80009f8 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d902      	bls.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	74fb      	strb	r3, [r7, #19]
        break;
 8002014:	e005      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002016:	4b30      	ldr	r3, [pc, #192]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0ef      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002022:	7cfb      	ldrb	r3, [r7, #19]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d159      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002028:	4b2a      	ldr	r3, [pc, #168]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002032:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01e      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	429a      	cmp	r2, r3
 8002042:	d019      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002044:	4b23      	ldr	r3, [pc, #140]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800204e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002050:	4b20      	ldr	r3, [pc, #128]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002056:	4a1f      	ldr	r2, [pc, #124]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002060:	4b1c      	ldr	r3, [pc, #112]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002066:	4a1b      	ldr	r2, [pc, #108]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002068:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800206c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002070:	4a18      	ldr	r2, [pc, #96]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d016      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7fe fcb9 	bl	80009f8 <HAL_GetTick>
 8002086:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002088:	e00b      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7fe fcb5 	bl	80009f8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d902      	bls.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	74fb      	strb	r3, [r7, #19]
            break;
 80020a0:	e006      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a2:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0ec      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10b      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020b6:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020c4:	4903      	ldr	r1, [pc, #12]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020cc:	e008      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
 80020d0:	74bb      	strb	r3, [r7, #18]
 80020d2:	e005      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020dc:	7cfb      	ldrb	r3, [r7, #19]
 80020de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e0:	7c7b      	ldrb	r3, [r7, #17]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d105      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e6:	4ba7      	ldr	r3, [pc, #668]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ea:	4aa6      	ldr	r2, [pc, #664]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020fe:	4ba1      	ldr	r3, [pc, #644]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002104:	f023 0203 	bic.w	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	499d      	ldr	r1, [pc, #628]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002120:	4b98      	ldr	r3, [pc, #608]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002126:	f023 020c 	bic.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4995      	ldr	r1, [pc, #596]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002142:	4b90      	ldr	r3, [pc, #576]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002148:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	498c      	ldr	r1, [pc, #560]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002164:	4b87      	ldr	r3, [pc, #540]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	4984      	ldr	r1, [pc, #528]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002186:	4b7f      	ldr	r3, [pc, #508]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	497b      	ldr	r1, [pc, #492]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021a8:	4b76      	ldr	r3, [pc, #472]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	4973      	ldr	r1, [pc, #460]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	496a      	ldr	r1, [pc, #424]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021ec:	4b65      	ldr	r3, [pc, #404]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4962      	ldr	r1, [pc, #392]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800220e:	4b5d      	ldr	r3, [pc, #372]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002214:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221c:	4959      	ldr	r1, [pc, #356]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002230:	4b54      	ldr	r3, [pc, #336]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002232:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002236:	f023 0203 	bic.w	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223e:	4951      	ldr	r1, [pc, #324]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002252:	4b4c      	ldr	r3, [pc, #304]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002258:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	4948      	ldr	r1, [pc, #288]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002270:	2b00      	cmp	r3, #0
 8002272:	d015      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002274:	4b43      	ldr	r3, [pc, #268]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	4940      	ldr	r1, [pc, #256]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002292:	d105      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002294:	4b3b      	ldr	r3, [pc, #236]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a3a      	ldr	r2, [pc, #232]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800229e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d015      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022ac:	4b35      	ldr	r3, [pc, #212]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ba:	4932      	ldr	r1, [pc, #200]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022ca:	d105      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d015      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022e4:	4b27      	ldr	r3, [pc, #156]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f2:	4924      	ldr	r1, [pc, #144]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002302:	d105      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002304:	4b1f      	ldr	r3, [pc, #124]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4a1e      	ldr	r2, [pc, #120]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800230e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d015      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800231c:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232a:	4916      	ldr	r1, [pc, #88]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002336:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800233a:	d105      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800233c:	4b11      	ldr	r3, [pc, #68]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a10      	ldr	r2, [pc, #64]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002346:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d019      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002354:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	4908      	ldr	r1, [pc, #32]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002372:	d109      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002374:	4b03      	ldr	r3, [pc, #12]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a02      	ldr	r2, [pc, #8]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800237e:	60d3      	str	r3, [r2, #12]
 8002380:	e002      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d015      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002394:	4b29      	ldr	r3, [pc, #164]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	4926      	ldr	r1, [pc, #152]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023b2:	d105      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023b4:	4b21      	ldr	r3, [pc, #132]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a20      	ldr	r2, [pc, #128]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d015      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023da:	4918      	ldr	r1, [pc, #96]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023ea:	d105      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023ec:	4b13      	ldr	r3, [pc, #76]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a12      	ldr	r2, [pc, #72]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d015      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002404:	4b0d      	ldr	r3, [pc, #52]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002406:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800240a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002412:	490a      	ldr	r1, [pc, #40]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002422:	d105      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002424:	4b05      	ldr	r3, [pc, #20]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a04      	ldr	r2, [pc, #16]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800242a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800242e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002430:	7cbb      	ldrb	r3, [r7, #18]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000

08002440 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e09d      	b.n	800258e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	2b00      	cmp	r3, #0
 8002458:	d108      	bne.n	800246c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002462:	d009      	beq.n	8002478 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
 800246a:	e005      	b.n	8002478 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7fe f938 	bl	8000708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80024b8:	d902      	bls.n	80024c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	e002      	b.n	80024c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80024c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80024ce:	d007      	beq.n	80024e0 <HAL_SPI_Init+0xa0>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80024d8:	d002      	beq.n	80024e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002522:	ea42 0103 	orr.w	r1, r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	0c1b      	lsrs	r3, r3, #16
 800253c:	f003 0204 	and.w	r2, r3, #4
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800255c:	ea42 0103 	orr.w	r1, r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69da      	ldr	r2, [r3, #28]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800257c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002596:	b480      	push	{r7}
 8002598:	b08b      	sub	sp, #44	@ 0x2c
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80025bc:	2320      	movs	r3, #32
 80025be:	e003      	b.n	80025c8 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2103      	movs	r1, #3
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	401a      	ands	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	61fb      	str	r3, [r7, #28]
  return result;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80025ea:	2320      	movs	r3, #32
 80025ec:	e003      	b.n	80025f6 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	431a      	orrs	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	601a      	str	r2, [r3, #0]
}
 8002604:	bf00      	nop
 8002606:	372c      	adds	r7, #44	@ 0x2c
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	43db      	mvns	r3, r3
 8002624:	401a      	ands	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	431a      	orrs	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	605a      	str	r2, [r3, #4]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002640:	b480      	push	{r7}
 8002642:	b08b      	sub	sp, #44	@ 0x2c
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	613b      	str	r3, [r7, #16]
  return result;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002666:	2320      	movs	r3, #32
 8002668:	e003      	b.n	8002672 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2103      	movs	r1, #3
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	401a      	ands	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	61fb      	str	r3, [r7, #28]
  return result;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002694:	2320      	movs	r3, #32
 8002696:	e003      	b.n	80026a0 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	fa01 f303 	lsl.w	r3, r1, r3
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80026ae:	bf00      	nop
 80026b0:	372c      	adds	r7, #44	@ 0x2c
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b08b      	sub	sp, #44	@ 0x2c
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	613b      	str	r3, [r7, #16]
  return result;
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80026e0:	2320      	movs	r3, #32
 80026e2:	e003      	b.n	80026ec <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	2103      	movs	r1, #3
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	401a      	ands	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	61fb      	str	r3, [r7, #28]
  return result;
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e003      	b.n	800271a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	fa01 f303 	lsl.w	r3, r1, r3
 8002722:	431a      	orrs	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	60da      	str	r2, [r3, #12]
}
 8002728:	bf00      	nop
 800272a:	372c      	adds	r7, #44	@ 0x2c
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002734:	b480      	push	{r7}
 8002736:	b08b      	sub	sp, #44	@ 0x2c
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a1a      	ldr	r2, [r3, #32]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	613b      	str	r3, [r7, #16]
  return result;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800275a:	2320      	movs	r3, #32
 800275c:	e003      	b.n	8002766 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	210f      	movs	r1, #15
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	401a      	ands	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	61fb      	str	r3, [r7, #28]
  return result;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e003      	b.n	8002794 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	431a      	orrs	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80027a2:	bf00      	nop
 80027a4:	372c      	adds	r7, #44	@ 0x2c
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b08b      	sub	sp, #44	@ 0x2c
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	0a1b      	lsrs	r3, r3, #8
 80027c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	613b      	str	r3, [r7, #16]
  return result;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80027d6:	2320      	movs	r3, #32
 80027d8:	e003      	b.n	80027e2 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	210f      	movs	r1, #15
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	401a      	ands	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	61fb      	str	r3, [r7, #28]
  return result;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002806:	2320      	movs	r3, #32
 8002808:	e003      	b.n	8002812 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	fa01 f303 	lsl.w	r3, r1, r3
 800281a:	431a      	orrs	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002820:	bf00      	nop
 8002822:	372c      	adds	r7, #44	@ 0x2c
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	60fb      	str	r3, [r7, #12]
  return result;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <LL_GPIO_Init+0x26>
    return 32U;
 800284e:	2320      	movs	r3, #32
 8002850:	e003      	b.n	800285a <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800285c:	e048      	b.n	80028f0 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	2101      	movs	r1, #1
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d03a      	beq.n	80028ea <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d003      	beq.n	8002884 <LL_GPIO_Init+0x58>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d10e      	bne.n	80028a2 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	461a      	mov	r2, r3
 800288a:	69b9      	ldr	r1, [r7, #24]
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fed7 	bl	8002640 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6819      	ldr	r1, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	461a      	mov	r2, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff feb7 	bl	8002610 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	461a      	mov	r2, r3
 80028a8:	69b9      	ldr	r1, [r7, #24]
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff ff05 	bl	80026ba <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d111      	bne.n	80028dc <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2bff      	cmp	r3, #255	@ 0xff
 80028bc:	d807      	bhi.n	80028ce <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	461a      	mov	r2, r3
 80028c4:	69b9      	ldr	r1, [r7, #24]
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ff34 	bl	8002734 <LL_GPIO_SetAFPin_0_7>
 80028cc:	e006      	b.n	80028dc <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	461a      	mov	r2, r3
 80028d4:	69b9      	ldr	r1, [r7, #24]
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ff69 	bl	80027ae <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	461a      	mov	r2, r3
 80028e2:	69b9      	ldr	r1, [r7, #24]
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff fe56 	bl	8002596 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3301      	adds	r3, #1
 80028ee:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	fa22 f303 	lsr.w	r3, r2, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1af      	bne.n	800285e <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3720      	adds	r7, #32
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002910:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8002914:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	b29b      	uxth	r3, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	b29b      	uxth	r3, r3
 8002926:	4013      	ands	r3, r2
 8002928:	b29a      	uxth	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	1d3b      	adds	r3, r7, #4
 8002948:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <memset>:
 800297a:	4402      	add	r2, r0
 800297c:	4603      	mov	r3, r0
 800297e:	4293      	cmp	r3, r2
 8002980:	d100      	bne.n	8002984 <memset+0xa>
 8002982:	4770      	bx	lr
 8002984:	f803 1b01 	strb.w	r1, [r3], #1
 8002988:	e7f9      	b.n	800297e <memset+0x4>
	...

0800298c <__libc_init_array>:
 800298c:	b570      	push	{r4, r5, r6, lr}
 800298e:	4d0d      	ldr	r5, [pc, #52]	@ (80029c4 <__libc_init_array+0x38>)
 8002990:	4c0d      	ldr	r4, [pc, #52]	@ (80029c8 <__libc_init_array+0x3c>)
 8002992:	1b64      	subs	r4, r4, r5
 8002994:	10a4      	asrs	r4, r4, #2
 8002996:	2600      	movs	r6, #0
 8002998:	42a6      	cmp	r6, r4
 800299a:	d109      	bne.n	80029b0 <__libc_init_array+0x24>
 800299c:	4d0b      	ldr	r5, [pc, #44]	@ (80029cc <__libc_init_array+0x40>)
 800299e:	4c0c      	ldr	r4, [pc, #48]	@ (80029d0 <__libc_init_array+0x44>)
 80029a0:	f000 f818 	bl	80029d4 <_init>
 80029a4:	1b64      	subs	r4, r4, r5
 80029a6:	10a4      	asrs	r4, r4, #2
 80029a8:	2600      	movs	r6, #0
 80029aa:	42a6      	cmp	r6, r4
 80029ac:	d105      	bne.n	80029ba <__libc_init_array+0x2e>
 80029ae:	bd70      	pop	{r4, r5, r6, pc}
 80029b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b4:	4798      	blx	r3
 80029b6:	3601      	adds	r6, #1
 80029b8:	e7ee      	b.n	8002998 <__libc_init_array+0xc>
 80029ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80029be:	4798      	blx	r3
 80029c0:	3601      	adds	r6, #1
 80029c2:	e7f2      	b.n	80029aa <__libc_init_array+0x1e>
 80029c4:	080029fc 	.word	0x080029fc
 80029c8:	080029fc 	.word	0x080029fc
 80029cc:	080029fc 	.word	0x080029fc
 80029d0:	08002a00 	.word	0x08002a00

080029d4 <_init>:
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	bf00      	nop
 80029d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029da:	bc08      	pop	{r3}
 80029dc:	469e      	mov	lr, r3
 80029de:	4770      	bx	lr

080029e0 <_fini>:
 80029e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e2:	bf00      	nop
 80029e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e6:	bc08      	pop	{r3}
 80029e8:	469e      	mov	lr, r3
 80029ea:	4770      	bx	lr
